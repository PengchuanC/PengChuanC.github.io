# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import file_server.fileserver_pb2 as fileserver__pb2


class FileTransferStub(object):
    """文件传输服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendFile = channel.stream_unary(
                '/file_server.FileTransfer/SendFile',
                request_serializer=fileserver__pb2.RequestSend.SerializeToString,
                response_deserializer=fileserver__pb2.ResponseStatus.FromString,
                )
        self.DownloadFile = channel.unary_stream(
                '/file_server.FileTransfer/DownloadFile',
                request_serializer=fileserver__pb2.RequestFile.SerializeToString,
                response_deserializer=fileserver__pb2.ResponseStream.FromString,
                )


class FileTransferServicer(object):
    """文件传输服务
    """

    def SendFile(self, request_iterator, context):
        """上传文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """下载文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileTransferServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendFile': grpc.stream_unary_rpc_method_handler(
                    servicer.SendFile,
                    request_deserializer=fileserver__pb2.RequestSend.FromString,
                    response_serializer=fileserver__pb2.ResponseStatus.SerializeToString,
            ),
            'DownloadFile': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=fileserver__pb2.RequestFile.FromString,
                    response_serializer=fileserver__pb2.ResponseStream.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file_server.FileTransfer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileTransfer(object):
    """文件传输服务
    """

    @staticmethod
    def SendFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/file_server.FileTransfer/SendFile',
            fileserver__pb2.RequestSend.SerializeToString,
            fileserver__pb2.ResponseStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/file_server.FileTransfer/DownloadFile',
            fileserver__pb2.RequestFile.SerializeToString,
            fileserver__pb2.ResponseStream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
