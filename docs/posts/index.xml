<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>文章列表 on 在我电脑上能跑</title>
		<link>https://pengchuanc.github.io/posts/</link>
		<description>Recent content in 文章列表 on 在我电脑上能跑</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 13 Dec 2023 17:37:12 +0800</lastBuildDate>
		<atom:link href="https://pengchuanc.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Python语言扩展</title>
			<link>https://pengchuanc.github.io/posts/python-extension/</link>
			<pubDate>Wed, 13 Dec 2023 17:37:12 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-extension/</guid>
			<description>1. 简介 Python 语言的扩展模块，主要是用 C 语言编写的，可以直接在 Python 中使用。但实际上除了C语言的扩展模块，Python 还支持其他语言的扩展模块，比如 C</description>
			<content type="html"><![CDATA[<h1 id="1-简介">1. 简介</h1>
<p>Python 语言的扩展模块，主要是用 C 语言编写的，可以直接在 Python 中使用。但实际上除了C语言的扩展模块，Python 还支持其他语言的扩展模块，比如 C++、Cython、C#、Rust 等，实现的方式有ABI、CFFI、SWIG等。</p>
<p>此次主要研究 Python 的 C 系列扩展模块，基本都是通过ABI的方式实现，包括C、Cython和CPP(pybind11)，作为对比，会加入纯Python和Python代码编译成动态链接库来作为对比项。
使用的Python解释器为官方的CPython解释器，版本为3.11.6，Cython为3.0以上版本，使用的编译工具为MSVC，如果要编译源码，必须提前安装<a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist">Microsoft Visual C++ Redistributable</a>。</p>
<h1 id="2-扩展模块的类型">2. 扩展模块的类型</h1>
<p>windows下，Python的扩展模块通常是由其他语言编译出的动态链接库，可以直接在 Python 中使用，在本次的测试环境中文件名通常为<code>modulename.cp311-win_amd64.pyd</code>。</p>
<p>本次测试主要测试两类场景:</p>
<ul>
<li>
<ol>
<li>需要频繁在语言间进行数据交换，但是CPU开销很小的场景</li>
</ol>
</li>
<li>
<ol start="2">
<li>语言间通信次数很少，但是CPU开销较大的场景</li>
</ol>
</li>
</ul>
<h1 id="3-代码编写">3. 代码编写</h1>
<p>本次测试要实现的功能很简单，主要包含<code>hello(name)</code>和<code>fibnacci(n)</code>两个函数，来对应前述两种场景。</p>
<h2 id="31-纯python">3.1 纯Python</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hello</span>(name):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Hello, </span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> !&#34;</span> <span style="color:#f92672">%</span> name
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fibnacci</span>(n):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> n <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> n
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> fibnacci(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> fibnacci(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>)
</span></span></code></pre></div><h2 id="32-c">3.2 C</h2>
<p>C语言扩展模块基于官方标准的Python/C API开发。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define PY_SSIZE_T_CLEAN
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;Python.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;stdio.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> PyObject <span style="color:#f92672">*</span><span style="color:#a6e22e">Py_hello</span>(PyObject <span style="color:#f92672">*</span>self, PyObject <span style="color:#f92672">*</span>args)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>name;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">PyArg_ParseTuple</span>(args, <span style="color:#e6db74">&#34;s&#34;</span>, <span style="color:#f92672">&amp;</span>name))
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> greeting[<span style="color:#ae81ff">50</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">snprintf</span>(greeting, <span style="color:#66d9ef">sizeof</span>(greeting), <span style="color:#e6db74">&#34;Hello, %s!&#34;</span>, name);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Py_BuildValue</span>(<span style="color:#e6db74">&#34;s&#34;</span>, greeting);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">fibonacci</span>(<span style="color:#66d9ef">int</span> n)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fibonacci</span>(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">fibonacci</span>(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> PyObject <span style="color:#f92672">*</span><span style="color:#a6e22e">Py_fibnacci</span>(PyObject <span style="color:#f92672">*</span>self, PyObject <span style="color:#f92672">*</span>args)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> n;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">PyArg_ParseTuple</span>(args, <span style="color:#e6db74">&#34;i&#34;</span>, <span style="color:#f92672">&amp;</span>n))
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> ret <span style="color:#f92672">=</span> <span style="color:#a6e22e">fibonacci</span>(n);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Py_BuildValue</span>(<span style="color:#e6db74">&#34;i&#34;</span>, ret);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> PyMethodDef methods[] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;hello&#34;</span>, Py_hello, METH_VARARGS, <span style="color:#e6db74">&#34;Print Hello, World!&#34;</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#e6db74">&#34;fibnacci&#34;</span>, Py_fibnacci, METH_VARARGS, <span style="color:#e6db74">&#34;cal fibnacci&#34;</span>},
</span></span><span style="display:flex;"><span>    {NULL, NULL, <span style="color:#ae81ff">0</span>, NULL} <span style="color:#75715e">// 结束标志
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> PyModuleDef cpmodule <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    PyModuleDef_HEAD_INIT,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;cp&#34;</span>,      <span style="color:#75715e">/* name of module */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;cp desc&#34;</span>, <span style="color:#75715e">/* module documentation, may be NULL */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    methods};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PyMODINIT_FUNC <span style="color:#a6e22e">PyInit_cp</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">PyModule_Create</span>(<span style="color:#f92672">&amp;</span>cpmodule);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="33-cython">3.3 Cython</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cpdef str hello(str name) <span style="color:#66d9ef">except</span> <span style="color:#f92672">*</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;hello, &#34;</span> <span style="color:#f92672">+</span> name
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cdef int fib(int n):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> n
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> fib(n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> fib(n<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cpdef int fibnacci(int n) <span style="color:#66d9ef">except</span> <span style="color:#f92672">*</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> fib(n)
</span></span></code></pre></div><h2 id="34-cpp">3.4 CPP</h2>
<p>CPP版本使用<a href="https://pybind11.readthedocs.io/en/stable/">pybind11</a>来实现语言绑定。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;pybind11/pybind11.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> py <span style="color:#f92672">=</span> pybind11;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>py<span style="color:#f92672">::</span>str hello(py<span style="color:#f92672">::</span>str name)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    py<span style="color:#f92672">::</span>str greeting <span style="color:#f92672">=</span> py<span style="color:#f92672">::</span>str(<span style="color:#e6db74">&#34;hello, {} !&#34;</span>).format(name);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> greeting;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">fibnacci</span>(<span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> n)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> n;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> fibnacci(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> fibnacci(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PYBIND11_MODULE(cc, m)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    m.doc() <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ccmodule&#34;</span>;
</span></span><span style="display:flex;"><span>    m.def(<span style="color:#e6db74">&#34;hello&#34;</span>, <span style="color:#f92672">&amp;</span>hello, <span style="color:#e6db74">&#34;Say hello&#34;</span>);
</span></span><span style="display:flex;"><span>    m.def(<span style="color:#e6db74">&#34;fibnacci&#34;</span>, <span style="color:#f92672">&amp;</span>fibnacci, <span style="color:#e6db74">&#34;Fibonacci&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="4-项目构建">4. 项目构建</h1>
<p>本次项目使用setuptools进行构建，编译扩展的脚本在<code>setupo.py</code>中，将各个语言的扩展作为子模块放到<code>speedup</code>项目下。</p>
<h1 id="41-目录结构">4.1 目录结构</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>speedup
</span></span><span style="display:flex;"><span>├── src
</span></span><span style="display:flex;"><span>│   ├── ccmodule          // cpp扩展
</span></span><span style="display:flex;"><span>│   │   └── ccmodule.cc
</span></span><span style="display:flex;"><span>│   ├── cpmodule          // c扩展
</span></span><span style="display:flex;"><span>│   │   └── cpmodule.c
</span></span><span style="display:flex;"><span>│   ├── cymodule          // cython扩展
</span></span><span style="display:flex;"><span>│   │   ├── cymodule.pxd
</span></span><span style="display:flex;"><span>│   │   └── cymodule.pyx
</span></span><span style="display:flex;"><span>│   ├── pymodule          // 纯python编译
</span></span><span style="display:flex;"><span>│   │   └── pymodule.py
</span></span><span style="display:flex;"><span>│   └── speedup
</span></span><span style="display:flex;"><span>│       ├── __init__.py
</span></span><span style="display:flex;"><span>│       └── pp.py         // 纯python
</span></span><span style="display:flex;"><span>├── tests
</span></span><span style="display:flex;"><span>│   ├── test_hello.py
</span></span><span style="display:flex;"><span>│   └── test_fibnacci.py
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>├── pyproject.toml        // 项目描述
</span></span><span style="display:flex;"><span>└── setup.py              //  构建脚本
</span></span></code></pre></div><h1 id="42-构建">4.2 构建</h1>
<h2 id="421-pyprojecttoml">4.2.1 pyproject.toml</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[<span style="color:#a6e22e">build-system</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">requires</span> = [<span style="color:#e6db74">&#34;setuptools&#34;</span>, <span style="color:#e6db74">&#34;Cython&#34;</span>, <span style="color:#e6db74">&#34;wheel&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build-backend</span> = <span style="color:#e6db74">&#34;setuptools.build_meta&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">project</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;speedup&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">version</span> = <span style="color:#e6db74">&#34;0.0.1&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">tool</span>.<span style="color:#a6e22e">setuptools</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">package-dir</span> = { <span style="color:#e6db74">&#34;&#34;</span> = <span style="color:#e6db74">&#34;src&#34;</span> }
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">include-package-data</span> = <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">tool</span>.<span style="color:#a6e22e">setuptools</span>.<span style="color:#a6e22e">packages</span>.<span style="color:#a6e22e">find</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">where</span> = [<span style="color:#e6db74">&#34;src&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">include</span> = [<span style="color:#e6db74">&#34;*&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exclude</span> = [<span style="color:#e6db74">&#34;tests*&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">tool</span>.<span style="color:#a6e22e">setuptools</span>.<span style="color:#a6e22e">package-data</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">speedup</span> = [<span style="color:#e6db74">&#34;*.pyi&#34;</span>, <span style="color:#e6db74">&#34;*.pxd&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;speedup.cp&#34;</span> = [<span style="color:#e6db74">&#34;*.pxd&#34;</span>, <span style="color:#e6db74">&#34;*.pyi&#34;</span>, <span style="color:#e6db74">&#34;*.pyx&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;speedup.cy&#34;</span> = [<span style="color:#e6db74">&#34;*.pxd&#34;</span>, <span style="color:#e6db74">&#34;*.pyi&#34;</span>, <span style="color:#e6db74">&#34;*.pyx&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">tool</span>.<span style="color:#a6e22e">pytest</span>.<span style="color:#a6e22e">ini_options</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">addopts</span> = [<span style="color:#e6db74">&#34;--import-mode=importlib&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pythonpath</span> = <span style="color:#e6db74">&#34;src&#34;</span>
</span></span></code></pre></div><h2 id="422-setuppy">4.2.2 setup.py</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> setuptools <span style="color:#f92672">import</span> Extension, setup
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pybind11.setup_helpers <span style="color:#f92672">import</span> Pybind11Extension, build_ext
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>setup(
</span></span><span style="display:flex;"><span>    ext_modules<span style="color:#f92672">=</span>[
</span></span><span style="display:flex;"><span>        Extension(<span style="color:#e6db74">&#34;speedup.cp&#34;</span>, [<span style="color:#e6db74">&#34;src/cpmodule/cpmodule.c&#34;</span>]),
</span></span><span style="display:flex;"><span>        Pybind11Extension(<span style="color:#e6db74">&#34;speedup.cc&#34;</span>, [<span style="color:#e6db74">&#34;src/ccmodule/ccmodule.cc&#34;</span>]),
</span></span><span style="display:flex;"><span>        Extension(<span style="color:#e6db74">&#34;speedup.cy&#34;</span>, [<span style="color:#e6db74">&#34;src/cymodule/cymodule.pyx&#34;</span>]),
</span></span><span style="display:flex;"><span>        Extension(<span style="color:#e6db74">&#34;speedup.py&#34;</span>, [<span style="color:#e6db74">&#34;src/pymodule/pymodule.py&#34;</span>]),
</span></span><span style="display:flex;"><span>    ],
</span></span><span style="display:flex;"><span>    build_ext<span style="color:#f92672">=</span>build_ext
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><h2 id="423-编译">4.2.3 编译</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&gt; pip install -U build wheel cython setuptools pybind11  <span style="color:#75715e">#  安装依赖</span>
</span></span><span style="display:flex;"><span>&gt; python -m build -n  <span style="color:#75715e"># 编译和构建whl包</span>
</span></span><span style="display:flex;"><span>&gt; pip install dist/speedup-0.0.1-cp311-cp311-win_amd64.whl  <span style="color:#75715e"># 安装</span>
</span></span></code></pre></div><h1 id="5-性能测试">5. 性能测试</h1>
<p>使用cProfile进行性能测试，测试单位为秒，测试命令如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&gt; python tests/test_hello.py
</span></span><span style="display:flex;"><span>&gt; python tests/test_fibnacci.py
</span></span></code></pre></div><h2 id="51-测试结果">5.1 测试结果</h2>
<table>
<thead>
<tr>
<th>situation</th>
<th>Python</th>
<th>Python Compiled</th>
<th>C</th>
<th>Cython</th>
<th>CPP</th>
</tr>
</thead>
<tbody>
<tr>
<td>hello</td>
<td>0.001</td>
<td>0.001</td>
<td>0.003</td>
<td>0.001</td>
<td>0.011</td>
</tr>
<tr>
<td>fibnacci</td>
<td>0.909</td>
<td>0.900</td>
<td>0.033</td>
<td>0.045</td>
<td>0.051</td>
</tr>
</tbody>
</table>
<h2 id="52-分析">5.2 分析</h2>
<p>从测试结果可以看出：</p>
<p>在场景1，Python/Cython的性能会优于C/CPP，在语言间通信较多且任务十分简单时，不适合编写C扩展；在情景2下，C API性能明显强于其它扩展，Cython性能稍弱，Pybind11是对CPP和C API的封装，性能也不错，但开销还是比C/Cython高，
原生Python最高。</p>
<ul>
<li>纯Python的性能优于C/Cython/CPP，主要是因为跨语言对对象进行序列化/反序列化的开销较大；</li>
<li>在性能需求较高时，C扩展的速度是最快的，但考虑到C的开发维护成本，Cython/CPP也是不错的选择；</li>
<li>对比C，CPP(pybind11)作为C的高级封装和扩展，性能稍弱一点；</li>
<li>对比C，Cython在不同情形下和C互有优劣；</li>
<li>对比Python，Cython会有性能提升；</li>
</ul>
<h1 id="6-源码分享">6. 源码分享</h1>
<p>上述测试所用源代码见项目<a href="https://github.com/PengchuanC/pengchuanc.github.io/tree/main/src/speedup">speedup</a>。</p>
]]></content>
		</item>
		
		<item>
			<title>【FOF】SMA系列系统介绍</title>
			<link>https://pengchuanc.github.io/posts/introduction_sma_system/</link>
			<pubDate>Mon, 29 Nov 2021 17:28:16 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/introduction_sma_system/</guid>
			<description>一、SMA 1.起源 SMA起源于美国20世纪70年代，起初是一种基于客户存量资产收费的账户。SMA真正开始具有资产配置、投资顾问色彩，始于90</description>
			<content type="html"><![CDATA[<h2 id="一sma">一、SMA</h2>
<h3 id="1起源">1.起源</h3>
<p><strong>SMA</strong>起源于美国20世纪70年代，起初是一种基于客户存量资产收费的账户。SMA真正开始具有资产配置、投资顾问色彩，始于90年代推行的销售薪酬激励改革，2008年金融危机中股票市场大幅下挫，资产配置账户开始得到重视。</p>
<h3 id="2日本">2.日本</h3>
<p>野村证券（日本）是日本首批开展SMA服务的投资银行，于2005年率先在财富管理业务中推行，并于2008年全面推广至全国各分支机构。</p>
<h3 id="3中国">3.中国</h3>
<p><strong>野村东方国际证券SMA服务</strong>是以大类资产配置为理念、以优质基金为载体、以坚持长期投资为原则、以定制化服务为特色的专户服务，通过科学的资产配置方法、严谨的基金筛选体系，并结合每位投资者提供的投资目标、风险偏好和个性化投资需求等各类因素，分散投资于权益、固收、货币、另类四大类资产，在严控风险的前提下为投资者实现不同的财富管理目标。</p>
<h2 id="二系统建设">二、系统建设</h2>
<p>为了协助野村东方国际证券SMA服务开展，野村东方国际证券资产管理部FOF团队设计三大系统，涵盖投资、客户服务和投后管理三个层面。</p>
<p><img src="/images/sma_system/1-1.png" alt="home1-1"></p>
<p><img src="/images/sma_system/1-2.png" alt="home1-2"></p>
<h3 id="1基金筛选系统">1.基金筛选系统</h3>
<p>基金筛选系统依托于FOF团队自己建立的基金分类方式，对基金进行定量分析，优选基金进入<strong>观察池</strong>，通过定期评估基金进入<strong>精选层</strong>。</p>
<p>并且，随着系统的不断完善，我们在筛选的功能上，扩展出了基金挑选、基金看板、基金详情查看、ETF跟踪等功能。</p>
<p>基金筛选系统的详细介绍可查看文章 <a href="https://pengchuanc.github.io/posts/introduction-fundscreen/">《基金筛选系统介绍》</a></p>
<h3 id="2客户服务系统">2.客户服务系统</h3>
<p>SMA服务区别于传统单一资管计划的一点在于，SMA会每日向客户提供产品运作信息，提供的方式便是<strong>SMA客户服务系统</strong>。通过客户服务系统，客户客户可以便捷的查看自己的产品信息，包含产品的最新净值、持仓、交易记录，以及产品公告等数据。</p>
<p>客户服务系统的详细介绍可查看文章 <a href="https://pengchuanc.github.io/posts/introduction-clientservices/">《SMA业务客户服务平台》</a></p>
<h3 id="3财富投管系统">3.财富投管系统</h3>
<p>SMA服务本质上为单一资产管理计划，当产品数量上去后，产品的管理便会出现人力不足的困难，财富投管系统的目标便是减轻投资经理的负担，为其提供方便的产品管理方式。</p>
<p>除SMA产品外，财富投管系统还录入了公募集合FOF和私募集合FOF产品信息，两者在能够功能上会有较大区别，财富投管系统主要解决的还是公募FOF产品的管理。</p>
<p>财富投管系统主要包含的模块有产品统一管理、产品业绩跟踪、收益分析、绩效归因、风险控制和产品运作记录查看。</p>
<p>财富投管系统的详细介绍可查看文章 <a href="https://pengchuanc.github.io/posts/introduction_sma_management/">《SMA投资管理系统》</a></p>
]]></content>
		</item>
		
		<item>
			<title>【FOF】客户问卷管理系统</title>
			<link>https://pengchuanc.github.io/posts/introduction_questionnaire/</link>
			<pubDate>Mon, 29 Nov 2021 16:08:21 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/introduction_questionnaire/</guid>
			<description>一、系统介绍 除了柜台的合格投资者认定测评问卷外，野村东方证券FOF团队还为SMA客户定制了另一套问卷，用于测定客户风险偏好和承受能力，以便为</description>
			<content type="html"><![CDATA[<h2 id="一系统介绍">一、系统介绍</h2>
<p>除了柜台的合格投资者认定测评问卷外，野村东方证券FOF团队还为SMA客户定制了另一套问卷，用于测定客户风险偏好和承受能力，以便为客户提供定制化的投资方案，根据问卷结果，会将客户分为S1-S5共5档风险等级，为客户提供资产配置方案，根据问卷中的投资期限和流动性偏好，为客户定制现金流。</p>
<h2 id="二系统展示">二、系统展示</h2>
<h3 id="1前端页面">1.前端页面</h3>
<p>前端页面为客户填写页面，客户登记后便可填写自己的SMA测评问卷。</p>
<p>主页面：</p>
<p><img src="/images/question/1-1.png" alt="front1-1"></p>
<p>认证页：</p>
<p><img src="/images/question/1-2.png" alt="front1-2"></p>
<p>文字较长的选项展示方式：</p>
<p><img src="/images/question/1-3.png" alt="front1-3"></p>
<p>常规文字长度选项展示方式：</p>
<p><img src="/images/question/1-4.png" alt="front1-4"></p>
<p>问卷完成后的提示：</p>
<p><img src="/images/question/1-5.png" alt="front1-5"></p>
<h3 id="3后端页面">3.后端页面</h3>
<p>后端主要供SMA管理员使用，可以对客户问卷进行存档，查看客户需求和确定客户风险偏好。</p>
<p>后端首页（风险揭示）：</p>
<p><img src="/images/question/2-1.png" alt="front2-1"></p>
<p>客户问卷汇总查看：</p>
<p><img src="/images/question/2-2.png" alt="front2-2"></p>
<p>查看客户问卷详情：</p>
<p><img src="/images/question/2-3.png" alt="front2-3"></p>
<h2 id="三技术栈">三、技术栈</h2>
<p>项目基于Python的Django框架，由于项目比较简单，故采用MVT模式，不再进行前后端分离开发，前端页面主要使用jQuery插件来进行交互操作。</p>
]]></content>
		</item>
		
		<item>
			<title>【FOF】SMA投资管理系统</title>
			<link>https://pengchuanc.github.io/posts/introduction_sma_management/</link>
			<pubDate>Fri, 26 Nov 2021 15:09:00 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/introduction_sma_management/</guid>
			<description>一、系统介绍 SMA投资管理系统基于恒生O3.2基金管理系统和FA估值记账系统，除了跟踪产品的估值和持仓信息外，还针对FOF做了一些风险收益的</description>
			<content type="html"><![CDATA[<h2 id="一系统介绍">一、系统介绍</h2>
<p>SMA投资管理系统基于恒生O3.2基金管理系统和FA估值记账系统，除了跟踪产品的估值和持仓信息外，还针对FOF做了一些风险收益的扩展，方便投资经理管理多个单一FOF。</p>
<p>系统按功能可以分为三个大的模块，包括<strong>产品投后信息跟踪</strong>、<strong>产品绩效归因</strong>和其他预功能。</p>
<h2 id="二功能展示">二、功能展示</h2>
<h3 id="1首页">1.首页</h3>
<p>首页汇总了当前运作中的产品资产情况，上半部分为公募FOF（集合FOF和SMA单一FOF），下半部分为私募FOF；首页子菜单中还包含了资金分析、账户分析和申赎分析等情况。</p>
<p>首页预览图如下：</p>
<p><img src="/images/management/1-1.png" alt="home1-1"></p>
<p><img src="/images/management/1-2.png" alt="home1-2"></p>
<p>资金分析：</p>
<p><img src="/images/management/1-3.png" alt="home1-3"></p>
<p>已投资底层基金的基金管理人发布的公告：</p>
<p><img src="/images/management/1-4.png" alt="home1-4"></p>
<p>公告具体内容：</p>
<p><img src="/images/management/1-5.png" alt="home1-5"></p>
<h3 id="2账户总览">2.账户总览</h3>
<p>点击任意产品的产品代码即可进入账户总览页面，账户总览主要以图表展示产品穿透后资产配置情况（权益、固收、另类等）、当日盘中估值、历史每日估值比对、历史净值、公募基金平均仓位测算。</p>
<p>账户总览图表如下：</p>
<p><img src="/images/management/2-1.png" alt="overview2-1"></p>
<p><img src="/images/management/2-2.png" alt="overview2-2"></p>
<h3 id="3投资分析">3.投资分析</h3>
<p>投资分析板块分为四个小的模块，分别为业绩指标、持仓分布、业绩归因和绩效分析。</p>
<h4 id="31-业绩指标">3.1 业绩指标</h4>
<p>业绩指标展示产品收益和风险指标数据，以及产品拆分到各类资产上的收益率。</p>
<p><img src="/images/management/3-1.png" alt="analysis3-1"></p>
<h4 id="32-持仓分布">3.2 持仓分布</h4>
<p>持仓分布展示产品持仓情况，包括穿透与非穿透的、行业、主题等，一个可以分为5个功能区，包括持基分析、持股分析、申赎渠道、资产分类和ETF表现。</p>
<h5 id="321-持基分析">3.2.1 持基分析</h5>
<p>产品持有基金展示，包括基金的分类信息、持仓信息、持有期业绩表现和基金业绩表现与开放信息。
<img src="/images/management/3-2.png" alt="analysis3-2"></p>
<h5 id="322-持股分析">3.2.2 持股分析</h5>
<p>根据持有基金的最新一期报告，穿透查看组合持股信息。
<img src="/images/management/3-3.png" alt="analysis3-3"></p>
<h5 id="323-申赎渠道">3.2.3 申赎渠道</h5>
<p>申赎渠道主要展示基金在不同渠道购买的金额以及当前的持仓份额，方便投资经理减仓。</p>
<h5 id="324-资产分类">3.2.4 资产分类</h5>
<p>根据基金类型查看组合在不同类型基金上的仓位暴露。
<img src="/images/management/3-4.png" alt="analysis3-4"></p>
<h5 id="325-etf表现">3.2.5 ETF表现</h5>
<p>统计ETF交易收益情况，如交易记录、胜率、损益等。
<img src="/images/management/3-5.png" alt="analysis3-5"></p>
<h4 id="33-业绩归因">3.3 业绩归因</h4>
<p>业绩归因板块展示组合归因数据，包括Brinson归因，RBSA风格系数、Barra风格暴露和滚动波动率。
页面预览如下：
<img src="/images/management/3-6.png" alt="analysis3-6">
<img src="/images/management/3-7.png" alt="analysis3-7"></p>
<h4 id="34-绩效分析">3.4 绩效分析</h4>
<p>对组合底层基金在不同分类下的聚合统计。
页面预览如下：
<img src="/images/management/3-8.png" alt="analysis3-8"></p>
<h3 id="4投资历史">4.投资历史</h3>
<p>展示组合交易记录，包含交易类型、金额、成交数量和成交价格。</p>
<p><img src="/images/management/4-1.png" alt="history4-1"></p>
<h3 id="5调仓贡献">5.调仓贡献</h3>
<p>选择历史上某个调仓日，会展示从改日起调仓后持仓的拟合业绩与调仓前的拟合业绩，考虑交易费用等因素，考察调仓是否创造了正向收益。</p>
<p><img src="/images/management/5-1.png" alt="mock5-1"></p>
<h3 id="6模拟投资">6.模拟投资</h3>
<p>对现有持仓基金调仓试算。</p>
<p><img src="/images/management/6-1.png" alt="emulate6-1"></p>
<h3 id="7资产配置">7.资产配置</h3>
<p>根据均值方差模型，试算的组合最近配置比例，仅作为标准组合业绩参考。</p>
<p><img src="/images/management/7-1.png" alt="allocate7-1"></p>
<p><img src="/images/management/7-2.png" alt="allocate7-2"></p>
<h3 id="8资金流向">8.资金流向</h3>
<p>监控每日主动买卖成交额，与均线比较，判断是否有超买超卖。</p>
<p><img src="/images/management/8-1.png" alt="cashflow8-1"></p>
<p><img src="/images/management/8-2.png" alt="cashflow8-2"></p>
<h3 id="9盘中估值">9.盘中估值</h3>
<p>基金盘中估值。</p>
<p><img src="/images/management/9-1.png" alt="valuation9-1"></p>
<h2 id="三技术栈">三、技术栈</h2>
<h3 id="1数据库">1.数据库</h3>
<p>数据库采用MySQL 8.x，数据源包括恒生聚源数据、通联数据和网络爬虫数据。</p>
<p>数据处理上，</p>
<ol>
<li>聚源和通联数据采用Python编写SQL Template，根据特定字段增量更新数据，日频；</li>
<li>爬虫数据采用异步方式，进程监控采用supervisor，主要采集新浪财经A股、港股和ETF盘中数据；</li>
<li>组合数据主要源于SMA客户服务系统，采用异步rpc方式与该程序通信获取；</li>
<li>所有任务按规则定时运行，定时任务管理框架采用django-q，分布式任务执行则是基于rpc实现。</li>
</ol>
<h3 id="2后端">2.后端</h3>
<p>后端采用Python的Django 3.x框架，初版采用同步方式，但由于图表瞬时请求过多导致后端响应很慢，因此进行过一次迭代升级，升级后通过以下方式来保证性能：</p>
<ol>
<li>同步api全部更改异步api；</li>
<li>盘中估值采用websocket方式推送；</li>
<li>多个程序间通信采用rpc；</li>
<li>多个进程做负载均衡。</li>
</ol>
<h3 id="3前端">3.前端</h3>
<p>前端语言采用TypeScript，框架使用Ant Design Pro，图表插件使用echarts。</p>
]]></content>
		</item>
		
		<item>
			<title>【FOF】SMA业务客户服务平台</title>
			<link>https://pengchuanc.github.io/posts/introduction-clientservices/</link>
			<pubDate>Thu, 25 Nov 2021 16:55:17 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/introduction-clientservices/</guid>
			<description>一、系统介绍 野村东方国际证券资管部FOF团队除了提供集合FOF产品外，还会为高净值客户提供SMA单一资管计划，关于什么是SMA，可以点击这里</description>
			<content type="html"><![CDATA[<h2 id="一系统介绍">一、系统介绍</h2>
<p>野村东方国际证券资管部FOF团队除了提供集合FOF产品外，还会为高净值客户提供SMA单一资管计划，关于什么是SMA，可以<a href="https://sma_client.nomuraoi-sec.com">点击这里</a>查看我们的介绍页面。</p>
<p>对于已经购买SMA单一FOF的客户，我们会每日披露产品的运作情况，由于每日披露信息，传统的短信通知客户净值的方式不仅会打扰到客户，并且无法承载太多的信息，于是开发了<strong>SMA客户服务平台</strong>，目前经过一次迭代升级，初版系统将内容展示为一页纸大小，涵盖产品的业绩分析和持仓、交易流水等信息，由于业务发展需要，我们升级了初代系统，提供更多的信息以及优化的展示方式。</p>
<p>当前v2版系统主要功能：</p>
<ol>
<li>登入登出</li>
<li>个人中心</li>
<li>首页</li>
<li>账户信息</li>
<li>业绩表现</li>
<li>投资记录</li>
<li>关于我们</li>
</ol>
<p>对于NOI SMA客户，可前往<a href="https://sma.nomuraoi-sec.com/">SMA客户服务平台</a>查看</p>
<h2 id="二功能模块介绍">二、功能模块介绍</h2>
<h3 id="1登入登出">1.登入登出</h3>
<p>SMA客户服务平台只是针对SMA单一FOF这一类产品，但购买了资管产品的客户可以直接在公司官网查看产品信息，为了方便客户登录，我们采用了与官网相同的登录验证逻辑，即”身份证号码“+”手机号码“+”验证码“的验证流程。</p>
<p>登录界面1，输入开户登记的有效证件号码：</p>
<p><img src="/images/client-services/1-1.png" alt="login1-1"></p>
<p>登录界面2，输入开户登记的手机号码以获取验证码，手机号不一致则不会下发验证码：</p>
<p><img src="/images/client-services/1-2.png" alt="login1-2"></p>
<p>输入正确的验证码后便可进入客户服务平台的个人中心。</p>
<h3 id="2个人中心">2.个人中心</h3>
<p>对于仅购买了一个单一资管计划的客户，将不会进入个人中心，而是直接定位到首页；对于购买多个单一资管计划的客户，在个人中心选择一个产品，即可进入该产品的首页。</p>
<p>预览图如下（重要信息不展示）：</p>
<p><img src="/images/client-services/2-1.png" alt="login2-1"></p>
<h3 id="3首页">3.首页</h3>
<p>首页是产品基础信息的汇总，包括当前的资产净值情况，各类资产占比、市场资讯、产品公告、FOF团队专栏文章和留言功能。</p>
<p>预览图如下：</p>
<p><img src="/images/client-services/3-1.png" alt="home3-1"></p>
<p>资讯展开：</p>
<p><img src="/images/client-services/3-2.png" alt="home3-2"></p>
<p>专栏展开：</p>
<p><img src="/images/client-services/3-3.png" alt="home3-3"></p>
<h3 id="4账户信息">4.账户信息</h3>
<p>展示资产配置情况和持有基金的持仓情况。</p>
<p>图表预览如下：</p>
<p><img src="/images/client-services/4-1.png" alt="account4-1"></p>
<p><img src="/images/client-services/4-2.png" alt="account4-2"></p>
<p>点击持仓基金可显示交易情况：</p>
<p><img src="/images/client-services/4-3.png" alt="account4-3"></p>
<h3 id="5业绩表现">5.业绩表现</h3>
<p>1.不同区间段产品业绩表现：</p>
<p><img src="/images/client-services/5-1.png" alt="profit5-1"></p>
<p>点击费用可以查看区间产品层面产生的费用：</p>
<p><img src="/images/client-services/5-2.png" alt="profit5-2"></p>
<p>2.分阶段累计收益情况</p>
<p><img src="/images/client-services/5-3.png" alt="profit5-3"></p>
<p>3.净值曲线</p>
<p><img src="/images/client-services/5-4.png" alt="profit5-4"></p>
<h3 id="6交易记录">6.交易记录</h3>
<p>交易记录预览如下：</p>
<p><img src="/images/client-services/6-1.png" alt="transaction6-1"></p>
<h2 id="三技术栈">三、技术栈</h2>
<h3 id="1数据库">1.数据库</h3>
<p>数据库采用MySQL，数据处理难点在于对接恒生的O3.2系统和FA估值系统。</p>
<h3 id="2后端">2.后端</h3>
<p>后端采用Python Django框架集成DRF插件做认证和权限管理，权限管理根据官网认证方式做了相应扩展，保证从官网已登录的客户到SMA服务平台可以直接查看产品信息。</p>
<p>后端项目可前往<a href="https://github.com/PengchuanC/am_sma">PengchuanC/am_sma: am sma project (github.com)</a>查看。</p>
<h3 id="3前端">3.前端</h3>
<p>前端采用Vue 2.x框架。</p>
<p>前端项目可前往<a href="https://github.com/PengchuanC/sma_front_second">PengchuanC/sma_front_second: sma client server second version (github.com)</a>查看。</p>
]]></content>
		</item>
		
		<item>
			<title>【FOF】基金筛选系统介绍</title>
			<link>https://pengchuanc.github.io/posts/introduction-fundscreen/</link>
			<pubDate>Thu, 18 Nov 2021 15:36:45 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/introduction-fundscreen/</guid>
			<description>一、系统介绍 为了方便基金投资，开发了基金投资相关系统，基金筛选系统为最初开发系统，目前已经过三次迭代。当前基金筛选系统主要包含8个模块，分别</description>
			<content type="html"><![CDATA[<h1 id="一系统介绍">一、系统介绍</h1>
<p>为了方便基金投资，开发了基金投资相关系统，基金筛选系统为最初开发系统，目前已经过三次迭代。当前基金筛选系统主要包含8个模块，分别为</p>
<ol>
<li>基金市场整体统计</li>
<li>基金挑选</li>
<li>基金看板</li>
<li>ETF每日跟踪</li>
<li>基金分类筛选入池</li>
<li>入池基金管理</li>
<li>市场热点资讯</li>
<li>基金详细信息</li>
</ol>
<h1 id="二功能展示">二、功能展示</h1>
<h2 id="1基金市场统计">1.基金市场统计</h2>
<p>该模块为整个系统首页，统计截止上个月底的基金市场规模和数量，基金分类为野村东方国际FOF组根据基金发行公告中的投资范围自定义的分类方式。</p>
<p><img src="/images/fundscreen/1-1.png" alt="home1-1"></p>
<p><img src="/images/fundscreen/1-2.png" alt="home1-2"></p>
<p><img src="/images/fundscreen/1-3.png" alt="home1-3"></p>
<h2 id="2基金挑选">2.基金挑选</h2>
<p>基金挑选模块可以从全市场的公募基金中按一些预设的条件，挑选出符合条件的基金，针对常用的主动权益基金、被动指数基金和债券型基金会有一些更符合基金特点的筛选条件。</p>
<h3 id="21-筛选界面预览">2.1 筛选界面预览</h3>
<p>界面上方为基金筛选条件，下方为展示表格。</p>
<p><img src="/images/fundscreen/2-1.png" alt="cart2-1"></p>
<p>执行筛选条件后：</p>
<p><img src="/images/fundscreen/2-2.png" alt="cart2-2"></p>
<p>数据预览表格可全屏，方便查看数据。</p>
<p><img src="/images/fundscreen/2-3.png" alt="cart2-3"></p>
<h2 id="3基金看板">3.基金看板</h2>
<p>根据基金年报和半年报持仓股票，对基金持有股票总市值占比大于60%的基金（多为股票型和偏股混合型基金），可以按市值风格将基金分为成长型、均衡性和价值型，根据股票行业占比，可以确定基金的行业风格。</p>
<p>基金看板模块即是对这些基金的跟踪，基金看板首页将这些基金类型按小卡片形式展示，单个卡片最多不超过5条记录，点击全屏按钮可以查看全部该类型基金。</p>
<p><img src="/images/fundscreen/3-1.png" alt="outlook3-1"></p>
<p>展开后如下：</p>
<p><img src="/images/fundscreen/3-2.png" alt="outlook3-2"></p>
<h2 id="4etf每日跟踪">4.ETF每日跟踪</h2>
<h3 id="41-资金概览">4.1 资金概览</h3>
<p>本页可以按日频、周频、月频查看各类ETF净资金流向，通过图表两种方式展现。</p>
<p><img src="/images/fundscreen/4-1.png" alt="etf4-1"></p>
<h3 id="42-分类统计">4.2 分类统计</h3>
<p>本页可以查看具体某一类ETF的资金流向情况和场内、场外业绩表现情况。</p>
<p><img src="/images/fundscreen/4-2.png" alt="etf4-2"></p>
<h3 id="43-近期情况">4.3 近期情况</h3>
<p>本页展示分周度、分类型ETF资金流入热力图。</p>
<p><img src="/images/fundscreen/4-3.png" alt="etf4-3"></p>
<h2 id="5基金分类筛选入池">5.基金分类筛选入池</h2>
<p>此模块本身用于NOI FOF团队每月筛选合适的基金进入<strong>观察池</strong>和<strong>核心池</strong>，便于持续跟踪，对于合适的基金可以放入<strong>精选层</strong>。</p>
<h3 id="51-基础筛选">5.1 基础筛选</h3>
<p>基金经过基础筛选，可放入观察池。</p>
<p><img src="/images/fundscreen/5-1.png" alt="screen5-1"></p>
<h3 id="52-进阶筛选">5.2 进阶筛选</h3>
<p>进阶筛选结果，可放入核心池。</p>
<p><img src="/images/fundscreen/5-2.png" alt="screen5-2"></p>
<p>入池保存页面：</p>
<p><img src="/images/fundscreen/5-3.png" alt="screen5-3"></p>
<h2 id="6组合管理">6.组合管理</h2>
<p>组合管理模块主要用于跟踪入池的基金，主要功能如下（涉及具体基金数据，仅展示部分数据）：</p>
<p>观察池：</p>
<p><img src="/images/fundscreen/6-1.png" alt="pool6-1"></p>
<p>核心池：</p>
<p><img src="/images/fundscreen/6-2.png" alt="pool6-2"></p>
<p>精选层：</p>
<p><img src="/images/fundscreen/6-3.png" alt="pool6-3"></p>
<h2 id="7市场热点资讯">7.市场热点资讯</h2>
<p>此模块最初用于收集市场热门新闻整理发布给公司各部门，此后改造进入客户服务系统，目前此模块处于半废弃状态。</p>
<p><img src="/images/fundscreen/7-1.png" alt="news7-1"></p>
<h2 id="8基金详细信息">8.基金详细信息</h2>
<p>在系统其他模块，点击基金代码，即可进入单只基金详细信息页面。</p>
<h3 id="81-基金概览">8.1 基金概览</h3>
<p>概览页面包括如下信息：</p>
<ul>
<li>基金摘要</li>
<li>近期业绩表现</li>
<li>基金与基准净值曲线</li>
<li>规模变化</li>
<li>风格指标</li>
<li>基金风格</li>
<li>换手情况</li>
<li>规模变化</li>
</ul>
<p>预览图如下：</p>
<p><img src="/images/fundscreen/8-1.png" alt="detail8-1"></p>
<h3 id="82-业绩表现">8.2 业绩表现</h3>
<p>业绩表现对基金区间业绩从多个维度做一个详细的诊断，预览图如下：</p>
<p><img src="/images/fundscreen/8-2.png" alt="detail8-2"></p>
<h3 id="83-基金经理">8.3 基金经理</h3>
<p>本页主要展示该基金的基金经理同时在管基金的简单信息汇总，预览图如下：</p>
<p><img src="/images/fundscreen/8-3.png" alt="detail8-3"></p>
<h3 id="84-资产配置">8.4 资产配置</h3>
<p>基金资产配置情况，预览图如下：</p>
<p><img src="/images/fundscreen/8-4.png" alt="detail8-4"></p>
<h3 id="85-业绩归因">8.5 业绩归因</h3>
<p>基金Brinson归因情况，可选区间，预览图如下：</p>
<p><img src="/images/fundscreen/8-5.png" alt="detail8-5"></p>
<h3 id="86-重仓持股">8.6 重仓持股</h3>
<p>本页主要展示至当前基金经理任职以来，多个报告期的持股情况统计，分析其持股偏好。预览图如下：
<img src="/images/fundscreen/8-6.png" alt="detail8-6"></p>
<h2 id="三程序设计">三、程序设计</h2>
<p>项目采用前后端分离设计，前端负责渲染和处理交互，后端以restful api方式提高数据。</p>
<p>整个项目前前后后经过3次迭代，前端完整重构了一次。本系统需要大量的基金数据和常用的股票数据，项目开发早期由于没有数据支持，只能从Wind终端的api接口提取数据，数据库接口也只能按照适合处理wind api的方式来构建，为整个程序的开发带来了巨大的工程量。</p>
<p>第一次版本更新正是考虑到数据维护的复杂性，开始将数据库迁移至恒生聚源数据，主要重构的部分在后端。</p>
<p>第二次版本更新主要是前端的改造，初版基金筛选系统主要功能集中在<strong>基金筛选</strong>这个功能上，所有功能都围绕基金筛选展开，此后产品提出了相当多的基于单个基金展示和基金挑选的需求，前后端进行大改造。</p>
<p>第三次版本更新主要是对后端单只基金信息展示的改造，后端由于Python的性能瓶颈限制，将部分功能的实现通过Golang来扩展了，以保证延迟和并发需求。</p>
<p>目前系统仍有一些小修小改，但整体呈现的效果如前所述。</p>
<h2 id="四技术栈">四、技术栈</h2>
<p>总体来说，项目基于MySQL+Python+Golang+Typescript，使用到的框架包括Django、Gin和Vue。</p>
<h3 id="1数据库">1.数据库</h3>
<p>数据库使用关系型数据库MySQL，采用读写分离模式，部署到了两台服务器上。</p>
<h3 id="2后端程序">2.后端程序</h3>
<p>后端经过改造和性能提升，目前用到的工具包括：</p>
<ul>
<li>Python: Django grpc</li>
<li>Golang: Gin Gorm grpc</li>
</ul>
<p>后端部分功能使用到了<!-- raw HTML omitted -->grpc<!-- raw HTML omitted -->，这功能块通常是与其他系统关联的，如基金分类、Brinson归因、基金风格等功能，会在多个系统中使用到，采用grpc可以降低其他系统的工作量。</p>
<p>Python后端项目可<a href="https://github.com/PengchuanC/fund_back_django">点击这里</a>查看；</p>
<p>Golang后端项目可<a href="https://github.com/PengchuanC/fund_screen">点击这里</a>查看。</p>
<h3 id="3前端程序">3.前端程序</h3>
<p>前端程序基于<!-- raw HTML omitted -->Vue3.x<!-- raw HTML omitted -->开发，UI框架基于<!-- raw HTML omitted -->Element Plus<!-- raw HTML omitted -->，开发语言为<!-- raw HTML omitted -->Typescript<!-- raw HTML omitted -->，图表插件主要使用到了<code>vxe-table</code>和<code>echarts</code>。</p>
<p>前端项目地址已开源，可<a href="https://github.com/PengchuanC/fund_vue3">点击查看</a>。</p>
<h3 id="4前置机配置">4.前置机配置</h3>
<p>前置机采用常用的<code>Nginx</code>做反向代理，主要使用到了<code>httpv2</code>、<code>stream</code>和<code>grpc</code>代理等功能。</p>
<p>后端Python网关选用<code>asgi</code>框架<code>uvicorn</code>，充分利用异步能力。</p>
<p>项目托管软件采用<code>supervisor</code>，监控后端程序并赋予多进程能力。</p>
]]></content>
		</item>
		
		<item>
			<title>Centos7 编译安装Nginx-1.21.3版本和Python-3.10</title>
			<link>https://pengchuanc.github.io/posts/compile_install_nginx_and_python/</link>
			<pubDate>Fri, 22 Oct 2021 10:42:05 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/compile_install_nginx_and_python/</guid>
			<description>一、起因 由于生产网段与测试网段隔离，但测试网段也需要数据来进行开发，于是考虑用GRPC来中转数据，并用Nginx来代理端口，需要用到Ngin</description>
			<content type="html"><![CDATA[<h1 id="一起因">一、起因</h1>
<p>由于生产网段与测试网段隔离，但测试网段也需要数据来进行开发，于是考虑用GRPC来中转数据，并用Nginx来代理端口，需要用到Nginx的ssl相关插件，刚好Python-3.10发布，也需要升级openssl-1.1.1及以上，所以不妨将Nginx和Python都升级了。</p>
<h1 id="二安装">二、安装</h1>
<h2 id="1安装openssl-111l">1.安装openssl-1.1.1l</h2>
<h3 id="11-安装依赖">1.1 安装依赖</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel</span>
</span></span></code></pre></div><h3 id="12-下载并安装">1.2 下载并安装</h3>
<p>下载并解压</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># cd ~/Downloads</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz --no-check-certificate</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># tar -xf openssl-1.1.1l.tar.gz &amp;&amp; cd openssl-1.1.1l</span>
</span></span></code></pre></div><p>开始编译安装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># ./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl shared zlib</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make test</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make install</span>
</span></span></code></pre></div><h3 id="13-软链">1.3 软链</h3>
<p>备份</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># mv /usr/bin/openssl /usr/bin/openssl.old</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># mv /usr/lib64/openssl /usr/lib64/openssl.old</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># mv /usr/lib64/libssl.so /usr/lib64/libssl.so.old</span>
</span></span></code></pre></div><p>重新软链</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ln -s /usr/local/openssl/include/openssl /usr/include/openssl</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ln -s /usr/local/openssl/lib/libssl.so /usr/lib64/libssl.so</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># echo &#34;/usr/local/openssl/lib&#34; &gt;&gt; /etc/ld.so.conf</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ldconfig -v </span>
</span></span></code></pre></div><h2 id="2安装python-310">2.安装Python 3.10</h2>
<h3 id="21-下载并解压">2.1 下载并解压</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># cd ~/Downloads</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgz</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># tar -xf Python-3.10.0.tgz &amp;&amp; cd Python-3.10.0</span>
</span></span></code></pre></div><h3 id="22-编译安装">2.2 编译安装</h3>
<p>这里遇到了个大坑，由于Python 3.10刚出，安装资料也比较少，用了很久才把ssl模块编译进去，后来根据编译提示才知道，主要是在编译时没加<code>--with-openssl-rpath=auto</code>命令，导致ssl模块编译不进去。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># ./configure --prefix=/usr/local/python3 --with-ssl-default-suites=openssl  --with-openssl=/usr/local/openssl --with-openssl-rpath=auto</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make install</span>
</span></span></code></pre></div><p>重新链接</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># mv mv /usr/bin/python3 /usr/bin/python3.old</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ln -s /usr/local/python3/bin/python3 /usr/bin/python3 </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 </span>
</span></span></code></pre></div><h2 id="3安装nginx-1213">3.安装Nginx 1.21.3</h2>
<h3 id="31-下载并解压">3.1 下载并解压</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># wget http://nginx.org/download/nginx-1.21.3.tar.gz --no-check-certificate</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># tar -xf nginx-1.21.3.tar.gz &amp;&amp; cd nginx-1.21.3</span>
</span></span></code></pre></div><h3 id="32-编译安装">3.2 编译安装</h3>
<p>这里在编译时又遇到问题，指定的ssl位置老是报出缺失文件错误，需要把之前安装的openssl拷贝到指定位置才行。</p>
<p>拷贝openssl</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># cp -r /usr/local/openssl /usr/local/.openssl</span>
</span></span></code></pre></div><p>编译安装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#39; --with-ld-opt=&#39;-Wl,-z,relro -Wl,-z,now -pie&#39; --with-openssl=/usr/local</span>
</span></span></code></pre></div><p>上述指令中部分内容可自行更改，比如log位置，启动用户，pid位置，二进制文件位置等，但要代理grpc，<code>--with-http_v2_module</code>和<code>--with-http_ssl_module</code>指令是必须的。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># make</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make install</span>
</span></span></code></pre></div><p>查看安装结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># nginx -V</span>
</span></span></code></pre></div><p>结果应当如下</p>
<pre tabindex="0"><code>nginx version: nginx/1.21.3
built by gcc 9.3.0 (GCC) 
built with OpenSSL 1.1.1l  24 Aug 2021
TLS SNI support enabled
configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#39; --with-ld-opt=&#39;-Wl,-z,relro -Wl,-z,now -pie&#39; --with-openssl=/usr/local
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Mariadb意外崩溃数据恢复</title>
			<link>https://pengchuanc.github.io/posts/mariadb-recovery/</link>
			<pubDate>Fri, 03 Sep 2021 11:05:55 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/mariadb-recovery/</guid>
			<description>1.事故还原 优于同时在多个终端执行select、insert和delete操作，数据库意外崩溃 2.数据恢复 2.1 尝试重新启动 执行service mysqld</description>
			<content type="html"><![CDATA[<h1 id="1事故还原">1.事故还原</h1>
<p>优于同时在多个终端执行select、insert和delete操作，数据库意外崩溃</p>
<h1 id="2数据恢复">2.数据恢复</h1>
<h2 id="21-尝试重新启动">2.1 尝试重新启动</h2>
<p>执行<code>service mysqld restart</code>发现数据库报错，无法启动</p>
<h2 id="22-进入恢复模式">2.2 进入恢复模式</h2>
<p>当发现数据无法启动后，尝试进入恢复模式，<code>vi /etc/my.cnf</code></p>
<p>在配置文件中[mysqld]部分增加以下内容</p>
<pre tabindex="0"><code class="language-cnf" data-lang="cnf">[mysqld]
innodb_force_recovery=1
innodb_purge_thread=0
</code></pre><p>然后执行<code>service mysqld restart</code>重启数据库，如果继续失败则将<code>innodb_force_recovery</code>的值修改为2，其中<code>innodb_force_recovery</code>分为0-6这七个等级，可用逐个尝试，直至数据重新启动</p>
<h2 id="23-备份数据">2.3 备份数据</h2>
<p>使用 <code>mysqldump</code>备份数据库</p>
<p>以我的情况为例</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; mysqldump -uroot -p --databases am_sma_third &gt; /home/sma/backup/am_sma_third_20210903.sql
</span></span></code></pre></div><h2 id="24-初始化数据库">2.4 初始化数据库</h2>
<p>初始化之前，为防止意外，将旧的数据库文件备份一下，文件位置可以从配置文件<code>my.cnf</code>查看</p>
<pre tabindex="0"><code class="language-cnf" data-lang="cnf">[mysqld]
datadir=/home/mysql/datadir
socket=/home/mysql/datadir/mysql.sock
</code></pre><p>其中datadir便是文件位置，进行备份</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; cd /home/mysql
</span></span><span style="display:flex;"><span>&gt; mkdir datadirbak <span style="color:#f92672">&amp;&amp;</span> mkdir datadirbak/20210903
</span></span><span style="display:flex;"><span>&gt; mv datadir/* datadirbak/20210903/
</span></span></code></pre></div><p>备份完成后，初始化数据库</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; mysql_install_db --user<span style="color:#f92672">=</span>mysql --basedir<span style="color:#f92672">=</span>/usr --datadir<span style="color:#f92672">=</span>/home/mysql/datadir/
</span></span></code></pre></div><p>对文件夹重新授权，防止意外</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; chown -R mysql:mysql /home/mysql 
</span></span></code></pre></div><p>注释掉恢复模式</p>
<pre tabindex="0"><code class="language-cnf" data-lang="cnf">[mysqld]
# innodb_force_recovery=1
# innodb_purge_thread=0
</code></pre><p>重启数据库</p>
<pre tabindex="0"><code>&gt; service mysqld restart
</code></pre><h2 id="25-恢复数据">2.5 恢复数据</h2>
<p>登陆到数据库</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; mysql -uroot -p
</span></span></code></pre></div><p>利用<code>source</code>命令恢复数据，以我的<strong>sm_sma_third</strong>库为例</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-mysql" data-lang="mysql"><span style="display:flex;"><span>mysql<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">create</span> <span style="color:#66d9ef">database</span> sm_sma_third;
</span></span><span style="display:flex;"><span>mysql<span style="color:#f92672">&gt;</span> source <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>sma<span style="color:#f92672">/</span>backup<span style="color:#f92672">/</span>sm_sma_third_20210903.<span style="color:#66d9ef">sql</span>
</span></span></code></pre></div><p>等待恢复完成，重新对用户进行授权即可。</p>
]]></content>
		</item>
		
		<item>
			<title>Go 1.16 新特性embed在gin中使用</title>
			<link>https://pengchuanc.github.io/posts/go-embed/</link>
			<pubDate>Fri, 02 Jul 2021 15:14:15 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/go-embed/</guid>
			<description>在golang1.16加入之前，编译出来的二进制文件默认是不包括非代码文件的，那么开发一个web网站，则需要将html模板文件、配置文件和静</description>
			<content type="html"><![CDATA[<blockquote>
<p>在golang1.16加入之前，编译出来的二进制文件默认是不包括非代码文件的，那么开发一个web网站，则需要将html模板文件、配置文件和静态资源文件(css、js)始终按照开发时的目录结构放在一起，部署起来很麻烦。</p>
</blockquote>
<p>embed是在Go 1.16中新加包。它通过<code>//go:embed</code>指令，可以在编译阶段将静态资源文件打包进编译好的程序中，并提供访问这些文件的能力。</p>
<h3 id="1使用gin框架构建一个简单的静态资源服务器">1.使用gin框架构建一个简单的静态资源服务器</h3>
<p>使用gin构建一个web服务非常简单，使用embed加入静态资源也非常简单，代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;embed&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/gin-gonic/gin&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//go:embed statics/* templates/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Assets</span> <span style="color:#a6e22e">embed</span>.<span style="color:#a6e22e">FS</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gin</span>.<span style="color:#a6e22e">Default</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">StaticFS</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">FS</span>(<span style="color:#a6e22e">Assets</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">Run</span>(<span style="color:#e6db74">&#34;0.0.0.0:5000&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>文件目录结构如下：</p>
<p><img src="/images/gin-embed/tree1.png" alt="目录1"></p>
<p>启动之后我们访问<code>http://127.0.0.1:5000</code>即可看到如下界面：</p>
<p><img src="/images/gin-embed/web1.png" alt="初始界面"></p>
<h3 id="2在模板语言中使用静态资源">2.在模板语言中使用静态资源</h3>
<p>加入embed之后，gin使用模板引擎主要通过自带的方法<em>SetHTMLTemplate</em>来加载从embed中解析的模板文件，
接下来对项目结构进行以下修改以避免路由冲突，然后来渲染一个简单的页面。</p>
<p>此时项目目录结构如下：</p>
<p><img src="/images/gin-embed/tree2.png" alt="目录2"></p>
<p>新增的<code>statics.go</code>主要是为了加载静态资源时保证路由的名称合理，其内容如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">statics</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;embed&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//go:embed css/* js/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Statics</span> <span style="color:#a6e22e">embed</span>.<span style="color:#a6e22e">FS</span>
</span></span></code></pre></div><p><code>main.go</code>文件内容修改后为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;embed&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;gin_embed/statics&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/gin-gonic/gin&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;html/template&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//go:embed templates/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Templates</span> <span style="color:#a6e22e">embed</span>.<span style="color:#a6e22e">FS</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gin</span>.<span style="color:#a6e22e">Default</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">StaticFS</span>(<span style="color:#e6db74">&#34;/statics&#34;</span>, <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">FS</span>(<span style="color:#a6e22e">statics</span>.<span style="color:#a6e22e">Statics</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tmpl</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">ParseFS</span>(<span style="color:#a6e22e">Templates</span>, <span style="color:#e6db74">&#34;templates/*&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;/layout&#34;</span>, <span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">SetHTMLTemplate</span>(<span style="color:#a6e22e">tmpl</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">Run</span>(<span style="color:#e6db74">&#34;0.0.0.0:5000&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">index</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gin</span>.<span style="color:#a6e22e">Context</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">HTML</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span>, <span style="color:#e6db74">&#34;layouts.tmpl&#34;</span>, <span style="color:#a6e22e">gin</span>.<span style="color:#a6e22e">H</span>{<span style="color:#e6db74">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;布局页面&#34;</span>})
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>layouts.tmpl</code>文件内容为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;zh-CN&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">title</span>&gt;{{.title}}&lt;/<span style="color:#f92672">title</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/statics/css/semantic.css&#34;</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/css&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/statics/js/jquery-3.6.0.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/statics/js/semantic.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ui secondary pointing menu&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;first&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;item first-menu-item active&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        第一页
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;item&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;second&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        第二页
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ui container&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;我是基础页面&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">button</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ui button primary&#34;</span>&gt;按钮&lt;/<span style="color:#f92672">button</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>此时进入<code>http://127.0.0.1:/5000/layouts</code>我们将能看到：</p>
<p><img src="/images/gin-embed/web2.png" alt="简单界面"></p>
<p>到此，加载静态资源和简单的模板渲染就可以实现了。</p>
<h3 id="3多模板渲染">3.多模板渲染</h3>
<p>gin本身是不支持多模板渲染的，要进行多模板渲染，可以查看<a href="https://github.com/gin-contrib/multitemplate">示例代码</a></p>
<p>但在引入embed过后，我们需要对官方示例做一些调整来保证正常运行。</p>
<p>首先在<em>templates/<em>文件目录下新建两个文件</em>first.tmpl</em>、<em>second.tmpl</em>,
内容分别如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{/*first.tmpl*/}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{{template &#34;layouts&#34; .}}
</span></span><span style="display:flex;"><span>{{define &#34;content&#34;}}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">p</span>&gt;我是第一页&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>{{end}}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{/*second.tmpl*/}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{{template &#34;layouts&#34; .}}
</span></span><span style="display:flex;"><span>{{define &#34;content&#34;}}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;我是第二页&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>{{end}}
</span></span></code></pre></div><p>修改<strong>layouts.tmpl</strong>,加入block块来实现继承</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;zh-CN&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">title</span>&gt;{{.title}}&lt;/<span style="color:#f92672">title</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/statics/css/semantic.css&#34;</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/css&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/statics/js/jquery-3.6.0.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/statics/js/semantic.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ui secondary pointing menu&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;first&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;item first-menu-item active&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        第一页
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;item&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;second&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        第二页
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ui container&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;我是基础页面&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">button</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ui button primary&#34;</span>&gt;按钮&lt;/<span style="color:#f92672">button</span>&gt;
</span></span><span style="display:flex;"><span>    {{block &#34;content&#34; .}}{{end}}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p><strong>main.go</strong>修改如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;embed&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;gin_embed/statics&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/gin-contrib/multitemplate&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/gin-gonic/gin&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;html/template&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//go:embed templates/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Templates</span> <span style="color:#a6e22e">embed</span>.<span style="color:#a6e22e">FS</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gin</span>.<span style="color:#a6e22e">Default</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">StaticFS</span>(<span style="color:#e6db74">&#34;/statics&#34;</span>, <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">FS</span>(<span style="color:#a6e22e">statics</span>.<span style="color:#a6e22e">Statics</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;/first&#34;</span>, <span style="color:#a6e22e">first</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;/second&#34;</span>, <span style="color:#a6e22e">second</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">HTMLRender</span> = <span style="color:#a6e22e">CreateMyRender</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">router</span>.<span style="color:#a6e22e">Run</span>(<span style="color:#e6db74">&#34;0.0.0.0:5000&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Render</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">render</span> <span style="color:#a6e22e">multitemplate</span>.<span style="color:#a6e22e">Render</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">assets</span> <span style="color:#a6e22e">embed</span>.<span style="color:#a6e22e">FS</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Render</span>) <span style="color:#a6e22e">AddFromEmbed</span> (<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">patterns</span> <span style="color:#f92672">...</span><span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tmpl</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">ParseFS</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">assets</span>, <span style="color:#a6e22e">patterns</span><span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">render</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">tmpl</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">CreateMyRender</span>() <span style="color:#a6e22e">multitemplate</span>.<span style="color:#a6e22e">Renderer</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">render</span> <span style="color:#a6e22e">Render</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">render</span> = <span style="color:#a6e22e">Render</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">render</span>: <span style="color:#a6e22e">multitemplate</span>.<span style="color:#a6e22e">New</span>(),
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">assets</span>: <span style="color:#a6e22e">Templates</span>,
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">render</span>.<span style="color:#a6e22e">AddFromEmbed</span>(<span style="color:#e6db74">&#34;layouts&#34;</span>, <span style="color:#e6db74">&#34;templates/layouts.tmpl&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">render</span>.<span style="color:#a6e22e">AddFromEmbed</span>(<span style="color:#e6db74">&#34;first&#34;</span>, <span style="color:#e6db74">&#34;templates/layouts.tmpl&#34;</span>, <span style="color:#e6db74">&#34;templates/first.tmpl&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">render</span>.<span style="color:#a6e22e">AddFromEmbed</span>(<span style="color:#e6db74">&#34;second&#34;</span>, <span style="color:#e6db74">&#34;templates/layouts.tmpl&#34;</span>, <span style="color:#e6db74">&#34;templates/second.tmpl&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">render</span>.<span style="color:#a6e22e">render</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">first</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gin</span>.<span style="color:#a6e22e">Context</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">HTML</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span>, <span style="color:#e6db74">&#34;first&#34;</span>, <span style="color:#a6e22e">gin</span>.<span style="color:#a6e22e">H</span>{<span style="color:#e6db74">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;第一页&#34;</span>})
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">second</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gin</span>.<span style="color:#a6e22e">Context</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">HTML</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span>, <span style="color:#e6db74">&#34;second&#34;</span>, <span style="color:#a6e22e">gin</span>.<span style="color:#a6e22e">H</span>{<span style="color:#e6db74">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;第二页&#34;</span>})
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>再次启动后进入<code>http://127.0.0.1/first</code>后界面如下：</p>
<p><img src="/images/gin-embed/web3.png" alt="界面3"></p>
<p>最终项目结构如下：</p>
<p><img src="/images/gin-embed/tree3.png" alt="目录3"></p>
<p>完整代码可前往我的<a href="https://github.com/PengchuanC/pengchuanc.github.io/tree/main/src">GitHub</a>项目查看.</p>
]]></content>
		</item>
		
		<item>
			<title>【FOF】野村基金筛选系统第二版</title>
			<link>https://pengchuanc.github.io/posts/fund-screen-system/</link>
			<pubDate>Thu, 01 Jul 2021 17:06:30 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/fund-screen-system/</guid>
			<description>在第一版的基础上优化了布局，重新设计了基金详情页的界面，并且新增了基金筛选功能和基金看板功能、ETF资金流向统计等功能 开发框架升级到vue3</description>
			<content type="html"><![CDATA[<h1 id="heading"></h1>
<blockquote>
<p>在第一版的基础上优化了布局，重新设计了基金详情页的界面，并且新增了基金筛选功能和基金看板功能、ETF资金流向统计等功能</p>
</blockquote>
<h1 id="开发框架升级到vue3">开发框架升级到vue3</h1>
<ol>
<li>
<p>开发框架从vue2+view design更改为vue3+element plus，提供更好的性能和交互体验。</p>
</li>
<li>
<p>使用<a href="https://www.tslang.cn/">typescript</a>开发。</p>
</li>
<li>
<p>使用vite，保证快速冷启动和即时热更新，以及真正的按需编译。</p>
</li>
</ol>
<h1 id="性能优化">性能优化</h1>
<p>性能优化除前端改进外，后端框架也进行重构：</p>
<ol>
<li>基金筛选和基金池构建部分完全重构；</li>
<li>数据用量较大的地方使用redis缓存数据；</li>
<li>部分接口进行异步改造，避免界面堵塞；</li>
<li>后端数据同步程序进行多线程改造。</li>
</ol>
<h1 id="界面展示">界面展示</h1>
<h2 id="首页">首页</h2>
<p><img src="/images/fund/home.png" alt="home"></p>
<h2 id="基金筛选">基金筛选</h2>
<p><img src="/images/fund/cart.png" alt="screen"></p>
<h2 id="基金看板">基金看板</h2>
<p><img src="/images/fund/dashboard1.png" alt="dashboard"></p>
<p><img src="/images/fund/dashboard2.png" alt="dashboard-expanded"></p>
<h2 id="热点新闻">热点新闻</h2>
<p><img src="/images/fund/news.png" alt="news"></p>
<h2 id="个基信息">个基信息</h2>
<p><img src="/images/fund/info1.png" alt="outlook"></p>
<p><img src="/images/fund/info3.png" alt="risk"></p>
<p><img src="/images/fund/info2.png" alt="asset-allocate"></p>
<h2 id="etf资金流向">ETF资金流向</h2>
<p><img src="/images/fund/etf1.png" alt="etf-outlook"></p>
<p><img src="/images/fund/etf2.png" alt="by-category"></p>
<p><img src="/images/fund/etf3.png" alt="recent"></p>
<p>如果觉得还不错，可以去<a href="https://github.com/PengchuanC/fund_vue3">项目首页</a>给我一个star！</p>
]]></content>
		</item>
		
		<item>
			<title>Vue3解决数组改变界面没有重新刷新的问题</title>
			<link>https://pengchuanc.github.io/posts/vue_force_update/</link>
			<pubDate>Wed, 19 May 2021 10:07:04 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/vue_force_update/</guid>
			<description>解决方法 在使用vue3或vue2时，时常遇到数组或对象更新，但在列表渲染的UI却没有随数据改变而刷新，这是由于 JavaScript 的限制，Vue 不能检测数组的</description>
			<content type="html"><![CDATA[<h3 id="解决方法">解决方法</h3>
<p>在使用vue3或vue2时，时常遇到数组或对象更新，但在列表渲染的UI却没有随数据改变而刷新，这是由于 JavaScript 的限制，Vue 不能检测数组的变动，如果要更新数组，可以采用<code>push</code>、<code>splice</code>、<code>concat</code>等方法，对象可以使用<code>assign</code>方法，如果以上方法不生效，可以强制刷新页面，主要是通过修改列表渲染的<code>key</code>来实现，vue在修改<code>key</code>时，会强制刷新页面。</p>
<h4 id="1简单解决">1.简单解决</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vue" data-lang="vue"><span style="display:flex;"><span>&lt;<span style="color:#f92672">template</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">div</span> <span style="color:#f92672">:key</span><span style="color:#e6db74">=&#34;state.updateKey&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>    	&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">template</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">javascript</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">import</span> ...
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span>({
</span></span><span style="display:flex;"><span>    	<span style="color:#a6e22e">setup</span>(){
</span></span><span style="display:flex;"><span>    		<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">reactive</span>({
</span></span><span style="display:flex;"><span>    			<span style="color:#a6e22e">updateKey</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    		})
</span></span><span style="display:flex;"><span>    	}
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">updateArray</span> <span style="color:#f92672">=</span> ()=&gt;{
</span></span><span style="display:flex;"><span>    		...
</span></span><span style="display:flex;"><span>    		<span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">updateKey</span> <span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>    	}
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">return</span> { <span style="color:#a6e22e">state</span> }
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">javascript</span>&gt;
</span></span></code></pre></div><h4 id="2复杂方式">2.复杂方式</h4>
<p>在列表渲染时保证每一个tag的<code>key</code>是唯一的，也就是不要直接使用<code>index</code>作为<code>key</code>，这样array变化后，<code>key</code>也会变动，页面自然就刷新了。</p>
]]></content>
		</item>
		
		<item>
			<title>Python利用Consul实现服务发现</title>
			<link>https://pengchuanc.github.io/posts/consul/</link>
			<pubDate>Fri, 23 Apr 2021 14:17:25 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/consul/</guid>
			<description>1.背景 由于基金筛选系统和组合管理系统间存在一些互相需要使用到的基础数据，但又不想重复创建数据库表单和同步数据，因此在两个项目中使用了grp</description>
			<content type="html"><![CDATA[<h1 id="1背景">1.背景</h1>
<p>由于基金筛选系统和组合管理系统间存在一些互相需要使用到的基础数据，但又不想重复创建数据库表单和同步数据，因此在两个项目中使用了grpc来实现数据调用；早期实现的grpc版本中直接使用对方的IP和端口，每次调整或部署到其他地方都需要修改代码，因此考虑使用服务注册和发现来解决这个问题。</p>
<p>对比了<strong>etcd</strong>和<strong>consul</strong>两个方案，由于后端使用的语言是python，而etcd的版本比较多，导致相关的库也需要对应版本，使用起来比较麻烦，因此最终使用consul和对应的库<code>python-consul</code>。</p>
<h1 id="2安装与启动">2.安装与启动</h1>
<h2 id="21安装">2.1安装</h2>
<p>直接前往 <a href="https://www.consul.io/">Consul by HashiCorp</a> 官网下载对应系统的可执行文件即可，以Linux为例</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cd  /home/downloads
</span></span><span style="display:flex;"><span>$ mkdir consul <span style="color:#f92672">&amp;&amp;</span> cd consul
</span></span><span style="display:flex;"><span>$ wget https://releases.hashicorp.com/consul/1.9.5/consul_1.9.5_linux_amd64.zip
</span></span><span style="display:flex;"><span>$ unzip consul_1.9.5_linux_amd64.zip
</span></span></code></pre></div><h2 id="22启动">2.2启动</h2>
<p>以刚刚下载的文件为例：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ./consul agent -server -bootstrap-expect <span style="color:#ae81ff">1</span> -data-dir<span style="color:#f92672">=</span>/tmp/consul -node<span style="color:#f92672">=</span>n1 -bind<span style="color:#f92672">=</span>127.0.0.1 -client<span style="color:#f92672">=</span>0.0.0.0 -ui
</span></span></code></pre></div><p>默认使用端口<code>8500</code>，在浏览器中输入服务器<code>{ip}:8500</code>即可通过web查看注册的服务了，当然目前只有一个默认的健康检测服务。</p>
<p><img src="/images/consul-start.png" alt="启动页面"></p>
<h1 id="3在python中使用">3.在Python中使用</h1>
<p>首先需要安装<code>python-consul</code>库：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ pip3 install python-consul
</span></span></code></pre></div><p>简单示例：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#test.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> consul
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Consul</span>(object):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, host<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.170.139.10&#39;</span>, port<span style="color:#f92672">=</span><span style="color:#ae81ff">8500</span>):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_consul <span style="color:#f92672">=</span> consul<span style="color:#f92672">.</span>Consul(host, port)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">register</span>(self, name, host, port):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;注册服务&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_consul<span style="color:#f92672">.</span>agent<span style="color:#f92672">.</span>service<span style="color:#f92672">.</span>register(
</span></span><span style="display:flex;"><span>            name<span style="color:#f92672">=</span>name, service_id<span style="color:#f92672">=</span>name, address<span style="color:#f92672">=</span>host, port<span style="color:#f92672">=</span>port,
</span></span><span style="display:flex;"><span>            check<span style="color:#f92672">=</span>consul<span style="color:#f92672">.</span>Check()<span style="color:#f92672">.</span>tcp(host<span style="color:#f92672">=</span>host, port<span style="color:#f92672">=</span>port, interval<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;5s&#39;</span>,
</span></span><span style="display:flex;"><span>                                     timeout<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;30s&#39;</span>, deregister<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;30s&#39;</span>)
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find</span>(self, name):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;发现服务&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        services <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_consul<span style="color:#f92672">.</span>agent<span style="color:#f92672">.</span>services()
</span></span><span style="display:flex;"><span>        server <span style="color:#f92672">=</span> services<span style="color:#f92672">.</span>get(name)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> server:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">None</span>, <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        addr <span style="color:#f92672">=</span> server[<span style="color:#e6db74">&#39;Address&#39;</span>]
</span></span><span style="display:flex;"><span>        port <span style="color:#f92672">=</span> server[<span style="color:#e6db74">&#39;Port&#39;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> (addr, port), <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    c <span style="color:#f92672">=</span> Consul()
</span></span><span style="display:flex;"><span>    c<span style="color:#f92672">.</span>register(<span style="color:#e6db74">&#39;fund_filter_django&#39;</span>, <span style="color:#e6db74">&#39;10.170.139.10&#39;</span>, <span style="color:#ae81ff">50051</span>)
</span></span><span style="display:flex;"><span>    print(c<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#39;fund_filter_django&#39;</span>))
</span></span></code></pre></div><p>执行文件可以看到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ python3 test.py
</span></span><span style="display:flex;"><span><span style="color:#f92672">((</span><span style="color:#e6db74">&#39;10.170.139.10&#39;</span>, 50051<span style="color:#f92672">)</span>, True<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>查看web页面可以看到：</p>
<p><img src="/images/consul-register.png" alt="注册服务"></p>
]]></content>
		</item>
		
		<item>
			<title>MariaDB 升级后无法运行</title>
			<link>https://pengchuanc.github.io/posts/mariadb-upgrade/</link>
			<pubDate>Wed, 24 Feb 2021 10:15:21 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/mariadb-upgrade/</guid>
			<description>1.事情起因 在redhat每次执行完yun update后，MariaDB也会升级，但我之前更换过MariaDB的数据存储目录，将数据保存在了</description>
			<content type="html"><![CDATA[<h1 id="1事情起因">1.事情起因</h1>
<p>在redhat每次执行完<code>yun update</code>后，MariaDB也会升级，但我之前更换过MariaDB的数据存储目录，将数据保存在了<code>/home/mysql</code>目录下，导致每次升级完MariaDB后，无法启动server。</p>
<h1 id="2解决方案">2.解决方案</h1>
<h2 id="21-更换目录">2.1 更换目录</h2>
<p>更换目录后，需要对目录重新授权，因为默认情况下，MariaDB的用户和用户组为<code>mysql:mysql</code>，授权代码为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>~ chown -R mysql:mysql /home/mysql
</span></span><span style="display:flex;"><span>~ chown <span style="color:#ae81ff">775</span> /home/mysql
</span></span></code></pre></div><h2 id="22-关闭selinux">2.2 关闭selinux</h2>
<p>通过一下命令可以临时关闭selinux：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>~ setenforce <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><p>要永久禁用selinux，可以使用文本编辑器打开<code>/etc/sysconfig/selinux</code>文件，如下所示：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>~ vi /etc/sysconfig/selinux
</span></span></code></pre></div><p>然后将配置selinux=enforcing改为selinux=disabled，如下图所示。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>SELINUX=disabled
</span></span></code></pre></div><p>然后，按<code>esc</code>按键后，输入<code>:wq</code>保存并退出文件，为了使配置生效，需要重新启动系统，然后使用sestatus命令检查selinux的状态，如下所示：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sestatus
</span></span></code></pre></div><h2 id="23-修改mariadbservice">2.3 修改<code>mariadb.service</code></h2>
<p>systemd 默认配置了对<code>/root</code>和<code>/home</code>等目录的限制，<code>ProtectHome=true</code>配置意味着启动时应用对这些目录不可写，mariaDB同样有这个限制。</p>
<p>通过以下命令可以找到<code>mriadb.service</code>的位置:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>~ find / -name <span style="color:#e6db74">&#34;mariadb.service&#34;</span>
</span></span></code></pre></div><p>然后使用<code>vi</code> 编辑文件，通过以下命令可以找到<code>ProtectHome</code>的位置:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>: /ProtectHome*
</span></span></code></pre></div><p>找到配置位置后，将<code>ProtectHome=true</code>修改为<code>ProtectHome=false</code>，保存并退出。</p>
<p>执行一下命令来重启MariaDB：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>~ systemctl daemon-reload
</span></span><span style="display:flex;"><span>~ systemctl restart mariadb.servic
</span></span></code></pre></div><h1 id="3-总结">3. 总结</h1>
<p>实际上问题的出现来源于三个方面</p>
<ul>
<li>更换mariadb目录没有对目录进行授权</li>
<li>selinux</li>
<li>systemd 默认配置了对<code>/root</code>和<code>/home</code>等目录的限制</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Mariadb(MySQL)初始配置</title>
			<link>https://pengchuanc.github.io/posts/mariadb-init/</link>
			<pubDate>Thu, 04 Feb 2021 17:05:55 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/mariadb-init/</guid>
			<description>数据库各项配置主要在/etc/my.cnf文件中修改。 1.数据库存放位置 安装完MariaDB后，数据资源一般默认存放在/var/lib/my</description>
			<content type="html"><![CDATA[<p>数据库各项配置主要在<code>/etc/my.cnf</code>文件中修改。</p>
<h1 id="1数据库存放位置">1.数据库存放位置</h1>
<p>安装完MariaDB后，数据资源一般默认存放在<code>/var/lib/mysql</code>目录下，该目录空间一般不大，可修改<code>datadir</code>项目来更改数据保存位置，对于开启<strong>SELinux</strong>的发行版来说，修改数据保存位置可能导致数据库启动失败，可以通过<code>setenforce 0</code>来关闭SELinux。</p>
<p>一般建议移动整个<code>/var/lib/mysql</code>目录，如果这样操作，记得修改<code>socket</code>条目的位置。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span># 初始配置
</span></span><span style="display:flex;"><span>datadir=/var/lib/mysql
</span></span><span style="display:flex;"><span>socket=/var/lib/mysql/mysql.sock
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># 修改后
</span></span><span style="display:flex;"><span>datadir=/root/mysql
</span></span><span style="display:flex;"><span>socket=/root/mysql/mysql.sock
</span></span></code></pre></div><h1 id="2影响到数据库超时的设置">2.影响到数据库超时的设置</h1>
<pre tabindex="0"><code class="language-cnf" data-lang="cnf"># 服务器关闭非交互连接之前等待活动的秒数
wait_timeout=28800

# 服务器关闭交互式连接之前等待活动的秒数
interactive_timeout=28800
</code></pre><h1 id="3缓冲区大小">3.缓冲区大小</h1>
<pre tabindex="0"><code class="language-cnf" data-lang="cnf"># 索引的缓冲区大小，增加它可得到更好的索引处理性能
key_buffer_size=256M

# 单次连接最大数据量
max_allowed_packet=768M

# 排序、读查询、join操作所能使用的缓冲区大小，每一个连接独享
read_buffer_size=4M
sort_buffer_size=4M
join_buffer_size=8M
</code></pre><h1 id="4连接数量管理">4.连接数量管理</h1>
<pre tabindex="0"><code class="language-cnf" data-lang="cnf"># 最大连接进程数
max_connections=768
max_connect_errors=1000
</code></pre><h1 id="5重启">5.重启</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># centos6 redhat6</span>
</span></span><span style="display:flex;"><span>service restart mariadb.service
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># centos7+ redhat7+</span>
</span></span><span style="display:flex;"><span>systemctl restart mariadb.service
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>常用Linux命令</title>
			<link>https://pengchuanc.github.io/posts/linux_most_used_command/</link>
			<pubDate>Wed, 06 Jan 2021 15:22:11 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/linux_most_used_command/</guid>
			<description>任务中止 1.中止多进程任务 假设任务名为 qcluster ps aux|grep qcluster|grep -v grep|cut -c 9-15|xargs kill -9</description>
			<content type="html"><![CDATA[<h1 id="任务中止">任务中止</h1>
<h2 id="1中止多进程任务">1.中止多进程任务</h2>
<p>假设任务名为 <code>qcluster</code></p>
<p><img src="/images/linux-ps.png" alt="image-20210106152455606"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>ps aux|grep qcluster|grep -v grep|cut -c 9-15|xargs kill -9
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python中使用JWT</title>
			<link>https://pengchuanc.github.io/posts/python-jwt/</link>
			<pubDate>Mon, 21 Dec 2020 11:18:59 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-jwt/</guid>
			<description>在前后端分离的web项目中，后端一般采用Restful Api，这种模式的后端是无状态的， 不便再使用Session这种传统的认证方式，一般采用</description>
			<content type="html"><![CDATA[<p>在前后端分离的web项目中，后端一般采用Restful Api，这种模式的后端是无状态的，</p>
<p>不便再使用Session这种传统的认证方式，一般采用<strong>JWT</strong>。</p>
<p>基于jwt的鉴权机制也是无状态的，因此不需要在服务端去保留用户的认证信息或者会话信息，jwt是存储在客户端的，服务器端不需要存储jwt的，客户端每次发送请求时会携带该token，然后到服务器端会验证token是否正确，是否过期了，来验证token的有效性。</p>
<p>再Django中，使用restframework便可以很方便的使用jwt进行认证了，我们也可以通过标准库<code>jwt</code>来简单实现jwt加解密过程。</p>
<h2 id="1jwt加密">1.JWT加密</h2>
<p>jwt加密一般采用<code>HS256</code>的加密方式，为了保证jwt的安全，需要设置一个仅提供者可知的<code>secret key</code>，然后再对用户信息进行打包，代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> jwt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> itsdangerous <span style="color:#f92672">import</span> JSONWebSignatureSerializer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SECRET_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;iencj58^&amp;/.+_@#%$jnckn&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># token超时时间</span>
</span></span><span style="display:flex;"><span>expire_at <span style="color:#f92672">=</span> (datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>now() <span style="color:#f92672">+</span> datetime<span style="color:#f92672">.</span>timedelta(minutes<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>))<span style="color:#f92672">.</span>timestamp()
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;username&#39;</span>: <span style="color:#e6db74">&#39;Asin&#39;</span>, <span style="color:#e6db74">&#39;expireAt&#39;</span>: expire_at}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>token <span style="color:#f92672">=</span> jwt<span style="color:#f92672">.</span>encode(payload, key<span style="color:#f92672">=</span>SECRET_KEY, algorithm<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;HS256&#39;</span>)
</span></span><span style="display:flex;"><span>print(token)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#b&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IkFzaW4iLCJleHBpcmVBdCI6MTYwODUyMjI1Mi44MTU5NzV9.psXYOLOgzo1mzAHzDCk2hcocMaq_D84yOoXPMhk3W8U&#39;</span>
</span></span></code></pre></div><h2 id="2jwt解密">2.JWT解密</h2>
<p>解密的关键就在于<code>secret key</code>和加密方式，知道这两条信息后，解密过程就很简单了，代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> jwt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>token <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IkFzaW4iLCJleHBpcmVBdCI6MTYwODUyMjI1Mi44MTU5NzV9.psXYOLOgzo1mzAHzDCk2hcocMaq_D84yOoXPMhk3W8U&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SECRET_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;iencj58^&amp;/.+_@#%$jnckn&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>info <span style="color:#f92672">=</span> jwt<span style="color:#f92672">.</span>decode(token, key<span style="color:#f92672">=</span>SECRET_KEY, algorithms<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;HS256&#39;</span>)
</span></span><span style="display:flex;"><span>print(info)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># {&#39;username&#39;: &#39;Asin&#39;, &#39;expireAt&#39;: 1608522252.815975}</span>
</span></span></code></pre></div><h3 id="3使用itsdangerous包">3.使用<code>itsdangerous</code>包</h3>
<p><code>itesdangerous</code>是flask中推荐使用的签名工具，使用方式也相当简单。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> itsdangerous <span style="color:#f92672">import</span> TimedJSONWebSignatureSerializer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SECRET_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;iencj58^&amp;/.+_@#%$jnckn&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>serializer <span style="color:#f92672">=</span> TimedJSONWebSignatureSerializer(secret_key<span style="color:#f92672">=</span>SECRET_KEY, algorithm_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;HS256&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 设置超时时间为15分组</span>
</span></span><span style="display:flex;"><span>serializer<span style="color:#f92672">.</span>DEFAULT_EXPIRES_IN <span style="color:#f92672">=</span> <span style="color:#ae81ff">60</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">15</span>
</span></span><span style="display:flex;"><span>token <span style="color:#f92672">=</span> serializer<span style="color:#f92672">.</span>dumps({<span style="color:#e6db74">&#39;username&#39;</span>: <span style="color:#e6db74">&#39;Asin&#39;</span>})
</span></span><span style="display:flex;"><span>print(token)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>info <span style="color:#f92672">=</span> serializer<span style="color:#f92672">.</span>loads(token)
</span></span><span style="display:flex;"><span>print(info)
</span></span></code></pre></div><h2 id="4在项目中使用">4.在项目中使用</h2>
<p>在项目中使用jwt时，一般还需要包含令牌的签发者及签发日期等信息，用于加强安全性和token超时后的刷新机制，因此认证后返回的除了token外还应该包含一条用于刷新的token，避免token频繁超时。</p>
]]></content>
		</item>
		
		<item>
			<title>Python利用Manager在分布式进程间进行通信</title>
			<link>https://pengchuanc.github.io/posts/python-manager/</link>
			<pubDate>Thu, 17 Dec 2020 11:01:25 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-manager/</guid>
			<description>在具有亲缘的多进程程序中，通常可用使用queue、pipe等数据结构来进行数据共享和传递消息，但在分布式进程中，进程间的通信还需要依靠网络来</description>
			<content type="html"><![CDATA[<p>在具有亲缘的多进程程序中，通常可用使用<code>queue</code>、<code>pipe</code>等数据结构来进行数据共享和传递消息，但在分布式进程中，进程间的通信还需要依靠网络来进行传输。</p>
<p>在之前的文章中，我们通过grpc服务来传输数据，实际上在Python标准库<code>multiprocessing</code>的<code>managers</code>模块已经包含了分布式进程通信的功能，主要使用<code>BaseManager</code>对象。</p>
<h2 id="1basemanager对象">1.BaseManager对象</h2>
<p>官网文档对BaseManager的描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">multiprocessing</span><span style="color:#f92672">.</span>managers<span style="color:#f92672">.</span>BaseManager([address[, authkey]])
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	创建一个 BaseManager 对象。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	一旦创建，应该及时调用 start() 或者 get_server().serve_forever() 以确保管理器对象对应的管理进程已经启动。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	address 是管理器服务进程监听的地址。如果 address 是 None ,则允许和任意主机的请求建立连接。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	authkey 是认证标识，用于检查连接服务进程的请求合法性。如果 authkey 是 None, 则会使用 current_process().authkey , 否则，就使用 authkey , 需要保证它必须是 byte 类型的字符串。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	start([initializer[, initargs]])
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">		为管理器开启一个子进程，如果 initializer 不是 None , 子进程在启动时将会调用initializer(*initargs) 。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    get_server()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    	返回一个 Server对象，它是管理器在后台控制的真实的服务。 Server对象拥有serve_forever() 方法。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt; from multiprocessing.managers import BaseManager
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt; manager = BaseManager(address=(&#39;&#39;, 50000), authkey=b&#39;abc&#39;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt; server = manager.get_server()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt; server.serve_forever()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Server 额外拥有一个 address 属性。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    connect()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    	将本地管理器对象连接到一个远程管理器进程:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt; from multiprocessing.managers import BaseManager
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt; m = BaseManager(address=(&#39;127.0.0.1&#39;, 50000), authkey=b&#39;abc&#39;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &gt;&gt;&gt; m.connect()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    shutdown()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        停止管理器的进程。这个方法只能用于已经使用 start() 启动的服务进程。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        它可以被多次调用。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    register(typeid[, callable[, proxytype[, exposed[, method_to_typeid[, create_method]]]]])
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    	一个 classmethod，可以将一个类型或者可调用对象注册到管理器类。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    	typeid 是一种 &#34;类型标识符&#34;，用于唯一表示某种共享对象类型，必须是一个字符串。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        callable 是一个用来为此类型标识符创建对象的可调用对象。如果一个管理器实例将使用 connect() 方法连接到服务器，或者 create_method 参数为 False，那么这里可留下 None。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        proxytype 是 BaseProxy  的子类，可以根据 typeid 为共享对象创建一个代理，如果是 None , 则会自动创建一个代理类。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        exposed 是一个函数名组成的序列，用来指明只有这些方法可以使用 BaseProxy._callmethod() 代理。(如果 exposed 是 None, 则会在 proxytype._exposed_ 存在的情况下转而使用它) 当暴露的方法列表没有指定的时候，共享对象的所有 “公共方法” 都会被代理。（这里的“公共方法”是指所有拥有 __call__() 方法并且不是以 &#39;_&#39; 开头的属性）
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        method_to_typeid 是一个映射，用来指定那些应该返回代理对象的暴露方法所返回的类型。（如果 method_to_typeid 是 None, 则 proxytype._method_to_typeid_ 会在存在的情况下被使用）如果方法名称不在这个映射中或者映射是 None ,则方法返回的对象会是一个值拷贝。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        create_method 指明，是否要创建一个以 typeid 命名并返回一个代理对象的方法，这个函数会被服务进程用于创建共享对象，默认为 True 。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    BaseManager 实例也有一个只读属性。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    address
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    	管理器所用的地址。
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span></code></pre></div><p>接下来尝试使用<code>BaseManager</code>来进行分布式进程间的通信，由于是在本机多个<code>cmd</code>窗口下模拟分布式，故ip地址均使用<code>127.0.0.1:5000</code>。</p>
<h2 id="2server端">2.Server端</h2>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># server.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> queue
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> multiprocessing.managers <span style="color:#f92672">import</span> BaseManager
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 全局变量，存放产生的数据</span>
</span></span><span style="display:flex;"><span>products <span style="color:#f92672">=</span> queue<span style="color:#f92672">.</span>Queue()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">task_queue</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;获取任务队列
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    用于注册到BaseManager的任务队列
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        queue.Queue: 获取进程安全的任务队列
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> products
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">producer</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;模拟生产者，生产数据
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        int: 将产生的随机数当作产品
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    p <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    BaseManager<span style="color:#f92672">.</span>register(<span style="color:#e6db74">&#39;task_queue&#39;</span>, task_queue)
</span></span><span style="display:flex;"><span>    manager <span style="color:#f92672">=</span> BaseManager(address<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;127.0.0.1&#39;</span>, <span style="color:#ae81ff">5000</span>), authkey<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;producer&#39;</span>)
</span></span><span style="display:flex;"><span>    manager<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>    tasks <span style="color:#f92672">=</span> manager<span style="color:#f92672">.</span>task_queue()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        tasks<span style="color:#f92672">.</span>put(producer())
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">2</span>)
</span></span></code></pre></div><p>首先创建一个全局的<code>queue</code>来存放数据(注意<code>queue</code>的特点是先进先出(FIFO)，当从一个空的<code>queue</code>获取数据时会发生堵塞)，模拟实际业务中产生的数据的容器，如存放爬虫获取到的媒体文件的url，供其他进程获取。</p>
<p>然后为创建的数据容器提供一个获取方法，然后注册到<code>BaseManager</code>，注册后其他进程便可以注册相同的名字来获取到这个方法，然后获取到数据容器。</p>
<p>在服务端实例化<code>BaseManager</code>对象，传入服务器地址，并调用<code>start</code>对象开启服务。</p>
<p>最后在循环事件中模拟生产过程。</p>
<h2 id="3client端">3.Client端</h2>
<p>client端模拟消费过程，代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># client.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> multiprocessing.managers <span style="color:#f92672">import</span> BaseManager
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    BaseManager<span style="color:#f92672">.</span>register(<span style="color:#e6db74">&#39;task_queue&#39;</span>)
</span></span><span style="display:flex;"><span>    manager <span style="color:#f92672">=</span> BaseManager(address<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;127.0.0.1&#39;</span>, <span style="color:#ae81ff">5000</span>), authkey<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;producer&#39;</span>)
</span></span><span style="display:flex;"><span>    manager<span style="color:#f92672">.</span>connect()
</span></span><span style="display:flex;"><span>    tasks <span style="color:#f92672">=</span> manager<span style="color:#f92672">.</span>task_queue()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        print(tasks<span style="color:#f92672">.</span>get())
</span></span></code></pre></div><p>这样便实现了分布式进程间的通信和数据共享。</p>
<h2 id="4进一步拆分">4.进一步拆分</h2>
<p>在实际业务中，可能会有多个生产者和多个消费者，这种情况下需要把负责通信的模块剥离出来，只作为通信的管理部分，即生产者向管理者写入数据，消费者从管理者读取数据。</p>
<h3 id="41-manager">4.1 Manager</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># manager.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> queue
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> multiprocessing.managers <span style="color:#f92672">import</span> BaseManager
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 全局变量，存放产生的数据</span>
</span></span><span style="display:flex;"><span>products <span style="color:#f92672">=</span> queue<span style="color:#f92672">.</span>Queue()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">task_queue</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;获取任务队列
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    用于注册到BaseManager的任务队列
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        queue.Queue: 获取进程安全的任务队列
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> products
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">close</span>():
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;收到请求，结束进程&#39;</span>)
</span></span><span style="display:flex;"><span>    exit()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    BaseManager<span style="color:#f92672">.</span>register(<span style="color:#e6db74">&#39;task_queue&#39;</span>, task_queue)
</span></span><span style="display:flex;"><span>    BaseManager<span style="color:#f92672">.</span>register(<span style="color:#e6db74">&#39;close&#39;</span>, close)
</span></span><span style="display:flex;"><span>    manager <span style="color:#f92672">=</span> BaseManager(address<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;127.0.0.1&#39;</span>, <span style="color:#ae81ff">5000</span>), authkey<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;producer&#39;</span>)
</span></span><span style="display:flex;"><span>    manager<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>    tasks <span style="color:#f92672">=</span> manager<span style="color:#f92672">.</span>task_queue()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span></code></pre></div><h3 id="42-server">4.2 Server</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># server.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> multiprocessing.managers <span style="color:#f92672">import</span> BaseManager
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">producer</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;模拟生产者，生产数据
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        int: 将产生的随机数当作产品
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    p <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    BaseManager<span style="color:#f92672">.</span>register(<span style="color:#e6db74">&#39;task_queue&#39;</span>)
</span></span><span style="display:flex;"><span>    manager <span style="color:#f92672">=</span> BaseManager(address<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;127.0.0.1&#39;</span>, <span style="color:#ae81ff">5000</span>), authkey<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;producer&#39;</span>)
</span></span><span style="display:flex;"><span>    manager<span style="color:#f92672">.</span>connect()
</span></span><span style="display:flex;"><span>    tasks <span style="color:#f92672">=</span> manager<span style="color:#f92672">.</span>task_queue()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        tasks<span style="color:#f92672">.</span>put(producer())
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">2</span>)
</span></span></code></pre></div><h3 id="43-client">4.3 Client</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># client.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> multiprocessing.managers <span style="color:#f92672">import</span> BaseManager
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    BaseManager<span style="color:#f92672">.</span>register(<span style="color:#e6db74">&#39;task_queue&#39;</span>)
</span></span><span style="display:flex;"><span>    manager <span style="color:#f92672">=</span> BaseManager(address<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;127.0.0.1&#39;</span>, <span style="color:#ae81ff">5000</span>), authkey<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;producer&#39;</span>)
</span></span><span style="display:flex;"><span>    manager<span style="color:#f92672">.</span>connect()
</span></span><span style="display:flex;"><span>    tasks <span style="color:#f92672">=</span> manager<span style="color:#f92672">.</span>task_queue()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        print(tasks<span style="color:#f92672">.</span>get())
</span></span></code></pre></div><p>这样<code>Manager</code>便可以只用于管理通信，与业务剥离。</p>
]]></content>
		</item>
		
		<item>
			<title>Python使用装饰器来实现重试</title>
			<link>https://pengchuanc.github.io/posts/python-class-decorator/</link>
			<pubDate>Tue, 15 Dec 2020 10:09:06 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-class-decorator/</guid>
			<description>在之前使用grpc的项目中偶尔会遇到连接时间过久，tcp连接断掉的情况，于是尝试写一个装饰器来实现自动重连3次，即最大尝试4次连接。 主要使用</description>
			<content type="html"><![CDATA[<p>在之前使用grpc的项目中偶尔会遇到连接时间过久，tcp连接断掉的情况，于是尝试写一个装饰器来实现自动重连3次，即最大尝试4次连接。</p>
<p>主要使用了python中class的魔术方法<code>__call__</code>和递归函数。</p>
<h2 id="1python中的__call__方法">1.Python中的<code>__call__</code>方法</h2>
<p><code>__call__</code>函数的作用是将一个类变为<code>callable</code>对象，即可用用<code>()</code>来调用一个已经实例化的对象，这也是将<code>class</code>作为装饰器的关键。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test</span>(object):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;调用init&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __new__(cls, <span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;调用new&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> object<span style="color:#f92672">.</span>__new__(cls)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __call__(self, <span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;调用call&#39;</span>)
</span></span></code></pre></div><p>python中对象实例化时，会一次调用<code>__new__</code>和<code>__init__</code>函数，然后调用实例化后的对象，会调用<code>__call__</code>函数，比如：</p>
<pre tabindex="0"><code class="language-pow" data-lang="pow">&gt;&gt;&gt; t = Test()
调用new
调用init

&gt;&gt; t()
调用call
</code></pre><h2 id="2实现装饰器">2.实现装饰器</h2>
<p>了解<code>__call__</code>运行的机制后，便可以利用它的特性来实现装饰器了。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Reconnect</span>(object):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;网络访问自动重连
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Attributes:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        func: 被装饰的函数
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        calls: 函数被调用的次数
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, func):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>func <span style="color:#f92672">=</span> func
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>calls <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">reconnect</span>(self, <span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;重新连接
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        当次数达到第四次时，直接返回函数，不论是否成功，不再进行重连
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        当次数小于四次时，如果是ConnectionError则递归调用重连函数
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        如果是其他错误，则直接抛出错误
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>calls <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>calls <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">3</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>func(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>func(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ConnectionError</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            print(e)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>reconnect(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> e
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __repr__(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;尝试还原函数本身签名&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> repr(self<span style="color:#f92672">.</span>func)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __call__(self, <span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>reconnect(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span></code></pre></div><p>初始化装饰器时，会需要传入一个被装饰的函数和生成一个内部用来记录重试次数的变量<code>calls</code>，重试的逻辑主要在<code>reconnect</code>函数中实现，重试逻辑中只捕获<code>ConnectionError</code>并进行重试，接下来模拟网络连接中会发生的错误。</p>
<h2 id="3模拟网络访问中的错误">3.模拟网络访问中的错误</h2>
<pre tabindex="0"><code>@Reconnect
def add(a, b):
    # 模拟不稳定的网络
    net_state = random.randint(0, 10)
    if net_state &gt; 9:
        raise ConnectionRefusedError(f&#39;connection refuse, net state {net_state}&#39;)
    elif net_state &gt; 5:
        raise ConnectionError(f&#39;connection error, net state {net_state}&#39;)
    return a+b
</code></pre><p>利用<code>random</code>库产生的随机数来模拟网络环境，调用<code>add</code>检验装饰器是否生效：</p>
<pre tabindex="0"><code class="language-pow" data-lang="pow">&gt;&gt;&gt; add(5, 2)
7

&gt;&gt;&gt; add(5, 2)
connection error, net state 6
connection error, net state 8
connection refuse, net state 10
7
</code></pre><p>可用看到，装饰器已经生效。</p>
<h2 id="4关于函数签名">4.关于函数签名</h2>
<p>在定义装饰器时，使用到了<code>__repr__</code>方法，该方法主要定义对象的输出内容，当函数经过装饰器的装饰，其实际签名信息已经被覆盖，在日志中已经无法定位到具体函数的信息，如果在上例中，注释掉<code>__repr__</code>相关内容，我们可以看到：</p>
<pre tabindex="0"><code>&gt;&gt;&gt; add
&lt;Reconnect object at 0x000001A80CE48FD0&gt;
</code></pre><p>实际上<code>add</code>函数自身信息已经丢失，如果使用了<code>__repr__</code>后，则可用看到：</p>
<pre tabindex="0"><code>&gt;&gt;&gt; add
&lt;function add at 0x0000021862BAE040&gt;
</code></pre><p>在函数型装饰器中，可用使用<code>collections</code>模块下的<code>wraps</code>对象来实现函数的反签名，在装饰器类中尚未尝试，可以作为后续研究内容。</p>
<h2 id="5完整代码">5.完整代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># demo.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Reconnect</span>(object):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;网络访问自动重连
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Attributes:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        func: 被装饰的函数
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        calls: 函数被调用的次数
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, func):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>func <span style="color:#f92672">=</span> func
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>calls <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">reconnect</span>(self, <span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;重新连接
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        当次数达到第四次时，直接返回函数，不论是否成功，不再进行重连
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        当次数小于四次时，如果是ConnectionError则递归调用重连函数
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        如果是其他错误，则直接抛出错误
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>calls <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>calls <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">3</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>func(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>func(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ConnectionError</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            print(e)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>reconnect(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> e
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __repr__(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;尝试还原函数本身签名&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> repr(self<span style="color:#f92672">.</span>func)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __call__(self, <span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>reconnect(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Reconnect</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add</span>(a, b):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 模拟不稳定的网络</span>
</span></span><span style="display:flex;"><span>    net_state <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> net_state <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">9</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ConnectionRefusedError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;connection refuse, net state </span><span style="color:#e6db74">{</span>net_state<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> net_state <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ConnectionError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;connection error, net state </span><span style="color:#e6db74">{</span>net_state<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a<span style="color:#f92672">+</span>b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">minus</span>(a, b):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a<span style="color:#f92672">-</span>b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    print(add)
</span></span><span style="display:flex;"><span>    print(minus)
</span></span><span style="display:flex;"><span>    print(add(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>))
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python中使用UDP来推送数据</title>
			<link>https://pengchuanc.github.io/posts/python-udp/</link>
			<pubDate>Fri, 11 Dec 2020 16:41:32 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-udp/</guid>
			<description>1.UDP简介 UDP协议（User Datagram Protocol）中文名称是用户数据报协议，是OSI（Open System Interconnection，开放式系</description>
			<content type="html"><![CDATA[<h2 id="1udp简介">1.UDP简介</h2>
<p>UDP协议（User Datagram Protocol）中文名称是用户数据报协议，是OSI（Open System Interconnection，开放式系统互联）参考模型中一种无连接的传输层协议，不需要建立连接就能直接进行数据发送和接收，属于不可靠的、没有时序的通信，但是UDP协议的实时性比较好，通常用于视频直播相关领域。</p>
<p>使用UDP推送数据时，不会考虑客户端是否会接受到数据，因此并不能保证它们能到达目的地。但由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。</p>
<p>接下来简单写个demo来尝试写一个推送服务。</p>
<h2 id="2服务端">2.服务端</h2>
<p>服务端代码如下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># server.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> socket
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> concurrent.futures <span style="color:#f92672">import</span> ThreadPoolExecutor
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pool <span style="color:#f92672">=</span> ThreadPoolExecutor(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Manager</span>(object):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;客户端管理
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Attributes:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        address: 地址
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        port: 端口
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    _clients <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    server: socket<span style="color:#f92672">.</span>socket
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, address: str, port: int):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Inits manager&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        server_socket <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_DGRAM)
</span></span><span style="display:flex;"><span>        address <span style="color:#f92672">=</span> (address, port)
</span></span><span style="display:flex;"><span>        server_socket<span style="color:#f92672">.</span>bind(address)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>server <span style="color:#f92672">=</span> server_socket
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">register</span>(self, name, client):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;注册客户端
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            name: 客户端名称
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            client: 客户端ip
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_clients<span style="color:#f92672">.</span>update({name: client})
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;用户 </span><span style="color:#e6db74">{</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74"> 成功注册&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">unregister</span>(self, name: str):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;取消注册
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            name: 客户端名称
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> name <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>_clients<span style="color:#f92672">.</span>keys():
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>_clients<span style="color:#f92672">.</span>pop(name)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">broadcast</span>(self, msg: str):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;为每一个注册的客户端推送消息
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            msg: 消息内容
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> client <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>_clients<span style="color:#f92672">.</span>values():
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>server<span style="color:#f92672">.</span>sendto(msg<span style="color:#f92672">.</span>encode(), client)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_register</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;监听注册事件&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>            name, client_address <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>server<span style="color:#f92672">.</span>recvfrom(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> name:
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>register(name<span style="color:#f92672">.</span>decode(), client_address)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">do</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;模拟推送业务&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>            date <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %H:%M:%S&#39;</span>)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>broadcast(date)
</span></span><span style="display:flex;"><span>            time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@staticmethod</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">serve</span>(address, port):
</span></span><span style="display:flex;"><span>        manager <span style="color:#f92672">=</span> Manager(address, port)
</span></span><span style="display:flex;"><span>        pool<span style="color:#f92672">.</span>submit(manager<span style="color:#f92672">.</span>check_register)
</span></span><span style="display:flex;"><span>        pool<span style="color:#f92672">.</span>submit(manager<span style="color:#f92672">.</span>do)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    Manager<span style="color:#f92672">.</span>serve(<span style="color:#e6db74">&#39;0.0.0.0&#39;</span>, <span style="color:#ae81ff">9000</span>)
</span></span></code></pre></div><p>server端每隔10秒会向订阅的客户端推送一次数据，数据内容用当前时间模拟。发现订阅和推送数据放入线程池中处理，避免堵塞。</p>
<h2 id="3客户端">3.客户端</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># client.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> socket
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> concurrent.futures <span style="color:#f92672">import</span> ThreadPoolExecutor
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pool <span style="color:#f92672">=</span> ThreadPoolExecutor(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span>(object):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;客户端
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Attributes:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        name: 用于注册的唯一标识，通常使用uuid
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        address: 远程服务器地址
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        port: 远程服务器端口
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    _server: socket<span style="color:#f92672">.</span>socket
</span></span><span style="display:flex;"><span>    _address: tuple
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, name, address, port):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Inits client&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_address <span style="color:#f92672">=</span> (address, port)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_server <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_DGRAM)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">register</span>(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_server<span style="color:#f92672">.</span>sendto(self<span style="color:#f92672">.</span>name<span style="color:#f92672">.</span>encode(), self<span style="color:#f92672">.</span>_address)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">receive</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>            receive, sender <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_server<span style="color:#f92672">.</span>recvfrom(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>            receive <span style="color:#f92672">=</span> receive<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74"> 收到数据 </span><span style="color:#e6db74">{</span>receive<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    addr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;127.0.0.1&#39;</span>
</span></span><span style="display:flex;"><span>    p <span style="color:#f92672">=</span> <span style="color:#ae81ff">9000</span>
</span></span><span style="display:flex;"><span>    users <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;A&#39;</span>, <span style="color:#e6db74">&#39;B&#39;</span>, <span style="color:#e6db74">&#39;C&#39;</span>, <span style="color:#e6db74">&#39;D&#39;</span>, <span style="color:#e6db74">&#39;E&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 模拟5个用户去订阅数据</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> user <span style="color:#f92672">in</span> users:
</span></span><span style="display:flex;"><span>        client <span style="color:#f92672">=</span> Client(user, addr, p)
</span></span><span style="display:flex;"><span>        client<span style="color:#f92672">.</span>register()
</span></span><span style="display:flex;"><span>        pool<span style="color:#f92672">.</span>submit(client<span style="color:#f92672">.</span>receive)
</span></span></code></pre></div><p>客户端模拟5个用户去订阅数据，订阅后会持续收到服务端推送的数据。取消注册的方法暂未实现，原理类似，通常会使用tcp协议来确认客户端身份，进行订阅和取消订阅操作，数据推送使用udp。</p>
]]></content>
		</item>
		
		<item>
			<title>Python中的str类型和int数组类型转换</title>
			<link>https://pengchuanc.github.io/posts/python-bytes-str/</link>
			<pubDate>Thu, 10 Dec 2020 09:42:59 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-bytes-str/</guid>
			<description>在编程语言中，string类型往往是通过int数组来实现的，在python中，str和int[]同样可以转换 1.str转bytes 将字符串转</description>
			<content type="html"><![CDATA[<p>在编程语言中，string类型往往是通过int数组来实现的，在python中，str和int[]同样可以转换</p>
<h3 id="1str转bytes">1.str转bytes</h3>
<p>将字符串转化为bytes类型，即int数组</p>
<pre tabindex="0"><code class="language-pow" data-lang="pow">&gt;&gt;&gt; a = &#39;abc&#39;

&gt;&gt;&gt; # 将a转为bytes类型
&gt;&gt;&gt; a.encode()
b&#39;abc&#39;

&gt;&gt;&gt; # 转为List[int]
&gt;&gt;&gt; [x for x in a.encode()]
[97, 98, 99]
</code></pre><h3 id="2将int数组转化为str">2.将int数组转化为str</h3>
<pre tabindex="0"><code class="language-po" data-lang="po">&gt;&gt;&gt; a = [97, 98, 99]

&gt;&gt;&gt; # 先转为bytes
&gt;&gt;&gt; bytes(a)
b&#39;abc&#39;
&gt;&gt;&gt; bytes(a).decode()
&#39;abc&#39;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>通过grpc服务上传下载大型文件(Python)</title>
			<link>https://pengchuanc.github.io/posts/grpc_stream_python/</link>
			<pubDate>Wed, 09 Dec 2020 15:49:54 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/grpc_stream_python/</guid>
			<description>传统文件的下载方式主要使用tcp服务，这种功能同样可以使用grpc的stream来实现，通过使用流(streaming)，可以向服务器或者客</description>
			<content type="html"><![CDATA[<p>传统文件的下载方式主要使用tcp服务，这种功能同样可以使用grpc的stream来实现，通过使用流(streaming)，可以向服务器或者客户端持续发送数据，来达到上传和下载文件的目的。</p>
<p>Python中使用stream的要点在于灵活运用generator，发送数据使用yield，数据传输完成使用return而非break。</p>
<h2 id="1创建项目">1.创建项目</h2>
<p>整个项目位于desktop目录下，首先新建必要的目录及文件。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>desktop&gt; mkdir file_server
</span></span><span style="display:flex;"><span>desktop&gt; mkdir file_server/proto
</span></span><span style="display:flex;"><span>desktop&gt; mkdir file_server/send
</span></span><span style="display:flex;"><span>desktop&gt; mkdir file_server/download
</span></span></code></pre></div><p>在<code>file_server</code>目录下添加<code>__init__.py</code>文件，保证<code>file_sever</code>为一个python package</p>
<p>在<code>file_server/send</code>目录下新建<code>send.xlsx</code>文件，测试下载文件，可以在文件中写入一些数据方便检查是否下载成功。</p>
<p>在<code>file_server/download</code>目录下新建文件<code>download.docx</code>文件，测试上传文件，同样可以写入一些内容来测试是否上传成功。</p>
<h2 id="2创建proto文件">2.创建proto文件</h2>
<p>在<code>file_server</code>目录下创建<code>fileserver.proto</code>文件来定义grpc服务，文件内容如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-protobuf" data-lang="protobuf"><span style="display:flex;"><span>syntax <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;proto3&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#f92672">package</span> file_server;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// 文件传输服务
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">service</span> FileTransfer {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#75715e">// 上传文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">rpc</span> SendFile(stream RequestSend) <span style="color:#66d9ef">returns</span> (ResponseStatus);<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#75715e">// 下载文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">rpc</span> DownloadFile(RequestFile) <span style="color:#66d9ef">returns</span> (stream ResponseStream);<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// 文件上传数据流
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">RequestSend</span> {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">bytes</span> data <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// 上传结果状态
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">ResponseStatus</span> {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">bool</span> ok <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// 文件下载请求
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">RequestFile</span> {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> name <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// 文件下载数据流
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">ResponseStream</span> {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">bytes</span> data <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>然后编译<code>fileserver.proto</code>文件为python文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>python -m grpc_tools.protoc --python_out=./file_server --grpc_python_out=./file_server -I ./file_server/proto fileserver.proto
</span></span></code></pre></div><p>相关参数解释：</p>
<ul>
<li>&ndash;python-out: <code>fileserver_pb.py</code>文件的输出目录</li>
<li>&ndash;grpc_python_out：<code>fileserver_pb_grpc.py</code>文件输出目录</li>
<li>-I: protobuf源文件所在目录</li>
</ul>
<p>修改生成的<code>filesever_pb_grpc.py</code>的<code>import</code>部分代码:</p>
<pre tabindex="0"><code class="language-pyth" data-lang="pyth"># Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
&#34;&#34;&#34;Client and server classes corresponding to protobuf-defined services.&#34;&#34;&#34;
import grpc

import file_server.fileserver_pb2 as fileserver__pb2
</code></pre><p>修改原因是package方式组织的python代码引入模块的方式与单文件脚本的引入方式不同，直接引入<code>fileserver__pb2</code>模块的话会提示无法找到该模块。</p>
<h2 id="3创建server端">3.创建server端</h2>
<p>在<code>file_server</code>目录下新建<code>server.py</code>文件，内容如下:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> grpc
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> concurrent <span style="color:#f92672">import</span> futures
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pathlib <span style="color:#f92672">import</span> Path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> file_server.fileserver_pb2 <span style="color:#66d9ef">as</span> fp
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> file_server.fileserver_pb2_grpc <span style="color:#66d9ef">as</span> fpg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>base_path <span style="color:#f92672">=</span> Path(__file__)<span style="color:#f92672">.</span>parent
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">file_read</span>(name: str):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;读取待发送的文件的内容
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    由于是测试脚本，直接读取待下载的文件，即 ./file_server/send.xlsx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    模拟大文件需要分块读取，持续发送
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        name: 文件名
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    send_file_path <span style="color:#f92672">=</span> base_path <span style="color:#f92672">/</span> <span style="color:#e6db74">&#39;send&#39;</span> <span style="color:#f92672">/</span> name
</span></span><span style="display:flex;"><span>    size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1024</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(send_file_path, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>        start <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>seek(start)
</span></span><span style="display:flex;"><span>            read <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read(size)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> read:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">yield</span> fp<span style="color:#f92672">.</span>ResponseStream(data<span style="color:#f92672">=</span>read)
</span></span><span style="display:flex;"><span>            start <span style="color:#f92672">+=</span> size
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FileTransferServer</span>(fpg<span style="color:#f92672">.</span>FileTransferServicer):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;文件传输服务&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">SendFile</span>(self, request_iterator, context):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;文件发送服务
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        继承定义好的文件发送服务
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            request_iterator: 上传的文件流 : Generator[byte]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            context: 上下文
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            文件上传的状态 :ResponseStatus
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;接受到文件上传请求&#39;</span>)
</span></span><span style="display:flex;"><span>        send_file <span style="color:#f92672">=</span> base_path <span style="color:#f92672">/</span> <span style="color:#e6db74">&#39;send&#39;</span> <span style="color:#f92672">/</span> <span style="color:#e6db74">&#39;download.docx&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">with</span> open(send_file, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> request_iterator:
</span></span><span style="display:flex;"><span>                    f<span style="color:#f92672">.</span>write(r<span style="color:#f92672">.</span>data)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> fp<span style="color:#f92672">.</span>ResponseStatus(ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            print(e)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> fp<span style="color:#f92672">.</span>ResponseStatus(ok<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">DownloadFile</span>(self, request, context):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;文件下载服务
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        继承定义好的文件下载服务
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            request: 请求需要下载的文件名 :RequestFile
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            context: 上下文管理
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            文件下载的数据流 :ResponseStream
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        print(request<span style="color:#f92672">.</span>name)
</span></span><span style="display:flex;"><span>        file_name <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>name
</span></span><span style="display:flex;"><span>        file <span style="color:#f92672">=</span> file_read(name<span style="color:#f92672">=</span>file_name)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> response <span style="color:#f92672">in</span> file:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">yield</span> response
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@staticmethod</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">serve</span>():
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;启动服务
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        server <span style="color:#f92672">=</span> grpc<span style="color:#f92672">.</span>server(futures<span style="color:#f92672">.</span>ThreadPoolExecutor(max_workers<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>))
</span></span><span style="display:flex;"><span>        fpg<span style="color:#f92672">.</span>add_FileTransferServicer_to_server(FileTransferServer(), server)
</span></span><span style="display:flex;"><span>        server<span style="color:#f92672">.</span>add_insecure_port(<span style="color:#e6db74">&#34;[::]:50051&#34;</span>)
</span></span><span style="display:flex;"><span>        server<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;start server&#34;</span>)
</span></span><span style="display:flex;"><span>                time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">60</span><span style="color:#f92672">*</span><span style="color:#ae81ff">60</span><span style="color:#f92672">*</span><span style="color:#ae81ff">24</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">KeyboardInterrupt</span>:
</span></span><span style="display:flex;"><span>            server<span style="color:#f92672">.</span>stop(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    FileTransferServer<span style="color:#f92672">.</span>serve()
</span></span></code></pre></div><h2 id="4创建client端">4.创建client端</h2>
<p>在<code>file_server</code>目录下新建<code>client.py</code>文件，内容如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> grpc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pathlib <span style="color:#f92672">import</span> Path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> file_server <span style="color:#f92672">import</span> fileserver_pb2 <span style="color:#66d9ef">as</span> fp, fileserver_pb2_grpc <span style="color:#66d9ef">as</span> fpg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>base_path <span style="color:#f92672">=</span> Path(__file__)<span style="color:#f92672">.</span>parent
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send_file</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;上传文件
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    模拟大文件，分块发送
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    file_path <span style="color:#f92672">=</span> base_path <span style="color:#f92672">/</span> <span style="color:#e6db74">&#39;download&#39;</span> <span style="color:#f92672">/</span> <span style="color:#e6db74">&#39;download.docx&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 模拟大文件，分块读取发送</span>
</span></span><span style="display:flex;"><span>    size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1024</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(file_path, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>        start <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>            f<span style="color:#f92672">.</span>seek(start)
</span></span><span style="display:flex;"><span>            read <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read(size)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> read:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>            request <span style="color:#f92672">=</span> fp<span style="color:#f92672">.</span>RequestSend(data<span style="color:#f92672">=</span>read)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">yield</span> request
</span></span><span style="display:flex;"><span>            start <span style="color:#f92672">+=</span> size
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span>(object):
</span></span><span style="display:flex;"><span>    stub: fpg<span style="color:#f92672">.</span>FileTransferStub <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, port<span style="color:#f92672">=</span><span style="color:#ae81ff">50051</span>):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>channel <span style="color:#f92672">=</span> grpc<span style="color:#f92672">.</span>insecure_channel(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;127.0.0.1:</span><span style="color:#e6db74">{</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">connect</span>(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>stub <span style="color:#f92672">=</span> fpg<span style="color:#f92672">.</span>FileTransferStub(self<span style="color:#f92672">.</span>channel)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">close</span>(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>channel<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">download</span>(self, name: str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;send.xlsx&#39;</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;文件下载
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        会将send.xlsx文件下载到 ./file_sever/download目录
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            name: 下载文件名，默认为 send.xlsx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> fp<span style="color:#f92672">.</span>RequestFile(name<span style="color:#f92672">=</span>name)
</span></span><span style="display:flex;"><span>        response <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>stub<span style="color:#f92672">.</span>DownloadFile(r)
</span></span><span style="display:flex;"><span>        download <span style="color:#f92672">=</span> base_path <span style="color:#f92672">/</span> <span style="color:#e6db74">&#39;download&#39;</span> <span style="color:#f92672">/</span> name
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> open(download, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> response:
</span></span><span style="display:flex;"><span>                f<span style="color:#f92672">.</span>write(r<span style="color:#f92672">.</span>data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;上传文件
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        默认将上传 ./file_server/download/download.docx
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        file <span style="color:#f92672">=</span> send_file()
</span></span><span style="display:flex;"><span>        resp <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>stub<span style="color:#f92672">.</span>SendFile(file)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> resp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __enter__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>connect()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __exit__(self, exc_type, exc_val, exc_tb):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> Client() <span style="color:#66d9ef">as</span> client:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># 上传文件</span>
</span></span><span style="display:flex;"><span>        resp_status <span style="color:#f92672">=</span> client<span style="color:#f92672">.</span>send()
</span></span><span style="display:flex;"><span>        print(resp_status)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># 下载文件</span>
</span></span><span style="display:flex;"><span>        client<span style="color:#f92672">.</span>download()
</span></span></code></pre></div><h2 id="5运行服务">5.运行服务</h2>
<p>打开两个控制台窗口，cd到<code>desktop</code>目录下，分别运行</p>
<pre tabindex="0"><code class="language-pow" data-lang="pow">desktop&gt; python -m file_server.server
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>desktop&gt; python -m file_server.client
</span></span></code></pre></div><p>可以看到<code>send.xlsx</code>文件下载到了<code>file_server/download</code>目录，<code>download.docx</code>文件上传到了<code>file_server/send</code>目录。</p>
]]></content>
		</item>
		
		<item>
			<title>发布/订阅模式</title>
			<link>https://pengchuanc.github.io/posts/pub-sub-model/</link>
			<pubDate>Fri, 04 Dec 2020 18:06:42 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/pub-sub-model/</guid>
			<description>发布订阅模式比较常用，近期使用grpc也涉及到连接管理简单记录一下发布订阅模式的实现，主要使用chan来传输数据 也可以考虑使用回调函数来处理</description>
			<content type="html"><![CDATA[<p>发布订阅模式比较常用，近期使用grpc也涉及到连接管理简单记录一下发布订阅模式的实现，主要使用chan来传输数据</p>
<p>也可以考虑使用回调函数来处理publish的内容</p>
<h2 id="定义publisher">定义Publisher</h2>
<p>首先定义一个Publish的struct，主要包含Subscribers属性来管理订阅者，订阅者必须使用指针来保证数据传递</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#75715e">// Publisher 发布者
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 管理订阅者
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 发布内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Publisher</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">RWMutex</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Subscribers</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">waitGroup</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewPublisher</span>() <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Publisher</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Subscribers</span>: make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>),
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>接下来实现Publisher的基础功能</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 发布者的功能
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 添加订阅者
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) <span style="color:#a6e22e">AddSubscriber</span>(<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Lock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span>[<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Name</span>] = <span style="color:#a6e22e">s</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Unlock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;添加订阅者%s成功\n&#34;</span>, <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 删除订阅者
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) <span style="color:#a6e22e">RemoveSubscriber</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Lock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span>[<span style="color:#a6e22e">name</span>]; <span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>		delete(<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Unlock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;移除订阅者%s成功\n&#34;</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 发布内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) <span style="color:#a6e22e">Publish</span>(<span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">RLock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">RUnlock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">waitGroup</span>.<span style="color:#a6e22e">Add</span>(len(<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">d_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">msg</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">s_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">s_</span>.<span style="color:#a6e22e">Run</span>(<span style="color:#a6e22e">d_</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">waitGroup</span>.<span style="color:#a6e22e">Done</span>()
</span></span><span style="display:flex;"><span>		}()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">waitGroup</span>.<span style="color:#a6e22e">Wait</span>()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="定义subscriber">定义Subscriber</h2>
<p>订阅者主要是接受发布者推送的数据，当然也应该包含一个唯一的标识符，可采用uuid，本文简单采用一个name(string)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Subscriber</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">RWMutex</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Name</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Data</span> <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewSubscriber</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Subscriber</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">Data</span>: make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">string</span>)}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>订阅者应当实现的功能</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#75715e">// 订阅者功能
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 订阅内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>) <span style="color:#a6e22e">Subscribe</span>(<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">AddSubscriber</span>(<span style="color:#a6e22e">s</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 取消订阅
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>) <span style="color:#a6e22e">UnSubscribe</span>(<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">RemoveSubscriber</span>(<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 处理发布的内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>) <span style="color:#a6e22e">Run</span>(<span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Lock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Data</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">msg</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Unlock</span>()
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>完整代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#75715e">// demo/subscribe/publisher.go
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">package</span> <span style="color:#a6e22e">subscribe</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;sync&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Publisher 发布者
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 管理订阅者
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 发布内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Publisher</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">RWMutex</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Subscribers</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">waitGroup</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewPublisher</span>() <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Publisher</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Subscribers</span>: make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>),
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 发布者的功能
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 添加订阅者
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) <span style="color:#a6e22e">AddSubscriber</span>(<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Lock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span>[<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Name</span>] = <span style="color:#a6e22e">s</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Unlock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;添加订阅者%s成功\n&#34;</span>, <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 删除订阅者
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) <span style="color:#a6e22e">RemoveSubscriber</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Lock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span>[<span style="color:#a6e22e">name</span>]; <span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>		delete(<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Unlock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;移除订阅者%s成功\n&#34;</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 发布者事件处理 - 产生数据
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) <span style="color:#a6e22e">Update</span>(){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 发布内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) <span style="color:#a6e22e">Publish</span>(<span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">RLock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">RUnlock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">waitGroup</span>.<span style="color:#a6e22e">Add</span>(len(<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Subscribers</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">d_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">msg</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">s_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">s_</span>.<span style="color:#a6e22e">Run</span>(<span style="color:#a6e22e">d_</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">waitGroup</span>.<span style="color:#a6e22e">Done</span>()
</span></span><span style="display:flex;"><span>		}()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">waitGroup</span>.<span style="color:#a6e22e">Wait</span>()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#75715e">// demo/subscribe/subscriber.go
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">package</span> <span style="color:#a6e22e">subscribe</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;sync&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Subscriber 订阅者
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 订阅内容，等待发布者发布内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Subscriber</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">RWMutex</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Name</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Data</span> <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewSubscriber</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Subscriber</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">Data</span>: make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">string</span>)}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 订阅者功能
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 订阅内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>) <span style="color:#a6e22e">Subscribe</span>(<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">AddSubscriber</span>(<span style="color:#a6e22e">s</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 取消订阅
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>) <span style="color:#a6e22e">UnSubscribe</span>(<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Publisher</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">RemoveSubscriber</span>(<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 处理发布的内容
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Subscriber</span>) <span style="color:#a6e22e">Run</span>(<span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Lock</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Data</span> <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Unlock</span>()
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#75715e">// demo/main.go
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;time&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;demo/subscribe&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>(){
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pub</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">subscribe</span>.<span style="color:#a6e22e">Publiser</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub1</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">subscribe</span>.<span style="color:#a6e22e">Subscriber</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub2</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">subscribe</span>.<span style="color:#a6e22e">Subscriber</span>
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">pub</span> = <span style="color:#a6e22e">subscibe</span>.<span style="color:#a6e22e">NewPublisher</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub1</span> = <span style="color:#a6e22e">subscribe</span>.<span style="color:#a6e22e">NewSubscriber</span>(<span style="color:#e6db74">&#34;pub1&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub2</span> = <span style="color:#a6e22e">subscribe</span>.<span style="color:#a6e22e">NewSubscriber</span>(<span style="color:#e6db74">&#34;pub2&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub1</span>.<span style="color:#a6e22e">Subscribe</span>(<span style="color:#a6e22e">pub</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub2</span>.<span style="color:#a6e22e">Subscribe</span>(<span style="color:#a6e22e">pub</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &lt; <span style="color:#ae81ff">100</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">pub</span>.<span style="color:#a6e22e">Publish</span>(<span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span>))
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">i</span> <span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>{
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">d1</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sub1</span>.<span style="color:#a6e22e">Data</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Print</span>(<span style="color:#a6e22e">d1</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>{
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">d2</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sub2</span>.<span style="color:#a6e22e">Data</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Print</span>(<span style="color:#a6e22e">d2</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#ae81ff">10</span><span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>利用Nginx和Daphne部署Django3.x和Django channels 3.x</title>
			<link>https://pengchuanc.github.io/posts/django-channels-deploy/</link>
			<pubDate>Wed, 02 Dec 2020 18:13:44 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/django-channels-deploy/</guid>
			<description>Django在3.0正式引入asgi，部署方式与2.x略有不同 仅部署http网站 如果仅部署http网站，可采用uvicorn来进行部署，然后</description>
			<content type="html"><![CDATA[<p>Django在3.0正式引入asgi，部署方式与2.x略有不同</p>
<h2 id="仅部署http网站">仅部署http网站</h2>
<p>如果仅部署http网站，可采用uvicorn来进行部署，然后通过nginx代理地址即可</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; cd <span style="color:#f92672">[</span>your_project<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&gt; nohup uvicorn <span style="color:#f92672">[</span>your_project<span style="color:#f92672">]</span>.asgi:application --host 0.0.0.0 --port <span style="color:#ae81ff">5000</span> &gt; asgi.log &amp;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-conf" data-lang="conf"><span style="display:flex;"><span>server {
</span></span><span style="display:flex;"><span>  location <span style="color:#960050;background-color:#1e0010">/</span> {
</span></span><span style="display:flex;"><span>    proxy_pass http<span style="color:#960050;background-color:#1e0010">://</span><span style="color:#ae81ff">0.0.0.0</span><span style="color:#960050;background-color:#1e0010">:</span>5000;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="部署http和websocket">部署http和websocket</h2>
<p>Django中websocket功能主要通过<a href="https://channels.readthedocs.io/en/stable/">django-channels</a>组件实现，由于引入了ws，部署方式略有不同</p>
<p>官方推荐使用daphne部署</p>
<p>以我当前的<code>sma_management</code>项目为例，django3.x版本中，在 <code>sma_management/sma_management/</code>目录下应当有<code>asgi.py</code>文件，引入channels后，应当如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> django
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> django.core.asgi <span style="color:#f92672">import</span> get_asgi_application
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>setdefault(<span style="color:#e6db74">&#34;DJANGO_SETTINGS_MODULE&#34;</span>, <span style="color:#e6db74">&#34;sma_management.settings&#34;</span>)
</span></span><span style="display:flex;"><span>django<span style="color:#f92672">.</span>setup()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> channels.auth <span style="color:#f92672">import</span> AuthMiddlewareStack
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> channels.routing <span style="color:#f92672">import</span> ProtocolTypeRouter, URLRouter
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> investment.routing
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>application <span style="color:#f92672">=</span> ProtocolTypeRouter({
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;http&#34;</span>: get_asgi_application(),
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;websocket&#34;</span>: AuthMiddlewareStack(
</span></span><span style="display:flex;"><span>        URLRouter(
</span></span><span style="display:flex;"><span>            investment<span style="color:#f92672">.</span>routing<span style="color:#f92672">.</span>websocket_urlpatterns
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    ),
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>其中<code>django.setup()</code>命令必须在channels相关业务前引入，不然daphne启动服务会抛出错误</p>
<p>配置好<code>asgi.py</code>后，仅需在项目目录中启动shell，输入：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; nohup daphne -p <span style="color:#ae81ff">8000</span> sma_management.asgi:application &gt; daphne.log &amp;
</span></span></code></pre></div><p>http和ws服务均使用8000端口，使用Nginx代理的话，配置如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-conf" data-lang="conf"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>upstream channels-backend {
</span></span><span style="display:flex;"><span>    server localhost<span style="color:#960050;background-color:#1e0010">:</span>8000;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>server {
</span></span><span style="display:flex;"><span>  location <span style="color:#960050;background-color:#1e0010">/</span>management {
</span></span><span style="display:flex;"><span>      proxy_pass http<span style="color:#960050;background-color:#1e0010">://</span><span style="color:#ae81ff">0.0.0.0</span><span style="color:#960050;background-color:#1e0010">:</span>8000;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  location <span style="color:#960050;background-color:#1e0010">/</span>ws {
</span></span><span style="display:flex;"><span>      proxy_pass http<span style="color:#960050;background-color:#1e0010">://</span>channels-backend;
</span></span><span style="display:flex;"><span>      proxy_http_version 1.1;
</span></span><span style="display:flex;"><span>      proxy_set_header Upgrade <span style="color:#960050;background-color:#1e0010">$</span>http_upgrade;
</span></span><span style="display:flex;"><span>      proxy_set_header Connection <span style="color:#e6db74">&#34;upgrade&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      proxy_redirect <span style="color:#66d9ef">off</span>;
</span></span><span style="display:flex;"><span>      proxy_set_header Host <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#66d9ef">host</span>;
</span></span><span style="display:flex;"><span>      proxy_set_header X-Real-IP <span style="color:#960050;background-color:#1e0010">$</span>remote_addr;
</span></span><span style="display:flex;"><span>      proxy_set_header X-Forwarded-For <span style="color:#960050;background-color:#1e0010">$</span>proxy_add_x_forwarded_for;
</span></span><span style="display:flex;"><span>      proxy_set_header X-Forwarded-Host <span style="color:#960050;background-color:#1e0010">$</span>server_name;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这样便可以使用 http://0.0.0.0/management/ 访问http服务，使用 ws://0.0.0.0/ws/ 访问ws服务</p>
]]></content>
		</item>
		
		<item>
			<title>记录GRPC在各种语言下的编译方式</title>
			<link>https://pengchuanc.github.io/posts/rpc-complie/</link>
			<pubDate>Wed, 02 Dec 2020 17:42:12 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/rpc-complie/</guid>
			<description>Python Python中的编译方式 假设当前工作目录为protobuf，待编译文件为hello.proto &amp;gt; cd protobuf &amp;gt; python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. hello.proto Go Golang中的编译</description>
			<content type="html"><![CDATA[<h1 id="python">Python</h1>
<h3 id="python中的编译方式">Python中的编译方式</h3>
<p>假设当前工作目录为<code>protobuf</code>，待编译文件为<code>hello.proto</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; cd protobuf
</span></span><span style="display:flex;"><span>&gt; python -m grpc_tools.protoc --python_out<span style="color:#f92672">=</span>. --grpc_python_out<span style="color:#f92672">=</span>. -I. hello.proto
</span></span></code></pre></div><h1 id="go">Go</h1>
<h3 id="golang中的编译方式">Golang中的编译方式</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; cd protobuf
</span></span><span style="display:flex;"><span>&gt; protoc --go_out<span style="color:#f92672">=</span>plugins<span style="color:#f92672">=</span>grpc:. hello.proto
</span></span></code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
