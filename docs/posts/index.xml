<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>文章列表 on Learn to Code</title>
		<link>https://pengchuanc.github.io/posts/</link>
		<description>Recent content in 文章列表 on Learn to Code</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 02 Dec 2020 18:13:44 +0800</lastBuildDate>
		<atom:link href="https://pengchuanc.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>利用Nginx和Daphne部署Django3.x和Django channels 3.x</title>
			<link>https://pengchuanc.github.io/posts/django-channels-deploy/</link>
			<pubDate>Wed, 02 Dec 2020 18:13:44 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/django-channels-deploy/</guid>
			<description>Django在3.0正式引入asgi，部署方式与2.x略有不同 仅部署http网站 如果仅部署http网站，可采用uvicorn来进行部署，然后</description>
			<content type="html"><![CDATA[<p>Django在3.0正式引入asgi，部署方式与2.x略有不同</p>
<h2 id="仅部署http网站">仅部署http网站</h2>
<p>如果仅部署http网站，可采用uvicorn来进行部署，然后通过nginx代理地址即可</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> <span class="o">[</span>your_project<span class="o">]</span>
&gt; nohup uvicorn <span class="o">[</span>your_project<span class="o">]</span>.asgi:application --host 0.0.0.0 --port <span class="m">5000</span> &gt; asgi.log <span class="p">&amp;</span>
</code></pre></div><pre><code class="language-conf" data-lang="conf">server {
  location / {
    proxy_pass http://0.0.0.0:5000;
  }
}
</code></pre><h2 id="部署http和websocket">部署http和websocket</h2>
<p>Django中websocket功能主要通过<a href="https://channels.readthedocs.io/en/stable/">django-channels</a>组件实现，由于引入了ws，部署方式略有不同</p>
<p>官方推荐使用daphne部署</p>
<p>以我当前的<code>sma_management</code>项目为例，django3.x版本中，在 <code>sma_management/sma_management/</code>目录下应当有<code>asgi.py</code>文件，引入channels后，应当如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">django</span>
<span class="kn">from</span> <span class="nn">django.core.asgi</span> <span class="kn">import</span> <span class="n">get_asgi_application</span>


<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s2">&#34;DJANGO_SETTINGS_MODULE&#34;</span><span class="p">,</span> <span class="s2">&#34;sma_management.settings&#34;</span><span class="p">)</span>
<span class="n">django</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span>


<span class="kn">from</span> <span class="nn">channels.auth</span> <span class="kn">import</span> <span class="n">AuthMiddlewareStack</span>
<span class="kn">from</span> <span class="nn">channels.routing</span> <span class="kn">import</span> <span class="n">ProtocolTypeRouter</span><span class="p">,</span> <span class="n">URLRouter</span>
<span class="kn">import</span> <span class="nn">investment.routing</span>


<span class="n">application</span> <span class="o">=</span> <span class="n">ProtocolTypeRouter</span><span class="p">({</span>
  <span class="s2">&#34;http&#34;</span><span class="p">:</span> <span class="n">get_asgi_application</span><span class="p">(),</span>
  <span class="s2">&#34;websocket&#34;</span><span class="p">:</span> <span class="n">AuthMiddlewareStack</span><span class="p">(</span>
        <span class="n">URLRouter</span><span class="p">(</span>
            <span class="n">investment</span><span class="o">.</span><span class="n">routing</span><span class="o">.</span><span class="n">websocket_urlpatterns</span>
        <span class="p">)</span>
    <span class="p">),</span>
<span class="p">})</span>
</code></pre></div><p>其中<code>django.setup()</code>命令必须在channels相关业务前引入，不然daphne启动服务会抛出错误</p>
<p>配置好<code>asgi.py</code>后，仅需在项目目录中启动shell，输入：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; nohup daphne -p <span class="m">8000</span> sma_management.asgi:application &gt; daphne.log <span class="p">&amp;</span>
</code></pre></div><p>http和ws服务均使用8000端口，使用Nginx代理的话，配置如下：</p>
<pre><code class="language-conf" data-lang="conf">
upstream channels-backend {
    server localhost:8000;
}

server {
  location /management {
      proxy_pass http://0.0.0.0:8000;
  }

  location /ws {
      proxy_pass http://channels-backend;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection &quot;upgrade&quot;;

      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $server_name;
  }
}

</code></pre><p>这样便可以使用 http://0.0.0.0/management/ 访问http服务，使用 ws://0.0.0.0/ws/ 访问ws服务</p>
]]></content>
		</item>
		
		<item>
			<title>记录GRPC在各种语言下的编译方式</title>
			<link>https://pengchuanc.github.io/posts/rpc-complie/</link>
			<pubDate>Wed, 02 Dec 2020 17:42:12 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/rpc-complie/</guid>
			<description>Python Python中的编译方式 假设当前工作目录为protobuf，待编译文件为hello.proto &amp;gt; cd protobuf &amp;gt; python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. hello.proto Go Golang中的编译</description>
			<content type="html"><![CDATA[<h1 id="python">Python</h1>
<h3 id="python中的编译方式">Python中的编译方式</h3>
<p>假设当前工作目录为<code>protobuf</code>，待编译文件为<code>hello.proto</code></p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> protobuf
&gt; python -m grpc_tools.protoc --python_out<span class="o">=</span>. --grpc_python_out<span class="o">=</span>. -I. hello.proto
</code></pre></div><h1 id="go">Go</h1>
<h3 id="golang中的编译方式">Golang中的编译方式</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> protobuf
&gt; protoc --go_out<span class="o">=</span><span class="nv">plugins</span><span class="o">=</span>grpc:. hello.proto
</code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
