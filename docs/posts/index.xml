<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>文章列表 on Learn to Code</title>
		<link>https://pengchuanc.github.io/posts/</link>
		<description>Recent content in 文章列表 on Learn to Code</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 18 Nov 2021 15:36:45 +0800</lastBuildDate>
		<atom:link href="https://pengchuanc.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>【FOF】基金筛选系统介绍</title>
			<link>https://pengchuanc.github.io/posts/introduction-fundscreen/</link>
			<pubDate>Thu, 18 Nov 2021 15:36:45 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/introduction-fundscreen/</guid>
			<description>系统介绍 基金筛选系统主要包含6个模块，分别为 基金市场整体统计 基金挑选 基金看板 基金分类筛选入池 ETF每日跟踪 入池基金管理 市场热点资讯 基金详细信</description>
			<content type="html"><![CDATA[<h1 id="系统介绍">系统介绍</h1>
<p>基金筛选系统主要包含6个模块，分别为</p>
<ol>
<li>基金市场整体统计</li>
<li>基金挑选</li>
<li>基金看板</li>
<li>基金分类筛选入池</li>
<li>ETF每日跟踪</li>
<li>入池基金管理</li>
<li>市场热点资讯</li>
<li>基金详细信息</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Centos7 编译安装Nginx-1.21.3版本呢和Python-3.10</title>
			<link>https://pengchuanc.github.io/posts/compile_install_nginx_and_python/</link>
			<pubDate>Fri, 22 Oct 2021 10:42:05 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/compile_install_nginx_and_python/</guid>
			<description>一、起因 由于生产网段与测试网段隔离，但测试网段也需要数据来进行开发，于是考虑用GRPC来中转数据，并用Nginx来代理端口，需要用到Ngin</description>
			<content type="html"><![CDATA[<h1 id="一起因">一、起因</h1>
<p>由于生产网段与测试网段隔离，但测试网段也需要数据来进行开发，于是考虑用GRPC来中转数据，并用Nginx来代理端口，需要用到Nginx的ssl相关插件，刚好Python-3.10发布，也需要升级openssl-1.1.1及以上，所以不妨将Nginx和Python都升级了。</p>
<h1 id="二安装">二、安装</h1>
<h2 id="1安装openssl-111l">1.安装openssl-1.1.1l</h2>
<h3 id="11-安装依赖">1.1 安装依赖</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel</span>
</code></pre></div><h3 id="12-下载并安装">1.2 下载并安装</h3>
<p>下载并解压</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># cd ~/Downloads</span>
<span class="c1"># wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz --no-check-certificate</span>
<span class="c1"># tar -xf openssl-1.1.1l.tar.gz &amp;&amp; cd openssl-1.1.1l</span>
</code></pre></div><p>开始编译安装</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># ./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl shared zlib</span>
<span class="c1"># make</span>
<span class="c1"># make test</span>
<span class="c1"># make install</span>
</code></pre></div><h3 id="13-软链">1.3 软链</h3>
<p>备份</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># mv /usr/bin/openssl /usr/bin/openssl.old</span>
<span class="c1"># mv /usr/lib64/openssl /usr/lib64/openssl.old</span>
<span class="c1"># mv /usr/lib64/libssl.so /usr/lib64/libssl.so.old</span>
</code></pre></div><p>重新软链</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span>
<span class="c1"># ln -s /usr/local/openssl/include/openssl /usr/include/openssl</span>
<span class="c1"># ln -s /usr/local/openssl/lib/libssl.so /usr/lib64/libssl.so</span>
<span class="c1"># echo &#34;/usr/local/openssl/lib&#34; &gt;&gt; /etc/ld.so.conf</span>
<span class="c1"># ldconfig -v </span>
</code></pre></div><h2 id="2安装python-310">2.安装Python 3.10</h2>
<h3 id="21-下载并解压">2.1 下载并解压</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># cd ~/Downloads</span>
<span class="c1"># wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgz</span>
<span class="c1"># tar -xf Python-3.10.0.tgz &amp;&amp; cd Python-3.10.0</span>
</code></pre></div><h3 id="22-编译安装">2.2 编译安装</h3>
<p>这里遇到了个大坑，由于Python 3.10刚出，安装资料也比较少，用了很久才把ssl模块编译进去，后来根据编译提示才知道，主要是在编译时没加<code>--with-openssl-rpath=auto</code>命令，导致ssl模块编译不进去。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># ./configure --prefix=/usr/local/python3 --with-ssl-default-suites=openssl  --with-openssl=/usr/local/openssl --with-openssl-rpath=auto</span>
<span class="c1"># make</span>
<span class="c1"># make install</span>
</code></pre></div><p>重新链接</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># mv mv /usr/bin/python3 /usr/bin/python3.old</span>
<span class="c1"># ln -s /usr/local/python3/bin/python3 /usr/bin/python3 </span>
<span class="c1"># ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 </span>
</code></pre></div><h2 id="3安装nginx-1213">3.安装Nginx 1.21.3</h2>
<h3 id="31-下载并解压">3.1 下载并解压</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># wget http://nginx.org/download/nginx-1.21.3.tar.gz --no-check-certificate</span>
<span class="c1"># tar -xf nginx-1.21.3.tar.gz &amp;&amp; cd nginx-1.21.3</span>
</code></pre></div><h3 id="32-编译安装">3.2 编译安装</h3>
<p>这里在编译时又遇到问题，指定的ssl位置老是报出缺失文件错误，需要把之前安装的openssl拷贝到指定位置才行。</p>
<p>拷贝openssl</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># cp -r /usr/local/openssl /usr/local/.openssl</span>
</code></pre></div><p>编译安装</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#39; --with-ld-opt=&#39;-Wl,-z,relro -Wl,-z,now -pie&#39; --with-openssl=/usr/local</span>
</code></pre></div><p>上述指令中部分内容可自行更改，比如log位置，启动用户，pid位置，二进制文件位置等，但要代理grpc，<code>--with-http_v2_module</code>和<code>--with-http_ssl_module</code>指令是必须的。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># make</span>
<span class="c1"># make install</span>
</code></pre></div><p>查看安装结果</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># nginx -V</span>
</code></pre></div><p>结果应当如下</p>
<pre><code>nginx version: nginx/1.21.3
built by gcc 9.3.0 (GCC) 
built with OpenSSL 1.1.1l  24 Aug 2021
TLS SNI support enabled
configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -pie' --with-openssl=/usr/local
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Mariadb意外崩溃数据恢复</title>
			<link>https://pengchuanc.github.io/posts/mariadb-recovery/</link>
			<pubDate>Fri, 03 Sep 2021 11:05:55 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/mariadb-recovery/</guid>
			<description>1.事故还原 优于同时在多个终端执行select、insert和delete操作，数据库意外崩溃 2.数据恢复 2.1 尝试重新启动 执行service mysqld</description>
			<content type="html"><![CDATA[<h1 id="1事故还原">1.事故还原</h1>
<p>优于同时在多个终端执行select、insert和delete操作，数据库意外崩溃</p>
<h1 id="2数据恢复">2.数据恢复</h1>
<h2 id="21-尝试重新启动">2.1 尝试重新启动</h2>
<p>执行<code>service mysqld restart</code>发现数据库报错，无法启动</p>
<h2 id="22-进入恢复模式">2.2 进入恢复模式</h2>
<p>当发现数据无法启动后，尝试进入恢复模式，<code>vi /etc/my.cnf</code></p>
<p>在配置文件中[mysqld]部分增加以下内容</p>
<pre><code class="language-cnf" data-lang="cnf">[mysqld]
innodb_force_recovery=1
innodb_purge_thread=0
</code></pre><p>然后执行<code>service mysqld restart</code>重启数据库，如果继续失败则将<code>innodb_force_recovery</code>的值修改为2，其中<code>innodb_force_recovery</code>分为0-6这七个等级，可用逐个尝试，直至数据重新启动</p>
<h2 id="23-备份数据">2.3 备份数据</h2>
<p>使用 <code>mysqldump</code>备份数据库</p>
<p>以我的情况为例</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; mysqldump -uroot -p --databases am_sma_third &gt; /home/sma/backup/am_sma_third_20210903.sql
</code></pre></div><h2 id="24-初始化数据库">2.4 初始化数据库</h2>
<p>初始化之前，为防止意外，将旧的数据库文件备份一下，文件位置可以从配置文件<code>my.cnf</code>查看</p>
<pre><code class="language-cnf" data-lang="cnf">[mysqld]
datadir=/home/mysql/datadir
socket=/home/mysql/datadir/mysql.sock
</code></pre><p>其中datadir便是文件位置，进行备份</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> /home/mysql
&gt; mkdir datadirbak <span class="o">&amp;&amp;</span> mkdir datadirbak/20210903
&gt; mv datadir/* datadirbak/20210903/
</code></pre></div><p>备份完成后，初始化数据库</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; mysql_install_db --user<span class="o">=</span>mysql --basedir<span class="o">=</span>/usr --datadir<span class="o">=</span>/home/mysql/datadir/
</code></pre></div><p>对文件夹重新授权，防止意外</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; chown -R mysql:mysql /home/mysql 
</code></pre></div><p>注释掉恢复模式</p>
<pre><code class="language-cnf" data-lang="cnf">[mysqld]
# innodb_force_recovery=1
# innodb_purge_thread=0
</code></pre><p>重启数据库</p>
<pre><code>&gt; service mysqld restart
</code></pre><h2 id="25-恢复数据">2.5 恢复数据</h2>
<p>登陆到数据库</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; mysql -uroot -p
</code></pre></div><p>利用<code>source</code>命令恢复数据，以我的<strong>sm_sma_third</strong>库为例</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">create</span> <span class="k">database</span> <span class="n">sm_sma_third</span><span class="p">;</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="n">source</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">sma</span><span class="o">/</span><span class="n">backup</span><span class="o">/</span><span class="n">sm_sma_third_20210903</span><span class="p">.</span><span class="k">sql</span>
</code></pre></div><p>等待恢复完成，重新对用户进行授权即可。</p>
]]></content>
		</item>
		
		<item>
			<title>Go 1.16 新特性embed在gin中使用</title>
			<link>https://pengchuanc.github.io/posts/go-embed/</link>
			<pubDate>Fri, 02 Jul 2021 15:14:15 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/go-embed/</guid>
			<description>在golang1.16加入之前，编译出来的二进制文件默认是不包括非代码文件的，那么开发一个web网站，则需要将html模板文件、配置文件和静</description>
			<content type="html"><![CDATA[<blockquote>
<p>在golang1.16加入之前，编译出来的二进制文件默认是不包括非代码文件的，那么开发一个web网站，则需要将html模板文件、配置文件和静态资源文件(css、js)始终按照开发时的目录结构放在一起，部署起来很麻烦。</p>
</blockquote>
<p>embed是在Go 1.16中新加包。它通过<code>//go:embed</code>指令，可以在编译阶段将静态资源文件打包进编译好的程序中，并提供访问这些文件的能力。</p>
<h3 id="1使用gin框架构建一个简单的静态资源服务器">1.使用gin框架构建一个简单的静态资源服务器</h3>
<p>使用gin构建一个web服务非常简单，使用embed加入静态资源也非常简单，代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;embed&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
	<span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="c1">//go:embed statics/* templates/*
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">Assets</span> <span class="nx">embed</span><span class="p">.</span><span class="nx">FS</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">router</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
	<span class="nx">router</span><span class="p">.</span><span class="nf">StaticFS</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nf">FS</span><span class="p">(</span><span class="nx">Assets</span><span class="p">))</span>

	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">router</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;0.0.0.0:5000&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>文件目录结构如下：</p>
<p><img src="/images/gin-embed/tree1.png" alt="目录1"></p>
<p>启动之后我们访问<code>http://127.0.0.1:5000</code>即可看到如下界面：</p>
<p><img src="/images/gin-embed/web1.png" alt="初始界面"></p>
<h3 id="2在模板语言中使用静态资源">2.在模板语言中使用静态资源</h3>
<p>加入embed之后，gin使用模板引擎主要通过自带的方法<em>SetHTMLTemplate</em>来加载从embed中解析的模板文件，
接下来对项目结构进行以下修改以避免路由冲突，然后来渲染一个简单的页面。</p>
<p>此时项目目录结构如下：</p>
<p><img src="/images/gin-embed/tree2.png" alt="目录2"></p>
<p>新增的<code>statics.go</code>主要是为了加载静态资源时保证路由的名称合理，其内容如下</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">statics</span>

<span class="kn">import</span> <span class="s">&#34;embed&#34;</span>

<span class="c1">//go:embed css/* js/*
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">Statics</span> <span class="nx">embed</span><span class="p">.</span><span class="nx">FS</span>
</code></pre></div><p><code>main.go</code>文件内容修改后为：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;embed&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;gin_embed/statics&#34;</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
	<span class="s">&#34;html/template&#34;</span>
	<span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="c1">//go:embed templates/*
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">Templates</span> <span class="nx">embed</span><span class="p">.</span><span class="nx">FS</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">router</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
	<span class="nx">router</span><span class="p">.</span><span class="nf">StaticFS</span><span class="p">(</span><span class="s">&#34;/statics&#34;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nf">FS</span><span class="p">(</span><span class="nx">statics</span><span class="p">.</span><span class="nx">Statics</span><span class="p">))</span>
	<span class="nx">tmpl</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">ParseFS</span><span class="p">(</span><span class="nx">Templates</span><span class="p">,</span> <span class="s">&#34;templates/*&#34;</span><span class="p">)</span>

	<span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/layout&#34;</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span>
	<span class="nx">router</span><span class="p">.</span><span class="nf">SetHTMLTemplate</span><span class="p">(</span><span class="nx">tmpl</span><span class="p">)</span>

	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">router</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;0.0.0.0:5000&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">index</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;layouts.tmpl&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;title&#34;</span><span class="p">:</span> <span class="s">&#34;布局页面&#34;</span><span class="p">})</span>
<span class="p">}</span>

</code></pre></div><p><code>layouts.tmpl</code>文件内容为：</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh-CN&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{.title}}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/statics/css/semantic.css&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/css&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/statics/js/jquery-3.6.0.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/statics/js/semantic.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;ui secondary pointing menu&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;first&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item first-menu-item active&#34;</span><span class="p">&gt;</span>
        第一页
    <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;second&#34;</span><span class="p">&gt;</span>
        第二页
    <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;ui container&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>我是基础页面<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;ui button primary&#34;</span><span class="p">&gt;</span>按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>此时进入<code>http://127.0.0.1:/5000/layouts</code>我们将能看到：</p>
<p><img src="/images/gin-embed/web2.png" alt="简单界面"></p>
<p>到此，加载静态资源和简单的模板渲染就可以实现了。</p>
<h3 id="3多模板渲染">3.多模板渲染</h3>
<p>gin本身是不支持多模板渲染的，要进行多模板渲染，可以查看<a href="https://github.com/gin-contrib/multitemplate">示例代码</a></p>
<p>但在引入embed过后，我们需要对官方示例做一些调整来保证正常运行。</p>
<p>首先在<em>templates/<em>文件目录下新建两个文件</em>first.tmpl</em>、<em>second.tmpl</em>,
内容分别如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">{{/*first.tmpl*/}}

{{template &#34;layouts&#34; .}}
{{define &#34;content&#34;}}
<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>我是第一页<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
{{end}}
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">{{/*second.tmpl*/}}

{{template &#34;layouts&#34; .}}
{{define &#34;content&#34;}}
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>我是第二页<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
{{end}}
</code></pre></div><p>修改<strong>layouts.tmpl</strong>,加入block块来实现继承</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh-CN&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{.title}}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/statics/css/semantic.css&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/css&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/statics/js/jquery-3.6.0.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/statics/js/semantic.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;ui secondary pointing menu&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;first&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item first-menu-item active&#34;</span><span class="p">&gt;</span>
        第一页
    <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;second&#34;</span><span class="p">&gt;</span>
        第二页
    <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;ui container&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>我是基础页面<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;ui button primary&#34;</span><span class="p">&gt;</span>按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    {{block &#34;content&#34; .}}{{end}}
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p><strong>main.go</strong>修改如下</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;embed&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;gin_embed/statics&#34;</span>
	<span class="s">&#34;github.com/gin-contrib/multitemplate&#34;</span>
	<span class="s">&#34;github.com/gin-gonic/gin&#34;</span>
	<span class="s">&#34;html/template&#34;</span>
	<span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="c1">//go:embed templates/*
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">Templates</span> <span class="nx">embed</span><span class="p">.</span><span class="nx">FS</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">router</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">Default</span><span class="p">()</span>
	<span class="nx">router</span><span class="p">.</span><span class="nf">StaticFS</span><span class="p">(</span><span class="s">&#34;/statics&#34;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nf">FS</span><span class="p">(</span><span class="nx">statics</span><span class="p">.</span><span class="nx">Statics</span><span class="p">))</span>

	<span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/first&#34;</span><span class="p">,</span> <span class="nx">first</span><span class="p">)</span>
	<span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/second&#34;</span><span class="p">,</span> <span class="nx">second</span><span class="p">)</span>
	<span class="nx">router</span><span class="p">.</span><span class="nx">HTMLRender</span> <span class="p">=</span> <span class="nf">CreateMyRender</span><span class="p">()</span>

	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">router</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;0.0.0.0:5000&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
<span class="p">}</span>


<span class="kd">type</span> <span class="nx">Render</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">render</span> <span class="nx">multitemplate</span><span class="p">.</span><span class="nx">Render</span>
	<span class="nx">assets</span> <span class="nx">embed</span><span class="p">.</span><span class="nx">FS</span>
<span class="p">}</span>


<span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Render</span><span class="p">)</span> <span class="nf">AddFromEmbed</span> <span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">patterns</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">tmpl</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">ParseFS</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">assets</span><span class="p">,</span> <span class="nx">patterns</span><span class="o">...</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">r</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">tmpl</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">CreateMyRender</span><span class="p">()</span> <span class="nx">multitemplate</span><span class="p">.</span><span class="nx">Renderer</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">render</span> <span class="nx">Render</span>
	<span class="nx">render</span> <span class="p">=</span> <span class="nx">Render</span><span class="p">{</span>
		<span class="nx">render</span><span class="p">:</span> <span class="nx">multitemplate</span><span class="p">.</span><span class="nf">New</span><span class="p">(),</span>
		<span class="nx">assets</span><span class="p">:</span> <span class="nx">Templates</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="nx">render</span><span class="p">.</span><span class="nf">AddFromEmbed</span><span class="p">(</span><span class="s">&#34;layouts&#34;</span><span class="p">,</span> <span class="s">&#34;templates/layouts.tmpl&#34;</span><span class="p">)</span>
	<span class="nx">render</span><span class="p">.</span><span class="nf">AddFromEmbed</span><span class="p">(</span><span class="s">&#34;first&#34;</span><span class="p">,</span> <span class="s">&#34;templates/layouts.tmpl&#34;</span><span class="p">,</span> <span class="s">&#34;templates/first.tmpl&#34;</span><span class="p">)</span>
	<span class="nx">render</span><span class="p">.</span><span class="nf">AddFromEmbed</span><span class="p">(</span><span class="s">&#34;second&#34;</span><span class="p">,</span> <span class="s">&#34;templates/layouts.tmpl&#34;</span><span class="p">,</span> <span class="s">&#34;templates/second.tmpl&#34;</span><span class="p">)</span>

	<span class="k">return</span> <span class="nx">render</span><span class="p">.</span><span class="nx">render</span>
<span class="p">}</span>


<span class="kd">func</span> <span class="nf">first</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;first&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;title&#34;</span><span class="p">:</span> <span class="s">&#34;第一页&#34;</span><span class="p">})</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">second</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">ctx</span><span class="p">.</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&#34;second&#34;</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span><span class="s">&#34;title&#34;</span><span class="p">:</span> <span class="s">&#34;第二页&#34;</span><span class="p">})</span>
<span class="p">}</span>

</code></pre></div><p>再次启动后进入<code>http://127.0.0.1/first</code>后界面如下：</p>
<p><img src="/images/gin-embed/web3.png" alt="界面3"></p>
<p>最终项目结构如下：</p>
<p><img src="/images/gin-embed/tree3.png" alt="目录3"></p>
<p>完整代码可前往我的<a href="https://github.com/PengchuanC/pengchuanc.github.io/tree/main/src">GitHub</a>项目查看.</p>
]]></content>
		</item>
		
		<item>
			<title>【FOF】野村基金筛选系统第二版</title>
			<link>https://pengchuanc.github.io/posts/fund-screen-system/</link>
			<pubDate>Thu, 01 Jul 2021 17:06:30 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/fund-screen-system/</guid>
			<description>在第一版的基础上优化了布局，重新设计了基金详情页的界面，并且新增了基金筛选功能和基金看板功能、ETF资金流向统计等功能 开发框架升级到vue3</description>
			<content type="html"><![CDATA[<h1 id="heading"></h1>
<blockquote>
<p>在第一版的基础上优化了布局，重新设计了基金详情页的界面，并且新增了基金筛选功能和基金看板功能、ETF资金流向统计等功能</p>
</blockquote>
<h1 id="开发框架升级到vue3">开发框架升级到vue3</h1>
<ol>
<li>
<p>开发框架从vue2+view design更改为vue3+element plus，提供更好的性能和交互体验。</p>
</li>
<li>
<p>使用<a href="https://www.tslang.cn/">typescript</a>开发。</p>
</li>
<li>
<p>使用vite，保证快速冷启动和即时热更新，以及真正的按需编译。</p>
</li>
</ol>
<h1 id="性能优化">性能优化</h1>
<p>性能优化除前端改进外，后端框架也进行重构：</p>
<ol>
<li>基金筛选和基金池构建部分完全重构；</li>
<li>数据用量较大的地方使用redis缓存数据；</li>
<li>部分接口进行异步改造，避免界面堵塞；</li>
<li>后端数据同步程序进行多线程改造。</li>
</ol>
<h1 id="界面展示">界面展示</h1>
<h2 id="首页">首页</h2>
<p><img src="/images/fund/home.png" alt="home"></p>
<h2 id="基金筛选">基金筛选</h2>
<p><img src="/images/fund/cart.png" alt="screen"></p>
<h2 id="基金看板">基金看板</h2>
<p><img src="/images/fund/dashboard1.png" alt="dashboard"></p>
<p><img src="/images/fund/dashboard2.png" alt="dashboard-expanded"></p>
<h2 id="热点新闻">热点新闻</h2>
<p><img src="/images/fund/news.png" alt="news"></p>
<h2 id="个基信息">个基信息</h2>
<p><img src="/images/fund/info1.png" alt="outlook"></p>
<p><img src="/images/fund/info3.png" alt="risk"></p>
<p><img src="/images/fund/info2.png" alt="asset-allocate"></p>
<h2 id="etf资金流向">ETF资金流向</h2>
<p><img src="/images/fund/etf1.png" alt="etf-outlook"></p>
<p><img src="/images/fund/etf2.png" alt="by-category"></p>
<p><img src="/images/fund/etf3.png" alt="recent"></p>
<p>如果觉得还不错，可以去<a href="https://github.com/PengchuanC/fund_vue3">项目首页</a>给我一个star！</p>
]]></content>
		</item>
		
		<item>
			<title>Vue3解决数组改变界面没有重新刷新的问题</title>
			<link>https://pengchuanc.github.io/posts/vue_force_update/</link>
			<pubDate>Wed, 19 May 2021 10:07:04 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/vue_force_update/</guid>
			<description>解决方法 在使用vue3或vue2时，时常遇到数组或对象更新，但在列表渲染的UI却没有随数据改变而刷新，这是由于 JavaScript 的限制，Vue 不能检测数组的</description>
			<content type="html"><![CDATA[<h3 id="解决方法">解决方法</h3>
<p>在使用vue3或vue2时，时常遇到数组或对象更新，但在列表渲染的UI却没有随数据改变而刷新，这是由于 JavaScript 的限制，Vue 不能检测数组的变动，如果要更新数组，可以采用<code>push</code>、<code>splice</code>、<code>concat</code>等方法，对象可以使用<code>assign</code>方法，如果以上方法不生效，可以强制刷新页面，主要是通过修改列表渲染的<code>key</code>来实现，vue在修改<code>key</code>时，会强制刷新页面。</p>
<h4 id="1简单解决">1.简单解决</h4>
<div class="highlight"><pre class="chroma"><code class="language-vue" data-lang="vue"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">div</span> <span class="nt">:key</span><span class="s">=&#34;state.updateKey&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">...</span>
    	<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">javascript</span><span class="p">&gt;</span>
    <span class="kr">import</span> <span class="p">...</span>
    
	<span class="kr">export</span> <span class="k">default</span><span class="p">({</span>
    	<span class="nx">setup</span><span class="p">(){</span>
    		<span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">reactive</span><span class="p">({</span>
    			<span class="nx">updateKey</span><span class="o">:</span> <span class="mi">0</span>
    		<span class="p">})</span>
    	<span class="p">}</span>
    
    	<span class="kr">const</span> <span class="nx">updateArray</span> <span class="o">=</span> <span class="p">()=&gt;{</span>
    		<span class="p">...</span>
    		<span class="nx">state</span><span class="p">.</span><span class="nx">updateKey</span> <span class="o">++</span>
    	<span class="p">}</span>
    	<span class="k">return</span> <span class="p">{</span> <span class="nx">state</span> <span class="p">}</span>
    <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">javascript</span><span class="p">&gt;</span>
</code></pre></div><h4 id="2复杂方式">2.复杂方式</h4>
<p>在列表渲染时保证每一个tag的<code>key</code>是唯一的，也就是不要直接使用<code>index</code>作为<code>key</code>，这样array变化后，<code>key</code>也会变动，页面自然就刷新了。</p>
]]></content>
		</item>
		
		<item>
			<title>Python利用Consul实现服务发现</title>
			<link>https://pengchuanc.github.io/posts/consul/</link>
			<pubDate>Fri, 23 Apr 2021 14:17:25 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/consul/</guid>
			<description>1.背景 由于基金筛选系统和组合管理系统间存在一些互相需要使用到的基础数据，但又不想重复创建数据库表单和同步数据，因此在两个项目中使用了grp</description>
			<content type="html"><![CDATA[<h1 id="1背景">1.背景</h1>
<p>由于基金筛选系统和组合管理系统间存在一些互相需要使用到的基础数据，但又不想重复创建数据库表单和同步数据，因此在两个项目中使用了grpc来实现数据调用；早期实现的grpc版本中直接使用对方的IP和端口，每次调整或部署到其他地方都需要修改代码，因此考虑使用服务注册和发现来解决这个问题。</p>
<p>对比了<strong>etcd</strong>和<strong>consul</strong>两个方案，由于后端使用的语言是python，而etcd的版本比较多，导致相关的库也需要对应版本，使用起来比较麻烦，因此最终使用consul和对应的库<code>python-consul</code>。</p>
<h1 id="2安装与启动">2.安装与启动</h1>
<h2 id="21安装">2.1安装</h2>
<p>直接前往 <a href="https://www.consul.io/">Consul by HashiCorp</a> 官网下载对应系统的可执行文件即可，以Linux为例</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span>  /home/downloads
$ mkdir consul <span class="o">&amp;&amp;</span> <span class="nb">cd</span> consul
$ wget https://releases.hashicorp.com/consul/1.9.5/consul_1.9.5_linux_amd64.zip
$ unzip consul_1.9.5_linux_amd64.zip
</code></pre></div><h2 id="22启动">2.2启动</h2>
<p>以刚刚下载的文件为例：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ ./consul agent -server -bootstrap-expect <span class="m">1</span> -data-dir<span class="o">=</span>/tmp/consul -node<span class="o">=</span>n1 -bind<span class="o">=</span>127.0.0.1 -client<span class="o">=</span>0.0.0.0 -ui
</code></pre></div><p>默认使用端口<code>8500</code>，在浏览器中输入服务器<code>{ip}:8500</code>即可通过web查看注册的服务了，当然目前只有一个默认的健康检测服务。</p>
<p><img src="/images/consul-start.png" alt="启动页面"></p>
<h1 id="3在python中使用">3.在Python中使用</h1>
<p>首先需要安装<code>python-consul</code>库：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ pip3 install python-consul
</code></pre></div><p>简单示例：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#test.py</span>
<span class="kn">import</span> <span class="nn">consul</span>


<span class="k">class</span> <span class="nc">Consul</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s1">&#39;10.170.139.10&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8500</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_consul</span> <span class="o">=</span> <span class="n">consul</span><span class="o">.</span><span class="n">Consul</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;注册服务&#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_consul</span><span class="o">.</span><span class="n">agent</span><span class="o">.</span><span class="n">service</span><span class="o">.</span><span class="n">register</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">service_id</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">address</span><span class="o">=</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">,</span>
            <span class="n">check</span><span class="o">=</span><span class="n">consul</span><span class="o">.</span><span class="n">Check</span><span class="p">()</span><span class="o">.</span><span class="n">tcp</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">,</span> <span class="n">interval</span><span class="o">=</span><span class="s1">&#39;5s&#39;</span><span class="p">,</span>
                                     <span class="n">timeout</span><span class="o">=</span><span class="s1">&#39;30s&#39;</span><span class="p">,</span> <span class="n">deregister</span><span class="o">=</span><span class="s1">&#39;30s&#39;</span><span class="p">)</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;发现服务&#34;&#34;&#34;</span>
        <span class="n">services</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_consul</span><span class="o">.</span><span class="n">agent</span><span class="o">.</span><span class="n">services</span><span class="p">()</span>
        <span class="n">server</span> <span class="o">=</span> <span class="n">services</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">server</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">False</span>
        <span class="n">addr</span> <span class="o">=</span> <span class="n">server</span><span class="p">[</span><span class="s1">&#39;Address&#39;</span><span class="p">]</span>
        <span class="n">port</span> <span class="o">=</span> <span class="n">server</span><span class="p">[</span><span class="s1">&#39;Port&#39;</span><span class="p">]</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="bp">True</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">Consul</span><span class="p">()</span>
    <span class="n">c</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s1">&#39;fund_filter_django&#39;</span><span class="p">,</span> <span class="s1">&#39;10.170.139.10&#39;</span><span class="p">,</span> <span class="mi">50051</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;fund_filter_django&#39;</span><span class="p">))</span>

</code></pre></div><p>执行文件可以看到：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ python3 test.py
<span class="o">((</span><span class="s1">&#39;10.170.139.10&#39;</span>, 50051<span class="o">)</span>, True<span class="o">)</span>
</code></pre></div><p>查看web页面可以看到：</p>
<p><img src="/images/consul-register.png" alt="注册服务"></p>
]]></content>
		</item>
		
		<item>
			<title>MariaDB 升级后无法运行</title>
			<link>https://pengchuanc.github.io/posts/mariadb-upgrade/</link>
			<pubDate>Wed, 24 Feb 2021 10:15:21 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/mariadb-upgrade/</guid>
			<description>1.事情起因 在redhat每次执行完yun update后，MariaDB也会升级，但我之前更换过MariaDB的数据存储目录，将数据保存在了</description>
			<content type="html"><![CDATA[<h1 id="1事情起因">1.事情起因</h1>
<p>在redhat每次执行完<code>yun update</code>后，MariaDB也会升级，但我之前更换过MariaDB的数据存储目录，将数据保存在了<code>/home/mysql</code>目录下，导致每次升级完MariaDB后，无法启动server。</p>
<h1 id="2解决方案">2.解决方案</h1>
<h2 id="21-更换目录">2.1 更换目录</h2>
<p>更换目录后，需要对目录重新授权，因为默认情况下，MariaDB的用户和用户组为<code>mysql:mysql</code>，授权代码为：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">~ chown -R mysql:mysql /home/mysql
~ chown <span class="m">775</span> /home/mysql
</code></pre></div><h2 id="22-关闭selinux">2.2 关闭selinux</h2>
<p>通过一下命令可以临时关闭selinux：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">~ setenforce <span class="m">0</span>
</code></pre></div><p>要永久禁用selinux，可以使用文本编辑器打开<code>/etc/sysconfig/selinux</code>文件，如下所示：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">~ vi /etc/sysconfig/selinux
</code></pre></div><p>然后将配置selinux=enforcing改为selinux=disabled，如下图所示。</p>
<div class="highlight"><pre class="chroma"><code class="language-plain" data-lang="plain">SELINUX=disabled
</code></pre></div><p>然后，按<code>esc</code>按键后，输入<code>:wq</code>保存并退出文件，为了使配置生效，需要重新启动系统，然后使用sestatus命令检查selinux的状态，如下所示：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">sestatus
</code></pre></div><h2 id="23-修改mariadbservice">2.3 修改<code>mariadb.service</code></h2>
<p>systemd 默认配置了对<code>/root</code>和<code>/home</code>等目录的限制，<code>ProtectHome=true</code>配置意味着启动时应用对这些目录不可写，mariaDB同样有这个限制。</p>
<p>通过以下命令可以找到<code>mriadb.service</code>的位置:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">~ find / -name <span class="s2">&#34;mariadb.service&#34;</span>
</code></pre></div><p>然后使用<code>vi</code> 编辑文件，通过以下命令可以找到<code>ProtectHome</code>的位置:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">: /ProtectHome*
</code></pre></div><p>找到配置位置后，将<code>ProtectHome=true</code>修改为<code>ProtectHome=false</code>，保存并退出。</p>
<p>执行一下命令来重启MariaDB：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">~ systemctl daemon-reload
~ systemctl restart mariadb.servic
</code></pre></div><h1 id="3-总结">3. 总结</h1>
<p>实际上问题的出现来源于三个方面</p>
<ul>
<li>更换mariadb目录没有对目录进行授权</li>
<li>selinux</li>
<li>systemd 默认配置了对<code>/root</code>和<code>/home</code>等目录的限制</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Mariadb(MySQL)初始配置</title>
			<link>https://pengchuanc.github.io/posts/mariadb-init/</link>
			<pubDate>Thu, 04 Feb 2021 17:05:55 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/mariadb-init/</guid>
			<description>数据库各项配置主要在/etc/my.cnf文件中修改。 1.数据库存放位置 安装完MariaDB后，数据资源一般默认存放在/var/lib/my</description>
			<content type="html"><![CDATA[<p>数据库各项配置主要在<code>/etc/my.cnf</code>文件中修改。</p>
<h1 id="1数据库存放位置">1.数据库存放位置</h1>
<p>安装完MariaDB后，数据资源一般默认存放在<code>/var/lib/mysql</code>目录下，该目录空间一般不大，可修改<code>datadir</code>项目来更改数据保存位置，对于开启<strong>SELinux</strong>的发行版来说，修改数据保存位置可能导致数据库启动失败，可以通过<code>setenforce 0</code>来关闭SELinux。</p>
<p>一般建议移动整个<code>/var/lib/mysql</code>目录，如果这样操作，记得修改<code>socket</code>条目的位置。</p>
<div class="highlight"><pre class="chroma"><code class="language-plain" data-lang="plain"># 初始配置
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

# 修改后
datadir=/root/mysql
socket=/root/mysql/mysql.sock
</code></pre></div><h1 id="2影响到数据库超时的设置">2.影响到数据库超时的设置</h1>
<pre><code class="language-cnf" data-lang="cnf"># 服务器关闭非交互连接之前等待活动的秒数
wait_timeout=28800

# 服务器关闭交互式连接之前等待活动的秒数
interactive_timeout=28800
</code></pre><h1 id="3缓冲区大小">3.缓冲区大小</h1>
<pre><code class="language-cnf" data-lang="cnf"># 索引的缓冲区大小，增加它可得到更好的索引处理性能
key_buffer_size=256M

# 单次连接最大数据量
max_allowed_packet=768M

# 排序、读查询、join操作所能使用的缓冲区大小，每一个连接独享
read_buffer_size=4M
sort_buffer_size=4M
join_buffer_size=8M
</code></pre><h1 id="4连接数量管理">4.连接数量管理</h1>
<pre><code class="language-cnf" data-lang="cnf"># 最大连接进程数
max_connections=768
max_connect_errors=1000
</code></pre><h1 id="5重启">5.重启</h1>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># centos6 redhat6</span>
service restart mariadb.service

<span class="c1"># centos7+ redhat7+</span>
systemctl restart mariadb.service
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>常用Linux命令</title>
			<link>https://pengchuanc.github.io/posts/linux_most_used_command/</link>
			<pubDate>Wed, 06 Jan 2021 15:22:11 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/linux_most_used_command/</guid>
			<description>任务中止 1.中止多进程任务 假设任务名为 qcluster ps aux|grep qcluster|grep -v grep|cut -c 9-15|xargs kill -9</description>
			<content type="html"><![CDATA[<h1 id="任务中止">任务中止</h1>
<h2 id="1中止多进程任务">1.中止多进程任务</h2>
<p>假设任务名为 <code>qcluster</code></p>
<p><img src="/images/linux-ps.png" alt="image-20210106152455606"></p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">ps aux<span class="p">|</span>grep qcluster<span class="p">|</span>grep -v grep<span class="p">|</span>cut -c 9-15<span class="p">|</span>xargs <span class="nb">kill</span> -9
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python中使用JWT</title>
			<link>https://pengchuanc.github.io/posts/python-jwt/</link>
			<pubDate>Mon, 21 Dec 2020 11:18:59 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-jwt/</guid>
			<description>在前后端分离的web项目中，后端一般采用Restful Api，这种模式的后端是无状态的， 不便再使用Session这种传统的认证方式，一般采用</description>
			<content type="html"><![CDATA[<p>在前后端分离的web项目中，后端一般采用Restful Api，这种模式的后端是无状态的，</p>
<p>不便再使用Session这种传统的认证方式，一般采用<strong>JWT</strong>。</p>
<p>基于jwt的鉴权机制也是无状态的，因此不需要在服务端去保留用户的认证信息或者会话信息，jwt是存储在客户端的，服务器端不需要存储jwt的，客户端每次发送请求时会携带该token，然后到服务器端会验证token是否正确，是否过期了，来验证token的有效性。</p>
<p>再Django中，使用restframework便可以很方便的使用jwt进行认证了，我们也可以通过标准库<code>jwt</code>来简单实现jwt加解密过程。</p>
<h2 id="1jwt加密">1.JWT加密</h2>
<p>jwt加密一般采用<code>HS256</code>的加密方式，为了保证jwt的安全，需要设置一个仅提供者可知的<code>secret key</code>，然后再对用户信息进行打包，代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">jwt</span>
<span class="kn">import</span> <span class="nn">datetime</span>

<span class="kn">from</span> <span class="nn">itsdangerous</span> <span class="kn">import</span> <span class="n">JSONWebSignatureSerializer</span>


<span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="s1">&#39;iencj58^&amp;/.+_@#%$jnckn&#39;</span>

<span class="c1"># token超时时间</span>
<span class="n">expire_at</span> <span class="o">=</span> <span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">15</span><span class="p">))</span><span class="o">.</span><span class="n">timestamp</span><span class="p">()</span>
<span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="s1">&#39;Asin&#39;</span><span class="p">,</span> <span class="s1">&#39;expireAt&#39;</span><span class="p">:</span> <span class="n">expire_at</span><span class="p">}</span>

<span class="n">token</span> <span class="o">=</span> <span class="n">jwt</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">SECRET_KEY</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s1">&#39;HS256&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
<span class="c1">#b&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IkFzaW4iLCJleHBpcmVBdCI6MTYwODUyMjI1Mi44MTU5NzV9.psXYOLOgzo1mzAHzDCk2hcocMaq_D84yOoXPMhk3W8U&#39;</span>
</code></pre></div><h2 id="2jwt解密">2.JWT解密</h2>
<p>解密的关键就在于<code>secret key</code>和加密方式，知道这两条信息后，解密过程就很简单了，代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">jwt</span>

<span class="n">token</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IkFzaW4iLCJleHBpcmVBdCI6MTYwODUyMjI1Mi44MTU5NzV9.psXYOLOgzo1mzAHzDCk2hcocMaq_D84yOoXPMhk3W8U&#39;</span>

<span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="s1">&#39;iencj58^&amp;/.+_@#%$jnckn&#39;</span>

<span class="n">info</span> <span class="o">=</span> <span class="n">jwt</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">SECRET_KEY</span><span class="p">,</span> <span class="n">algorithms</span><span class="o">=</span><span class="s1">&#39;HS256&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
<span class="c1"># {&#39;username&#39;: &#39;Asin&#39;, &#39;expireAt&#39;: 1608522252.815975}</span>
</code></pre></div><h3 id="3使用itsdangerous包">3.使用<code>itsdangerous</code>包</h3>
<p><code>itesdangerous</code>是flask中推荐使用的签名工具，使用方式也相当简单。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">itsdangerous</span> <span class="kn">import</span> <span class="n">TimedJSONWebSignatureSerializer</span>


<span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="s1">&#39;iencj58^&amp;/.+_@#%$jnckn&#39;</span>


<span class="n">serializer</span> <span class="o">=</span> <span class="n">TimedJSONWebSignatureSerializer</span><span class="p">(</span><span class="n">secret_key</span><span class="o">=</span><span class="n">SECRET_KEY</span><span class="p">,</span> <span class="n">algorithm_name</span><span class="o">=</span><span class="s1">&#39;HS256&#39;</span><span class="p">)</span>
<span class="c1"># 设置超时时间为15分组</span>
<span class="n">serializer</span><span class="o">.</span><span class="n">DEFAULT_EXPIRES_IN</span> <span class="o">=</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">15</span>
<span class="n">token</span> <span class="o">=</span> <span class="n">serializer</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="s1">&#39;Asin&#39;</span><span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>

<span class="n">info</span> <span class="o">=</span> <span class="n">serializer</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</code></pre></div><h2 id="4在项目中使用">4.在项目中使用</h2>
<p>在项目中使用jwt时，一般还需要包含令牌的签发者及签发日期等信息，用于加强安全性和token超时后的刷新机制，因此认证后返回的除了token外还应该包含一条用于刷新的token，避免token频繁超时。</p>
]]></content>
		</item>
		
		<item>
			<title>Python利用Manager在分布式进程间进行通信</title>
			<link>https://pengchuanc.github.io/posts/python-manager/</link>
			<pubDate>Thu, 17 Dec 2020 11:01:25 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-manager/</guid>
			<description>在具有亲缘的多进程程序中，通常可用使用queue、pipe等数据结构来进行数据共享和传递消息，但在分布式进程中，进程间的通信还需要依靠网络来</description>
			<content type="html"><![CDATA[<p>在具有亲缘的多进程程序中，通常可用使用<code>queue</code>、<code>pipe</code>等数据结构来进行数据共享和传递消息，但在分布式进程中，进程间的通信还需要依靠网络来进行传输。</p>
<p>在之前的文章中，我们通过grpc服务来传输数据，实际上在Python标准库<code>multiprocessing</code>的<code>managers</code>模块已经包含了分布式进程通信的功能，主要使用<code>BaseManager</code>对象。</p>
<h2 id="1basemanager对象">1.BaseManager对象</h2>
<p>官网文档对BaseManager的描述：</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="k">class</span> <span class="nc">multiprocessing</span><span class="o">.</span><span class="n">managers</span><span class="o">.</span><span class="n">BaseManager</span><span class="p">([</span><span class="n">address</span><span class="p">[,</span> <span class="n">authkey</span><span class="p">]])</span>
	<span class="s2">&#34;&#34;&#34;
</span><span class="s2">	创建一个 BaseManager 对象。
</span><span class="s2">	一旦创建，应该及时调用 start() 或者 get_server().serve_forever() 以确保管理器对象对应的管理进程已经启动。
</span><span class="s2">
</span><span class="s2">	address 是管理器服务进程监听的地址。如果 address 是 None ,则允许和任意主机的请求建立连接。
</span><span class="s2">
</span><span class="s2">	authkey 是认证标识，用于检查连接服务进程的请求合法性。如果 authkey 是 None, 则会使用 current_process().authkey , 否则，就使用 authkey , 需要保证它必须是 byte 类型的字符串。
</span><span class="s2">
</span><span class="s2">	start([initializer[, initargs]])
</span><span class="s2">		为管理器开启一个子进程，如果 initializer 不是 None , 子进程在启动时将会调用initializer(*initargs) 。
</span><span class="s2">
</span><span class="s2">    get_server()
</span><span class="s2">    	返回一个 Server对象，它是管理器在后台控制的真实的服务。 Server对象拥有serve_forever() 方法。
</span><span class="s2">
</span><span class="s2">        &gt;&gt;&gt;
</span><span class="s2">        &gt;&gt;&gt; from multiprocessing.managers import BaseManager
</span><span class="s2">        &gt;&gt;&gt; manager = BaseManager(address=(&#39;&#39;, 50000), authkey=b&#39;abc&#39;)
</span><span class="s2">        &gt;&gt;&gt; server = manager.get_server()
</span><span class="s2">        &gt;&gt;&gt; server.serve_forever()
</span><span class="s2">        Server 额外拥有一个 address 属性。
</span><span class="s2">
</span><span class="s2">    connect()
</span><span class="s2">    	将本地管理器对象连接到一个远程管理器进程:
</span><span class="s2">
</span><span class="s2">        &gt;&gt;&gt;
</span><span class="s2">        &gt;&gt;&gt; from multiprocessing.managers import BaseManager
</span><span class="s2">        &gt;&gt;&gt; m = BaseManager(address=(&#39;127.0.0.1&#39;, 50000), authkey=b&#39;abc&#39;)
</span><span class="s2">        &gt;&gt;&gt; m.connect()
</span><span class="s2">        
</span><span class="s2">    shutdown()
</span><span class="s2">        停止管理器的进程。这个方法只能用于已经使用 start() 启动的服务进程。
</span><span class="s2">
</span><span class="s2">        它可以被多次调用。
</span><span class="s2">
</span><span class="s2">    register(typeid[, callable[, proxytype[, exposed[, method_to_typeid[, create_method]]]]])
</span><span class="s2">    	一个 classmethod，可以将一个类型或者可调用对象注册到管理器类。
</span><span class="s2">
</span><span class="s2">    	typeid 是一种 &#34;类型标识符&#34;，用于唯一表示某种共享对象类型，必须是一个字符串。
</span><span class="s2">
</span><span class="s2">        callable 是一个用来为此类型标识符创建对象的可调用对象。如果一个管理器实例将使用 connect() 方法连接到服务器，或者 create_method 参数为 False，那么这里可留下 None。
</span><span class="s2">
</span><span class="s2">        proxytype 是 BaseProxy  的子类，可以根据 typeid 为共享对象创建一个代理，如果是 None , 则会自动创建一个代理类。
</span><span class="s2">
</span><span class="s2">        exposed 是一个函数名组成的序列，用来指明只有这些方法可以使用 BaseProxy._callmethod() 代理。(如果 exposed 是 None, 则会在 proxytype._exposed_ 存在的情况下转而使用它) 当暴露的方法列表没有指定的时候，共享对象的所有 “公共方法” 都会被代理。（这里的“公共方法”是指所有拥有 __call__() 方法并且不是以 &#39;_&#39; 开头的属性）
</span><span class="s2">
</span><span class="s2">        method_to_typeid 是一个映射，用来指定那些应该返回代理对象的暴露方法所返回的类型。（如果 method_to_typeid 是 None, 则 proxytype._method_to_typeid_ 会在存在的情况下被使用）如果方法名称不在这个映射中或者映射是 None ,则方法返回的对象会是一个值拷贝。
</span><span class="s2">
</span><span class="s2">        create_method 指明，是否要创建一个以 typeid 命名并返回一个代理对象的方法，这个函数会被服务进程用于创建共享对象，默认为 True 。
</span><span class="s2">
</span><span class="s2">    BaseManager 实例也有一个只读属性。
</span><span class="s2">
</span><span class="s2">    address
</span><span class="s2">    	管理器所用的地址。
</span><span class="s2">    &#34;&#34;&#34;</span>
</code></pre></div><p>接下来尝试使用<code>BaseManager</code>来进行分布式进程间的通信，由于是在本机多个<code>cmd</code>窗口下模拟分布式，故ip地址均使用<code>127.0.0.1:5000</code>。</p>
<h2 id="2server端">2.Server端</h2>
<p>代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="c1"># server.py</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">queue</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">multiprocessing.managers</span> <span class="kn">import</span> <span class="n">BaseManager</span>


<span class="c1"># 全局变量，存放产生的数据</span>
<span class="n">products</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">task_queue</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;获取任务队列
</span><span class="s2">
</span><span class="s2">    用于注册到BaseManager的任务队列
</span><span class="s2">    Returns:
</span><span class="s2">        queue.Queue: 获取进程安全的任务队列
</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">return</span> <span class="n">products</span>


<span class="k">def</span> <span class="nf">producer</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;模拟生产者，生产数据
</span><span class="s2">
</span><span class="s2">    Returns:
</span><span class="s2">        int: 将产生的随机数当作产品
</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">p</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">BaseManager</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s1">&#39;task_queue&#39;</span><span class="p">,</span> <span class="n">task_queue</span><span class="p">)</span>
    <span class="n">manager</span> <span class="o">=</span> <span class="n">BaseManager</span><span class="p">(</span><span class="n">address</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">5000</span><span class="p">),</span> <span class="n">authkey</span><span class="o">=</span><span class="sa">b</span><span class="s1">&#39;producer&#39;</span><span class="p">)</span>
    <span class="n">manager</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
    <span class="n">tasks</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">task_queue</span><span class="p">()</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">tasks</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">producer</span><span class="p">())</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

</code></pre></div><p>首先创建一个全局的<code>queue</code>来存放数据(注意<code>queue</code>的特点是先进先出(FIFO)，当从一个空的<code>queue</code>获取数据时会发生堵塞)，模拟实际业务中产生的数据的容器，如存放爬虫获取到的媒体文件的url，供其他进程获取。</p>
<p>然后为创建的数据容器提供一个获取方法，然后注册到<code>BaseManager</code>，注册后其他进程便可以注册相同的名字来获取到这个方法，然后获取到数据容器。</p>
<p>在服务端实例化<code>BaseManager</code>对象，传入服务器地址，并调用<code>start</code>对象开启服务。</p>
<p>最后在循环事件中模拟生产过程。</p>
<h2 id="3client端">3.Client端</h2>
<p>client端模拟消费过程，代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="c1"># client.py</span>
<span class="kn">from</span> <span class="nn">multiprocessing.managers</span> <span class="kn">import</span> <span class="n">BaseManager</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">BaseManager</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s1">&#39;task_queue&#39;</span><span class="p">)</span>
    <span class="n">manager</span> <span class="o">=</span> <span class="n">BaseManager</span><span class="p">(</span><span class="n">address</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">5000</span><span class="p">),</span> <span class="n">authkey</span><span class="o">=</span><span class="sa">b</span><span class="s1">&#39;producer&#39;</span><span class="p">)</span>
    <span class="n">manager</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
    <span class="n">tasks</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">task_queue</span><span class="p">()</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">tasks</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>

</code></pre></div><p>这样便实现了分布式进程间的通信和数据共享。</p>
<h2 id="4进一步拆分">4.进一步拆分</h2>
<p>在实际业务中，可能会有多个生产者和多个消费者，这种情况下需要把负责通信的模块剥离出来，只作为通信的管理部分，即生产者向管理者写入数据，消费者从管理者读取数据。</p>
<h3 id="41-manager">4.1 Manager</h3>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="c1"># manager.py</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">queue</span>
<span class="kn">from</span> <span class="nn">multiprocessing.managers</span> <span class="kn">import</span> <span class="n">BaseManager</span>


<span class="c1"># 全局变量，存放产生的数据</span>
<span class="n">products</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">task_queue</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;获取任务队列
</span><span class="s2">
</span><span class="s2">    用于注册到BaseManager的任务队列
</span><span class="s2">    Returns:
</span><span class="s2">        queue.Queue: 获取进程安全的任务队列
</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">return</span> <span class="n">products</span>


<span class="k">def</span> <span class="nf">close</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;收到请求，结束进程&#39;</span><span class="p">)</span>
    <span class="nb">exit</span><span class="p">()</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">BaseManager</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s1">&#39;task_queue&#39;</span><span class="p">,</span> <span class="n">task_queue</span><span class="p">)</span>
    <span class="n">BaseManager</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">,</span> <span class="n">close</span><span class="p">)</span>
    <span class="n">manager</span> <span class="o">=</span> <span class="n">BaseManager</span><span class="p">(</span><span class="n">address</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">5000</span><span class="p">),</span> <span class="n">authkey</span><span class="o">=</span><span class="sa">b</span><span class="s1">&#39;producer&#39;</span><span class="p">)</span>
    <span class="n">manager</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
    <span class="n">tasks</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">task_queue</span><span class="p">()</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">continue</span>

</code></pre></div><h3 id="42-server">4.2 Server</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># server.py</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">multiprocessing.managers</span> <span class="kn">import</span> <span class="n">BaseManager</span>


<span class="k">def</span> <span class="nf">producer</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;模拟生产者，生产数据
</span><span class="s2">
</span><span class="s2">    Returns:
</span><span class="s2">        int: 将产生的随机数当作产品
</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">p</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">BaseManager</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s1">&#39;task_queue&#39;</span><span class="p">)</span>
    <span class="n">manager</span> <span class="o">=</span> <span class="n">BaseManager</span><span class="p">(</span><span class="n">address</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">5000</span><span class="p">),</span> <span class="n">authkey</span><span class="o">=</span><span class="sa">b</span><span class="s1">&#39;producer&#39;</span><span class="p">)</span>
    <span class="n">manager</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
    <span class="n">tasks</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">task_queue</span><span class="p">()</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">tasks</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">producer</span><span class="p">())</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

</code></pre></div><h3 id="43-client">4.3 Client</h3>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="c1"># client.py</span>
<span class="kn">from</span> <span class="nn">multiprocessing.managers</span> <span class="kn">import</span> <span class="n">BaseManager</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">BaseManager</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s1">&#39;task_queue&#39;</span><span class="p">)</span>
    <span class="n">manager</span> <span class="o">=</span> <span class="n">BaseManager</span><span class="p">(</span><span class="n">address</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">5000</span><span class="p">),</span> <span class="n">authkey</span><span class="o">=</span><span class="sa">b</span><span class="s1">&#39;producer&#39;</span><span class="p">)</span>
    <span class="n">manager</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
    <span class="n">tasks</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">task_queue</span><span class="p">()</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">tasks</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>

</code></pre></div><p>这样<code>Manager</code>便可以只用于管理通信，与业务剥离。</p>
]]></content>
		</item>
		
		<item>
			<title>Python使用装饰器来实现重试</title>
			<link>https://pengchuanc.github.io/posts/python-class-decorator/</link>
			<pubDate>Tue, 15 Dec 2020 10:09:06 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-class-decorator/</guid>
			<description>在之前使用grpc的项目中偶尔会遇到连接时间过久，tcp连接断掉的情况，于是尝试写一个装饰器来实现自动重连3次，即最大尝试4次连接。 主要使用</description>
			<content type="html"><![CDATA[<p>在之前使用grpc的项目中偶尔会遇到连接时间过久，tcp连接断掉的情况，于是尝试写一个装饰器来实现自动重连3次，即最大尝试4次连接。</p>
<p>主要使用了python中class的魔术方法<code>__call__</code>和递归函数。</p>
<h2 id="1python中的__call__方法">1.Python中的<code>__call__</code>方法</h2>
<p><code>__call__</code>函数的作用是将一个类变为<code>callable</code>对象，即可用用<code>()</code>来调用一个已经实例化的对象，这也是将<code>class</code>作为装饰器的关键。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;调用init&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__new__</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;调用new&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">object</span><span class="o">.</span><span class="fm">__new__</span><span class="p">(</span><span class="bp">cls</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;调用call&#39;</span><span class="p">)</span>
</code></pre></div><p>python中对象实例化时，会一次调用<code>__new__</code>和<code>__init__</code>函数，然后调用实例化后的对象，会调用<code>__call__</code>函数，比如：</p>
<pre><code class="language-pow" data-lang="pow">&gt;&gt;&gt; t = Test()
调用new
调用init

&gt;&gt; t()
调用call
</code></pre><h2 id="2实现装饰器">2.实现装饰器</h2>
<p>了解<code>__call__</code>运行的机制后，便可以利用它的特性来实现装饰器了。</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="k">class</span> <span class="nc">Reconnect</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;网络访问自动重连
</span><span class="s2">
</span><span class="s2">    Attributes:
</span><span class="s2">        func: 被装饰的函数
</span><span class="s2">        calls: 函数被调用的次数
</span><span class="s2">    &#34;&#34;&#34;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">func</span> <span class="o">=</span> <span class="n">func</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">calls</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">reconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;重新连接
</span><span class="s2">
</span><span class="s2">        当次数达到第四次时，直接返回函数，不论是否成功，不再进行重连
</span><span class="s2">        当次数小于四次时，如果是ConnectionError则递归调用重连函数
</span><span class="s2">        如果是其他错误，则直接抛出错误
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">calls</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">calls</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">ConnectionError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">reconnect</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">e</span>

    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;尝试还原函数本身签名&#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">reconnect</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

</code></pre></div><p>初始化装饰器时，会需要传入一个被装饰的函数和生成一个内部用来记录重试次数的变量<code>calls</code>，重试的逻辑主要在<code>reconnect</code>函数中实现，重试逻辑中只捕获<code>ConnectionError</code>并进行重试，接下来模拟网络连接中会发生的错误。</p>
<h2 id="3模拟网络访问中的错误">3.模拟网络访问中的错误</h2>
<pre><code>@Reconnect
def add(a, b):
    # 模拟不稳定的网络
    net_state = random.randint(0, 10)
    if net_state &gt; 9:
        raise ConnectionRefusedError(f'connection refuse, net state {net_state}')
    elif net_state &gt; 5:
        raise ConnectionError(f'connection error, net state {net_state}')
    return a+b
</code></pre><p>利用<code>random</code>库产生的随机数来模拟网络环境，调用<code>add</code>检验装饰器是否生效：</p>
<pre><code class="language-pow" data-lang="pow">&gt;&gt;&gt; add(5, 2)
7

&gt;&gt;&gt; add(5, 2)
connection error, net state 6
connection error, net state 8
connection refuse, net state 10
7
</code></pre><p>可用看到，装饰器已经生效。</p>
<h2 id="4关于函数签名">4.关于函数签名</h2>
<p>在定义装饰器时，使用到了<code>__repr__</code>方法，该方法主要定义对象的输出内容，当函数经过装饰器的装饰，其实际签名信息已经被覆盖，在日志中已经无法定位到具体函数的信息，如果在上例中，注释掉<code>__repr__</code>相关内容，我们可以看到：</p>
<pre><code>&gt;&gt;&gt; add
&lt;Reconnect object at 0x000001A80CE48FD0&gt;
</code></pre><p>实际上<code>add</code>函数自身信息已经丢失，如果使用了<code>__repr__</code>后，则可用看到：</p>
<pre><code>&gt;&gt;&gt; add
&lt;function add at 0x0000021862BAE040&gt;
</code></pre><p>在函数型装饰器中，可用使用<code>collections</code>模块下的<code>wraps</code>对象来实现函数的反签名，在装饰器类中尚未尝试，可以作为后续研究内容。</p>
<h2 id="5完整代码">5.完整代码</h2>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="c1"># demo.py</span>
<span class="kn">import</span> <span class="nn">random</span>


<span class="k">class</span> <span class="nc">Reconnect</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;网络访问自动重连
</span><span class="s2">
</span><span class="s2">    Attributes:
</span><span class="s2">        func: 被装饰的函数
</span><span class="s2">        calls: 函数被调用的次数
</span><span class="s2">    &#34;&#34;&#34;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">func</span> <span class="o">=</span> <span class="n">func</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">calls</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">reconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;重新连接
</span><span class="s2">
</span><span class="s2">        当次数达到第四次时，直接返回函数，不论是否成功，不再进行重连
</span><span class="s2">        当次数小于四次时，如果是ConnectionError则递归调用重连函数
</span><span class="s2">        如果是其他错误，则直接抛出错误
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">calls</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">calls</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">ConnectionError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">reconnect</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">e</span>

    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;尝试还原函数本身签名&#34;&#34;&#34;</span>
        <span class="k">return</span> <span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">reconnect</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>


<span class="nd">@Reconnect</span>
<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="c1"># 模拟不稳定的网络</span>
    <span class="n">net_state</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">net_state</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">ConnectionRefusedError</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;connection refuse, net state {net_state}&#39;</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">net_state</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">ConnectionError</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;connection error, net state {net_state}&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span>


<span class="k">def</span> <span class="nf">minus</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span><span class="o">-</span><span class="n">b</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">add</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">minus</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>

</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python中使用UDP来推送数据</title>
			<link>https://pengchuanc.github.io/posts/python-udp/</link>
			<pubDate>Fri, 11 Dec 2020 16:41:32 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-udp/</guid>
			<description>1.UDP简介 UDP协议（User Datagram Protocol）中文名称是用户数据报协议，是OSI（Open System Interconnection，开放式系</description>
			<content type="html"><![CDATA[<h2 id="1udp简介">1.UDP简介</h2>
<p>UDP协议（User Datagram Protocol）中文名称是用户数据报协议，是OSI（Open System Interconnection，开放式系统互联）参考模型中一种无连接的传输层协议，不需要建立连接就能直接进行数据发送和接收，属于不可靠的、没有时序的通信，但是UDP协议的实时性比较好，通常用于视频直播相关领域。</p>
<p>使用UDP推送数据时，不会考虑客户端是否会接受到数据，因此并不能保证它们能到达目的地。但由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。</p>
<p>接下来简单写个demo来尝试写一个推送服务。</p>
<h2 id="2服务端">2.服务端</h2>
<p>服务端代码如下</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># server.py</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">datetime</span>

<span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span>


<span class="n">pool</span> <span class="o">=</span> <span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Manager</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;客户端管理
</span><span class="s2">
</span><span class="s2">    Attributes:
</span><span class="s2">        address: 地址
</span><span class="s2">        port: 端口
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">_clients</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">server</span><span class="p">:</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">address</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">port</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;Inits manager&#34;&#34;&#34;</span>
        <span class="n">server_socket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_DGRAM</span><span class="p">)</span>
        <span class="n">address</span> <span class="o">=</span> <span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
        <span class="n">server_socket</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="n">server_socket</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">client</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;注册客户端
</span><span class="s2">
</span><span class="s2">        Args:
</span><span class="s2">            name: 客户端名称
</span><span class="s2">            client: 客户端ip
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_clients</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">name</span><span class="p">:</span> <span class="n">client</span><span class="p">})</span>
        <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;用户 {name} 成功注册&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">unregister</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;取消注册
</span><span class="s2">
</span><span class="s2">        Args:
</span><span class="s2">            name: 客户端名称
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_clients</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_clients</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">broadcast</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;为每一个注册的客户端推送消息
</span><span class="s2">
</span><span class="s2">        Args:
</span><span class="s2">            msg: 消息内容
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">for</span> <span class="n">client</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_clients</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">sendto</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">encode</span><span class="p">(),</span> <span class="n">client</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">check_register</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;监听注册事件&#34;&#34;&#34;</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">name</span><span class="p">,</span> <span class="n">client_address</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">recvfrom</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">name</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">name</span><span class="o">.</span><span class="n">decode</span><span class="p">(),</span> <span class="n">client_address</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">do</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;模拟推送业务&#34;&#34;&#34;</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">date</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1"> %H:%M:%S&#39;</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">serve</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
        <span class="n">manager</span> <span class="o">=</span> <span class="n">Manager</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
        <span class="n">pool</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">manager</span><span class="o">.</span><span class="n">check_register</span><span class="p">)</span>
        <span class="n">pool</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">manager</span><span class="o">.</span><span class="n">do</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">Manager</span><span class="o">.</span><span class="n">serve</span><span class="p">(</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">)</span>

</code></pre></div><p>server端每隔10秒会向订阅的客户端推送一次数据，数据内容用当前时间模拟。发现订阅和推送数据放入线程池中处理，避免堵塞。</p>
<h2 id="3客户端">3.客户端</h2>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="c1"># client.py</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span>


<span class="n">pool</span> <span class="o">=</span> <span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Client</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;客户端
</span><span class="s2">
</span><span class="s2">    Attributes:
</span><span class="s2">        name: 用于注册的唯一标识，通常使用uuid
</span><span class="s2">        address: 远程服务器地址
</span><span class="s2">        port: 远程服务器端口
</span><span class="s2">    &#34;&#34;&#34;</span>

    <span class="n">_server</span><span class="p">:</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span>
    <span class="n">_address</span><span class="p">:</span> <span class="nb">tuple</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;Inits client&#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_address</span> <span class="o">=</span> <span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_server</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_DGRAM</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_server</span><span class="o">.</span><span class="n">sendto</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">encode</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">_address</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">receive</span><span class="p">,</span> <span class="n">sender</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_server</span><span class="o">.</span><span class="n">recvfrom</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
            <span class="n">receive</span> <span class="o">=</span> <span class="n">receive</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
            <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;{self.name} 收到数据 {receive}&#39;</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">addr</span> <span class="o">=</span> <span class="s1">&#39;127.0.0.1&#39;</span>
    <span class="n">p</span> <span class="o">=</span> <span class="mi">9000</span>
    <span class="n">users</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">]</span>

    <span class="c1"># 模拟5个用户去订阅数据</span>
    <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
        <span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
        <span class="n">client</span><span class="o">.</span><span class="n">register</span><span class="p">()</span>
        <span class="n">pool</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">receive</span><span class="p">)</span>

</code></pre></div><p>客户端模拟5个用户去订阅数据，订阅后会持续收到服务端推送的数据。取消注册的方法暂未实现，原理类似，通常会使用tcp协议来确认客户端身份，进行订阅和取消订阅操作，数据推送使用udp。</p>
]]></content>
		</item>
		
		<item>
			<title>Python中的str类型和int数组类型转换</title>
			<link>https://pengchuanc.github.io/posts/python-bytes-str/</link>
			<pubDate>Thu, 10 Dec 2020 09:42:59 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-bytes-str/</guid>
			<description>在编程语言中，string类型往往是通过int数组来实现的，在python中，str和int[]同样可以转换 1.str转bytes 将字符串转</description>
			<content type="html"><![CDATA[<p>在编程语言中，string类型往往是通过int数组来实现的，在python中，str和int[]同样可以转换</p>
<h3 id="1str转bytes">1.str转bytes</h3>
<p>将字符串转化为bytes类型，即int数组</p>
<pre><code class="language-pow" data-lang="pow">&gt;&gt;&gt; a = 'abc'

&gt;&gt;&gt; # 将a转为bytes类型
&gt;&gt;&gt; a.encode()
b'abc'

&gt;&gt;&gt; # 转为List[int]
&gt;&gt;&gt; [x for x in a.encode()]
[97, 98, 99]
</code></pre><h3 id="2将int数组转化为str">2.将int数组转化为str</h3>
<pre><code class="language-po" data-lang="po">&gt;&gt;&gt; a = [97, 98, 99]

&gt;&gt;&gt; # 先转为bytes
&gt;&gt;&gt; bytes(a)
b'abc'
&gt;&gt;&gt; bytes(a).decode()
'abc'
</code></pre>]]></content>
		</item>
		
		<item>
			<title>通过grpc服务上传下载大型文件(Python)</title>
			<link>https://pengchuanc.github.io/posts/grpc_stream_python/</link>
			<pubDate>Wed, 09 Dec 2020 15:49:54 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/grpc_stream_python/</guid>
			<description>传统文件的下载方式主要使用tcp服务，这种功能同样可以使用grpc的stream来实现，通过使用流(streaming)，可以向服务器或者客</description>
			<content type="html"><![CDATA[<p>传统文件的下载方式主要使用tcp服务，这种功能同样可以使用grpc的stream来实现，通过使用流(streaming)，可以向服务器或者客户端持续发送数据，来达到上传和下载文件的目的。</p>
<p>Python中使用stream的要点在于灵活运用generator，发送数据使用yield，数据传输完成使用return而非break。</p>
<h2 id="1创建项目">1.创建项目</h2>
<p>整个项目位于desktop目录下，首先新建必要的目录及文件。</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">desktop</span><span class="p">&gt;</span> <span class="n">mkdir</span> <span class="n">file_server</span>
<span class="n">desktop</span><span class="p">&gt;</span> <span class="n">mkdir</span> <span class="n">file_server</span><span class="p">/</span><span class="n">proto</span>
<span class="n">desktop</span><span class="p">&gt;</span> <span class="n">mkdir</span> <span class="n">file_server</span><span class="p">/</span><span class="n">send</span>
<span class="n">desktop</span><span class="p">&gt;</span> <span class="n">mkdir</span> <span class="n">file_server</span><span class="p">/</span><span class="n">download</span>
</code></pre></div><p>在<code>file_server</code>目录下添加<code>__init__.py</code>文件，保证<code>file_sever</code>为一个python package</p>
<p>在<code>file_server/send</code>目录下新建<code>send.xlsx</code>文件，测试下载文件，可以在文件中写入一些数据方便检查是否下载成功。</p>
<p>在<code>file_server/download</code>目录下新建文件<code>download.docx</code>文件，测试上传文件，同样可以写入一些内容来测试是否上传成功。</p>
<h2 id="2创建proto文件">2.创建proto文件</h2>
<p>在<code>file_server</code>目录下创建<code>fileserver.proto</code>文件来定义grpc服务，文件内容如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-protobuf" data-lang="protobuf"><span class="n">syntax</span> <span class="o">=</span> <span class="s">&#34;proto3&#34;</span><span class="p">;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="kn">package</span> <span class="nn">file_server</span><span class="p">;</span><span class="err">
</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 文件传输服务
</span><span class="c1"></span><span class="kd">service</span> <span class="n">FileTransfer</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="c1">// 上传文件
</span><span class="c1"></span>  <span class="k">rpc</span> <span class="n">SendFile</span><span class="p">(</span><span class="n">stream</span> <span class="n">RequestSend</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">ResponseStatus</span><span class="p">);</span><span class="err">
</span><span class="err">
</span><span class="err"></span>  <span class="c1">// 下载文件
</span><span class="c1"></span>  <span class="k">rpc</span> <span class="n">DownloadFile</span><span class="p">(</span><span class="n">RequestFile</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">stream</span> <span class="n">ResponseStream</span><span class="p">);</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 文件上传数据流
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">RequestSend</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="kt">bytes</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 上传结果状态
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">ResponseStatus</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="kt">bool</span> <span class="n">ok</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 文件下载请求
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">RequestFile</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="kt">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 文件下载数据流
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">ResponseStream</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="kt">bytes</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span></code></pre></div><p>然后编译<code>fileserver.proto</code>文件为python文件</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">python</span> <span class="n">-m</span> <span class="n">grpc_tools</span><span class="p">.</span><span class="n">protoc</span> <span class="p">-</span><span class="n">-python_out</span><span class="p">=./</span><span class="n">file_server</span> <span class="p">-</span><span class="n">-grpc_python_out</span><span class="p">=./</span><span class="n">file_server</span> <span class="n">-I</span> <span class="p">./</span><span class="n">file_server</span><span class="p">/</span><span class="n">proto</span> <span class="n">fileserver</span><span class="p">.</span><span class="n">proto</span>
</code></pre></div><p>相关参数解释：</p>
<ul>
<li>&ndash;python-out: <code>fileserver_pb.py</code>文件的输出目录</li>
<li>&ndash;grpc_python_out：<code>fileserver_pb_grpc.py</code>文件输出目录</li>
<li>-I: protobuf源文件所在目录</li>
</ul>
<p>修改生成的<code>filesever_pb_grpc.py</code>的<code>import</code>部分代码:</p>
<pre><code class="language-pyth" data-lang="pyth"># Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
&quot;&quot;&quot;Client and server classes corresponding to protobuf-defined services.&quot;&quot;&quot;
import grpc

import file_server.fileserver_pb2 as fileserver__pb2
</code></pre><p>修改原因是package方式组织的python代码引入模块的方式与单文件脚本的引入方式不同，直接引入<code>fileserver__pb2</code>模块的话会提示无法找到该模块。</p>
<h2 id="3创建server端">3.创建server端</h2>
<p>在<code>file_server</code>目录下新建<code>server.py</code>文件，内容如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">time</span>

<span class="kn">import</span> <span class="nn">grpc</span>
<span class="kn">from</span> <span class="nn">concurrent</span> <span class="kn">import</span> <span class="n">futures</span>
<span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">import</span> <span class="nn">file_server.fileserver_pb2</span> <span class="kn">as</span> <span class="nn">fp</span>
<span class="kn">import</span> <span class="nn">file_server.fileserver_pb2_grpc</span> <span class="kn">as</span> <span class="nn">fpg</span>


<span class="n">base_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="vm">__file__</span><span class="p">)</span><span class="o">.</span><span class="n">parent</span>


<span class="k">def</span> <span class="nf">file_read</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;读取待发送的文件的内容
</span><span class="s2">
</span><span class="s2">    由于是测试脚本，直接读取待下载的文件，即 ./file_server/send.xlsx
</span><span class="s2">    模拟大文件需要分块读取，持续发送
</span><span class="s2">    Args:
</span><span class="s2">        name: 文件名
</span><span class="s2">    Returns:
</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">send_file_path</span> <span class="o">=</span> <span class="n">base_path</span> <span class="o">/</span> <span class="s1">&#39;send&#39;</span> <span class="o">/</span> <span class="n">name</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">1024</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">send_file_path</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="nb">file</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
            <span class="n">read</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">read</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="k">yield</span> <span class="n">fp</span><span class="o">.</span><span class="n">ResponseStream</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">read</span><span class="p">)</span>
            <span class="n">start</span> <span class="o">+=</span> <span class="n">size</span>


<span class="k">class</span> <span class="nc">FileTransferServer</span><span class="p">(</span><span class="n">fpg</span><span class="o">.</span><span class="n">FileTransferServicer</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;文件传输服务&#34;&#34;&#34;</span>

    <span class="k">def</span> <span class="nf">SendFile</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request_iterator</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;文件发送服务
</span><span class="s2">
</span><span class="s2">        继承定义好的文件发送服务
</span><span class="s2">        Args:
</span><span class="s2">            request_iterator: 上传的文件流 : Generator[byte]
</span><span class="s2">            context: 上下文
</span><span class="s2">
</span><span class="s2">        Returns:
</span><span class="s2">            文件上传的状态 :ResponseStatus
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;接受到文件上传请求&#39;</span><span class="p">)</span>
        <span class="n">send_file</span> <span class="o">=</span> <span class="n">base_path</span> <span class="o">/</span> <span class="s1">&#39;send&#39;</span> <span class="o">/</span> <span class="s1">&#39;download.docx&#39;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">send_file</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">request_iterator</span><span class="p">:</span>
                    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">fp</span><span class="o">.</span><span class="n">ResponseStatus</span><span class="p">(</span><span class="n">ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">fp</span><span class="o">.</span><span class="n">ResponseStatus</span><span class="p">(</span><span class="n">ok</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">DownloadFile</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;文件下载服务
</span><span class="s2">
</span><span class="s2">        继承定义好的文件下载服务
</span><span class="s2">        Args:
</span><span class="s2">            request: 请求需要下载的文件名 :RequestFile
</span><span class="s2">            context: 上下文管理
</span><span class="s2">
</span><span class="s2">        Returns:
</span><span class="s2">            文件下载的数据流 :ResponseStream
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
        <span class="n">file_name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">name</span>
        <span class="nb">file</span> <span class="o">=</span> <span class="n">file_read</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">file_name</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">response</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">response</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">serve</span><span class="p">():</span>
        <span class="s2">&#34;&#34;&#34;启动服务
</span><span class="s2">
</span><span class="s2">        Returns:
</span><span class="s2">
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">server</span> <span class="o">=</span> <span class="n">grpc</span><span class="o">.</span><span class="n">server</span><span class="p">(</span><span class="n">futures</span><span class="o">.</span><span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
        <span class="n">fpg</span><span class="o">.</span><span class="n">add_FileTransferServicer_to_server</span><span class="p">(</span><span class="n">FileTransferServer</span><span class="p">(),</span> <span class="n">server</span><span class="p">)</span>
        <span class="n">server</span><span class="o">.</span><span class="n">add_insecure_port</span><span class="p">(</span><span class="s2">&#34;[::]:50051&#34;</span><span class="p">)</span>
        <span class="n">server</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s2">&#34;start server&#34;</span><span class="p">)</span>
                <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
            <span class="n">server</span><span class="o">.</span><span class="n">stop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">FileTransferServer</span><span class="o">.</span><span class="n">serve</span><span class="p">()</span>

</code></pre></div><h2 id="4创建client端">4.创建client端</h2>
<p>在<code>file_server</code>目录下新建<code>client.py</code>文件，内容如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">grpc</span>

<span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">from</span> <span class="nn">file_server</span> <span class="kn">import</span> <span class="n">fileserver_pb2</span> <span class="k">as</span> <span class="n">fp</span><span class="p">,</span> <span class="n">fileserver_pb2_grpc</span> <span class="k">as</span> <span class="n">fpg</span>


<span class="n">base_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="vm">__file__</span><span class="p">)</span><span class="o">.</span><span class="n">parent</span>


<span class="k">def</span> <span class="nf">send_file</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;上传文件
</span><span class="s2">
</span><span class="s2">    模拟大文件，分块发送
</span><span class="s2">    Returns:
</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">file_path</span> <span class="o">=</span> <span class="n">base_path</span> <span class="o">/</span> <span class="s1">&#39;download&#39;</span> <span class="o">/</span> <span class="s1">&#39;download.docx&#39;</span>
    <span class="c1"># 模拟大文件，分块读取发送</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">1024</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">f</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
            <span class="n">read</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">read</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="n">request</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">RequestSend</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">read</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">request</span>
            <span class="n">start</span> <span class="o">+=</span> <span class="n">size</span>


<span class="k">class</span> <span class="nc">Client</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">stub</span><span class="p">:</span> <span class="n">fpg</span><span class="o">.</span><span class="n">FileTransferStub</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">50051</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">channel</span> <span class="o">=</span> <span class="n">grpc</span><span class="o">.</span><span class="n">insecure_channel</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;127.0.0.1:{port}&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">stub</span> <span class="o">=</span> <span class="n">fpg</span><span class="o">.</span><span class="n">FileTransferStub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">channel</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">channel</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;send.xlsx&#39;</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;文件下载
</span><span class="s2">
</span><span class="s2">        会将send.xlsx文件下载到 ./file_sever/download目录
</span><span class="s2">        Args:
</span><span class="s2">            name: 下载文件名，默认为 send.xlsx
</span><span class="s2">
</span><span class="s2">        Returns:
</span><span class="s2">
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">RequestFile</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">stub</span><span class="o">.</span><span class="n">DownloadFile</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
        <span class="n">download</span> <span class="o">=</span> <span class="n">base_path</span> <span class="o">/</span> <span class="s1">&#39;download&#39;</span> <span class="o">/</span> <span class="n">name</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">download</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;上传文件
</span><span class="s2">
</span><span class="s2">        默认将上传 ./file_server/download/download.docx
</span><span class="s2">        Returns:
</span><span class="s2">
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="nb">file</span> <span class="o">=</span> <span class="n">send_file</span><span class="p">()</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">stub</span><span class="o">.</span><span class="n">SendFile</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">resp</span>

    <span class="k">def</span> <span class="fm">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="fm">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="k">with</span> <span class="n">Client</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
        <span class="c1"># 上传文件</span>
        <span class="n">resp_status</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">send</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="n">resp_status</span><span class="p">)</span>

        <span class="c1"># 下载文件</span>
        <span class="n">client</span><span class="o">.</span><span class="n">download</span><span class="p">()</span>

</code></pre></div><h2 id="5运行服务">5.运行服务</h2>
<p>打开两个控制台窗口，cd到<code>desktop</code>目录下，分别运行</p>
<pre><code class="language-pow" data-lang="pow">desktop&gt; python -m file_server.server
</code></pre><div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">desktop</span><span class="p">&gt;</span> <span class="n">python</span> <span class="n">-m</span> <span class="n">file_server</span><span class="p">.</span><span class="n">client</span>
</code></pre></div><p>可以看到<code>send.xlsx</code>文件下载到了<code>file_server/download</code>目录，<code>download.docx</code>文件上传到了<code>file_server/send</code>目录。</p>
]]></content>
		</item>
		
		<item>
			<title>发布/订阅模式</title>
			<link>https://pengchuanc.github.io/posts/pub-sub-model/</link>
			<pubDate>Fri, 04 Dec 2020 18:06:42 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/pub-sub-model/</guid>
			<description>发布订阅模式比较常用，近期使用grpc也涉及到连接管理简单记录一下发布订阅模式的实现，主要使用chan来传输数据 也可以考虑使用回调函数来处理</description>
			<content type="html"><![CDATA[<p>发布订阅模式比较常用，近期使用grpc也涉及到连接管理简单记录一下发布订阅模式的实现，主要使用chan来传输数据</p>
<p>也可以考虑使用回调函数来处理publish的内容</p>
<h2 id="定义publisher">定义Publisher</h2>
<p>首先定义一个Publish的struct，主要包含Subscribers属性来管理订阅者，订阅者必须使用指针来保证数据传递</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// Publisher 发布者
</span><span class="c1">// 管理订阅者
</span><span class="c1">// 发布内容
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Publisher</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
	<span class="nx">Subscribers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Subscriber</span>
	<span class="nx">waitGroup</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewPublisher</span><span class="p">()</span> <span class="o">*</span><span class="nx">Publisher</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Publisher</span><span class="p">{</span>
		<span class="nx">Subscribers</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Subscriber</span><span class="p">),</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>接下来实现Publisher的基础功能</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang">
<span class="c1">// 发布者的功能
</span><span class="c1">// 添加订阅者
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">AddSubscriber</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;添加订阅者%s成功\n&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 删除订阅者
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">RemoveSubscriber</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
		<span class="nb">delete</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;移除订阅者%s成功\n&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 发布内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">Publish</span><span class="p">(</span><span class="nx">msg</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">))</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">s</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span> <span class="p">{</span>
		<span class="nx">d_</span> <span class="o">:=</span> <span class="nx">msg</span>
		<span class="nx">s_</span> <span class="o">:=</span> <span class="nx">s</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">s_</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">d_</span><span class="p">)</span>
			<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="p">}()</span>
	<span class="p">}</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><h2 id="定义subscriber">定义Subscriber</h2>
<p>订阅者主要是接受发布者推送的数据，当然也应该包含一个唯一的标识符，可采用uuid，本文简单采用一个name(string)</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="kd">type</span> <span class="nx">Subscriber</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
	<span class="nx">Name</span> <span class="kt">string</span>
	<span class="nx">Data</span> <span class="kd">chan</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewSubscriber</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Subscriber</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Subscriber</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">Data</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)}</span>
<span class="p">}</span>
</code></pre></div><p>订阅者应当实现的功能</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// 订阅者功能
</span><span class="c1">// 订阅内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">Subscribe</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">AddSubscriber</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 取消订阅
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">UnSubscribe</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">RemoveSubscriber</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 处理发布的内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">msg</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">.</span><span class="nx">Data</span> <span class="o">&lt;-</span> <span class="nx">msg</span>
		<span class="nx">s</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="p">}()</span>
<span class="p">}</span>
</code></pre></div><p>完整代码</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// demo/subscribe/publisher.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">subscribe</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;sync&#34;</span>
<span class="p">)</span>

<span class="c1">// Publisher 发布者
</span><span class="c1">// 管理订阅者
</span><span class="c1">// 发布内容
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Publisher</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
	<span class="nx">Subscribers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Subscriber</span>
	<span class="nx">waitGroup</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewPublisher</span><span class="p">()</span> <span class="o">*</span><span class="nx">Publisher</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Publisher</span><span class="p">{</span>
		<span class="nx">Subscribers</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Subscriber</span><span class="p">),</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 发布者的功能
</span><span class="c1">// 添加订阅者
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">AddSubscriber</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;添加订阅者%s成功\n&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 删除订阅者
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">RemoveSubscriber</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
		<span class="nb">delete</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;移除订阅者%s成功\n&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 发布者事件处理 - 产生数据
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">Update</span><span class="p">(){</span>

<span class="p">}</span>

<span class="c1">// 发布内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">Publish</span><span class="p">(</span><span class="nx">msg</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">))</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">s</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span> <span class="p">{</span>
		<span class="nx">d_</span> <span class="o">:=</span> <span class="nx">msg</span>
		<span class="nx">s_</span> <span class="o">:=</span> <span class="nx">s</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">s_</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">d_</span><span class="p">)</span>
			<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="p">}()</span>
	<span class="p">}</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// demo/subscribe/subscriber.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">subscribe</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;sync&#34;</span>
<span class="p">)</span>

<span class="c1">// Subscriber 订阅者
</span><span class="c1">// 订阅内容，等待发布者发布内容
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Subscriber</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
	<span class="nx">Name</span> <span class="kt">string</span>
	<span class="nx">Data</span> <span class="kd">chan</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewSubscriber</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Subscriber</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Subscriber</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">Data</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)}</span>
<span class="p">}</span>


<span class="c1">// 订阅者功能
</span><span class="c1">// 订阅内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">Subscribe</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">AddSubscriber</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 取消订阅
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">UnSubscribe</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">RemoveSubscriber</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 处理发布的内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">msg</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">.</span><span class="nx">Data</span> <span class="o">&lt;-</span> <span class="kt">string</span>
		<span class="nx">s</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="p">}()</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// demo/main.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
  <span class="s">&#34;fmt&#34;</span>
  <span class="s">&#34;time&#34;</span>
  <span class="s">&#34;demo/subscribe&#34;</span>
  <span class="s">&#34;strconv&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="p">(</span>
    <span class="nx">pub</span> <span class="o">*</span><span class="nx">subscribe</span><span class="p">.</span><span class="nx">Publiser</span>
    <span class="nx">sub1</span> <span class="o">*</span><span class="nx">subscribe</span><span class="p">.</span><span class="nx">Subscriber</span>
    <span class="nx">sub2</span> <span class="o">*</span><span class="nx">subscribe</span><span class="p">.</span><span class="nx">Subscriber</span>
  <span class="p">)</span>

  <span class="nx">pub</span> <span class="p">=</span> <span class="nx">subscibe</span><span class="p">.</span><span class="nf">NewPublisher</span><span class="p">()</span>

  <span class="nx">sub1</span> <span class="p">=</span> <span class="nx">subscribe</span><span class="p">.</span><span class="nf">NewSubscriber</span><span class="p">(</span><span class="s">&#34;pub1&#34;</span><span class="p">)</span>
  <span class="nx">sub2</span> <span class="p">=</span> <span class="nx">subscribe</span><span class="p">.</span><span class="nf">NewSubscriber</span><span class="p">(</span><span class="s">&#34;pub2&#34;</span><span class="p">)</span>
  <span class="nx">sub1</span><span class="p">.</span><span class="nf">Subscribe</span><span class="p">(</span><span class="nx">pub</span><span class="p">)</span>
  <span class="nx">sub2</span><span class="p">.</span><span class="nf">Subscribe</span><span class="p">(</span><span class="nx">pub</span><span class="p">)</span>

  <span class="k">go</span> <span class="kd">func</span><span class="p">(){</span>
    <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="p">{</span>
      <span class="k">if</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">100</span> <span class="p">{</span>
        <span class="k">break</span>
      <span class="p">}</span>
      <span class="nx">pub</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
      <span class="nx">i</span> <span class="o">++</span>
    <span class="p">}</span>
  <span class="p">}()</span>

  <span class="k">go</span> <span class="kd">func</span><span class="p">(){</span>
    <span class="k">for</span><span class="p">{</span>
      <span class="nx">d1</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">sub1</span><span class="p">.</span><span class="nx">Data</span>
      <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
        <span class="k">continue</span>
      <span class="p">}</span>
      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">d1</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}()</span>

    <span class="k">go</span> <span class="kd">func</span><span class="p">(){</span>
    <span class="k">for</span><span class="p">{</span>
      <span class="nx">d2</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">sub2</span><span class="p">.</span><span class="nx">Data</span>
      <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
        <span class="k">continue</span>
      <span class="p">}</span>
      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">d2</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}()</span>

  <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>利用Nginx和Daphne部署Django3.x和Django channels 3.x</title>
			<link>https://pengchuanc.github.io/posts/django-channels-deploy/</link>
			<pubDate>Wed, 02 Dec 2020 18:13:44 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/django-channels-deploy/</guid>
			<description>Django在3.0正式引入asgi，部署方式与2.x略有不同 仅部署http网站 如果仅部署http网站，可采用uvicorn来进行部署，然后</description>
			<content type="html"><![CDATA[<p>Django在3.0正式引入asgi，部署方式与2.x略有不同</p>
<h2 id="仅部署http网站">仅部署http网站</h2>
<p>如果仅部署http网站，可采用uvicorn来进行部署，然后通过nginx代理地址即可</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> <span class="o">[</span>your_project<span class="o">]</span>
&gt; nohup uvicorn <span class="o">[</span>your_project<span class="o">]</span>.asgi:application --host 0.0.0.0 --port <span class="m">5000</span> &gt; asgi.log <span class="p">&amp;</span>
</code></pre></div><pre><code class="language-conf" data-lang="conf">server {
  location / {
    proxy_pass http://0.0.0.0:5000;
  }
}
</code></pre><h2 id="部署http和websocket">部署http和websocket</h2>
<p>Django中websocket功能主要通过<a href="https://channels.readthedocs.io/en/stable/">django-channels</a>组件实现，由于引入了ws，部署方式略有不同</p>
<p>官方推荐使用daphne部署</p>
<p>以我当前的<code>sma_management</code>项目为例，django3.x版本中，在 <code>sma_management/sma_management/</code>目录下应当有<code>asgi.py</code>文件，引入channels后，应当如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">django</span>
<span class="kn">from</span> <span class="nn">django.core.asgi</span> <span class="kn">import</span> <span class="n">get_asgi_application</span>


<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s2">&#34;DJANGO_SETTINGS_MODULE&#34;</span><span class="p">,</span> <span class="s2">&#34;sma_management.settings&#34;</span><span class="p">)</span>
<span class="n">django</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span>


<span class="kn">from</span> <span class="nn">channels.auth</span> <span class="kn">import</span> <span class="n">AuthMiddlewareStack</span>
<span class="kn">from</span> <span class="nn">channels.routing</span> <span class="kn">import</span> <span class="n">ProtocolTypeRouter</span><span class="p">,</span> <span class="n">URLRouter</span>
<span class="kn">import</span> <span class="nn">investment.routing</span>


<span class="n">application</span> <span class="o">=</span> <span class="n">ProtocolTypeRouter</span><span class="p">({</span>
  <span class="s2">&#34;http&#34;</span><span class="p">:</span> <span class="n">get_asgi_application</span><span class="p">(),</span>
  <span class="s2">&#34;websocket&#34;</span><span class="p">:</span> <span class="n">AuthMiddlewareStack</span><span class="p">(</span>
        <span class="n">URLRouter</span><span class="p">(</span>
            <span class="n">investment</span><span class="o">.</span><span class="n">routing</span><span class="o">.</span><span class="n">websocket_urlpatterns</span>
        <span class="p">)</span>
    <span class="p">),</span>
<span class="p">})</span>
</code></pre></div><p>其中<code>django.setup()</code>命令必须在channels相关业务前引入，不然daphne启动服务会抛出错误</p>
<p>配置好<code>asgi.py</code>后，仅需在项目目录中启动shell，输入：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; nohup daphne -p <span class="m">8000</span> sma_management.asgi:application &gt; daphne.log <span class="p">&amp;</span>
</code></pre></div><p>http和ws服务均使用8000端口，使用Nginx代理的话，配置如下：</p>
<pre><code class="language-conf" data-lang="conf">
upstream channels-backend {
    server localhost:8000;
}

server {
  location /management {
      proxy_pass http://0.0.0.0:8000;
  }

  location /ws {
      proxy_pass http://channels-backend;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection &quot;upgrade&quot;;

      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $server_name;
  }
}

</code></pre><p>这样便可以使用 http://0.0.0.0/management/ 访问http服务，使用 ws://0.0.0.0/ws/ 访问ws服务</p>
]]></content>
		</item>
		
		<item>
			<title>记录GRPC在各种语言下的编译方式</title>
			<link>https://pengchuanc.github.io/posts/rpc-complie/</link>
			<pubDate>Wed, 02 Dec 2020 17:42:12 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/rpc-complie/</guid>
			<description>Python Python中的编译方式 假设当前工作目录为protobuf，待编译文件为hello.proto &amp;gt; cd protobuf &amp;gt; python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. hello.proto Go Golang中的编译</description>
			<content type="html"><![CDATA[<h1 id="python">Python</h1>
<h3 id="python中的编译方式">Python中的编译方式</h3>
<p>假设当前工作目录为<code>protobuf</code>，待编译文件为<code>hello.proto</code></p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> protobuf
&gt; python -m grpc_tools.protoc --python_out<span class="o">=</span>. --grpc_python_out<span class="o">=</span>. -I. hello.proto
</code></pre></div><h1 id="go">Go</h1>
<h3 id="golang中的编译方式">Golang中的编译方式</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> protobuf
&gt; protoc --go_out<span class="o">=</span><span class="nv">plugins</span><span class="o">=</span>grpc:. hello.proto
</code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
