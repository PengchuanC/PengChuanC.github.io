<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>文章列表 on Learn to Code</title>
		<link>https://pengchuanc.github.io/posts/</link>
		<description>Recent content in 文章列表 on Learn to Code</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 11 Dec 2020 16:41:32 +0800</lastBuildDate>
		<atom:link href="https://pengchuanc.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Python中使用UDP来推送数据</title>
			<link>https://pengchuanc.github.io/posts/python-udp/</link>
			<pubDate>Fri, 11 Dec 2020 16:41:32 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-udp/</guid>
			<description>1.UDP简介 UDP协议（User Datagram Protocol）中文名称是用户数据报协议，是OSI（Open System Interconnection，开放式系</description>
			<content type="html"><![CDATA[<h2 id="1udp简介">1.UDP简介</h2>
<p>UDP协议（User Datagram Protocol）中文名称是用户数据报协议，是OSI（Open System Interconnection，开放式系统互联）参考模型中一种无连接的传输层协议，不需要建立连接就能直接进行数据发送和接收，属于不可靠的、没有时序的通信，但是UDP协议的实时性比较好，通常用于视频直播相关领域。</p>
<p>使用UDP推送数据时，不会考虑客户端是否会接受到数据，因此并不能保证它们能到达目的地。但由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。</p>
<p>接下来简单写个demo来尝试写一个推送服务。</p>
<h2 id="2服务端">2.服务端</h2>
<p>服务端代码如下</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># server.py</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">datetime</span>

<span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span>


<span class="n">pool</span> <span class="o">=</span> <span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Manager</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;客户端管理
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">_clients</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">server</span><span class="p">:</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">address</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">port</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;Manager instance
</span><span class="s2">
</span><span class="s2">        Args:
</span><span class="s2">            address: 地址
</span><span class="s2">            port: 端口
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">server_socket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_DGRAM</span><span class="p">)</span>
        <span class="n">address</span> <span class="o">=</span> <span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
        <span class="n">server_socket</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="n">server_socket</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">client</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;注册客户端
</span><span class="s2">
</span><span class="s2">        Args:
</span><span class="s2">            name: 客户端名称
</span><span class="s2">            client: 客户端ip
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_clients</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">name</span><span class="p">:</span> <span class="n">client</span><span class="p">})</span>
        <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;用户 {name} 成功注册&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">unregister</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;取消注册
</span><span class="s2">
</span><span class="s2">        Args:
</span><span class="s2">            name: 客户端名称
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_clients</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_clients</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">broadcast</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;为每一个注册的客户端推送消息
</span><span class="s2">
</span><span class="s2">        Args:
</span><span class="s2">            msg: 消息内容
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">for</span> <span class="n">client</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_clients</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">sendto</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">encode</span><span class="p">(),</span> <span class="n">client</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">check_register</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;监听注册事件&#34;&#34;&#34;</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">name</span><span class="p">,</span> <span class="n">client_address</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">recvfrom</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">name</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">name</span><span class="o">.</span><span class="n">decode</span><span class="p">(),</span> <span class="n">client_address</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">do</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;模拟推送业务&#34;&#34;&#34;</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">date</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1"> %H:%M:%S&#39;</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">serve</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
        <span class="n">manager</span> <span class="o">=</span> <span class="n">Manager</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
        <span class="n">pool</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">manager</span><span class="o">.</span><span class="n">check_register</span><span class="p">)</span>
        <span class="n">pool</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">manager</span><span class="o">.</span><span class="n">do</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">Manager</span><span class="o">.</span><span class="n">serve</span><span class="p">(</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">)</span>

</code></pre></div><p>server端每隔10秒会向订阅的客户端推送一次数据，数据内容用当前时间模拟。发现订阅和推送数据放入线程池中处理，避免堵塞。</p>
<h2 id="3客户端">3.客户端</h2>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="c1"># client.py</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span>


<span class="n">pool</span> <span class="o">=</span> <span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Client</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;客户端&#34;&#34;&#34;</span>

    <span class="n">_server</span><span class="p">:</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span>
    <span class="n">_address</span><span class="p">:</span> <span class="nb">tuple</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_address</span> <span class="o">=</span> <span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_server</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_DGRAM</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_server</span><span class="o">.</span><span class="n">sendto</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">encode</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">_address</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">receive</span><span class="p">,</span> <span class="n">sender</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_server</span><span class="o">.</span><span class="n">recvfrom</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
            <span class="n">receive</span> <span class="o">=</span> <span class="n">receive</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
            <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;{self.name} 收到数据 {receive}&#39;</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">addr</span> <span class="o">=</span> <span class="s1">&#39;127.0.0.1&#39;</span>
    <span class="n">p</span> <span class="o">=</span> <span class="mi">9000</span>
    <span class="n">users</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">]</span>

    <span class="c1"># 模拟5个用户去订阅数据</span>
    <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
        <span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
        <span class="n">client</span><span class="o">.</span><span class="n">register</span><span class="p">()</span>
        <span class="n">pool</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">receive</span><span class="p">)</span>

</code></pre></div><p>客户端模拟5个用户去订阅数据，订阅后会持续收到服务端推送的数据。取消注册的方法暂未实现，原理类似，通常会使用tcp协议来确认客户端身份，进行订阅和取消订阅操作，数据推送使用udp。</p>
]]></content>
		</item>
		
		<item>
			<title>Python中的str类型和int数组类型转换</title>
			<link>https://pengchuanc.github.io/posts/python-bytes-str/</link>
			<pubDate>Thu, 10 Dec 2020 09:42:59 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/python-bytes-str/</guid>
			<description>在编程语言中，string类型往往是通过int数组来实现的，在python中，str和int[]同样可以转换 1.str转bytes 将字符串转</description>
			<content type="html"><![CDATA[<p>在编程语言中，string类型往往是通过int数组来实现的，在python中，str和int[]同样可以转换</p>
<h3 id="1str转bytes">1.str转bytes</h3>
<p>将字符串转化为bytes类型，即int数组</p>
<pre><code class="language-pow" data-lang="pow">&gt;&gt;&gt; a = 'abc'

&gt;&gt;&gt; # 将a转为bytes类型
&gt;&gt;&gt; a.encode()
b'abc'

&gt;&gt;&gt; # 转为List[int]
&gt;&gt;&gt; [x for x in a.encode()]
[97, 98, 99]
</code></pre><h3 id="2将int数组转化为str">2.将int数组转化为str</h3>
<pre><code class="language-po" data-lang="po">&gt;&gt;&gt; a = [97, 98, 99]

&gt;&gt;&gt; # 先转为bytes
&gt;&gt;&gt; bytes(a)
b'abc'
&gt;&gt;&gt; bytes(a).decode()
'abc'
</code></pre>]]></content>
		</item>
		
		<item>
			<title>通过grpc服务上传下载大型文件(Python)</title>
			<link>https://pengchuanc.github.io/posts/grpc_stream_python/</link>
			<pubDate>Wed, 09 Dec 2020 15:49:54 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/grpc_stream_python/</guid>
			<description>传统文件的下载方式主要使用tcp服务，这种功能同样可以使用grpc的stream来实现， 通过使用流(streaming)，可以向服务器或者客</description>
			<content type="html"><![CDATA[<p>传统文件的下载方式主要使用tcp服务，这种功能同样可以使用grpc的stream来实现，
通过使用流(streaming)，可以向服务器或者客户端持续发送数据，来达到上传和下载文件的目的。</p>
<p>Python中使用stream的要点在于灵活运用generator，发送数据使用yield，数据传输完成使用return而非break。</p>
<h2 id="1创建项目">1.创建项目</h2>
<p>整个项目位于desktop目录下，首先新建必要的目录及文件。</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">desktop</span><span class="p">&gt;</span> <span class="n">mkdir</span> <span class="n">file_server</span>
<span class="n">desktop</span><span class="p">&gt;</span> <span class="n">mkdir</span> <span class="n">file_server</span><span class="p">/</span><span class="n">proto</span>
<span class="n">desktop</span><span class="p">&gt;</span> <span class="n">mkdir</span> <span class="n">file_server</span><span class="p">/</span><span class="n">send</span>
<span class="n">desktop</span><span class="p">&gt;</span> <span class="n">mkdir</span> <span class="n">file_server</span><span class="p">/</span><span class="n">download</span>
</code></pre></div><p>在<code>file_server</code>目录下添加<code>__init__.py</code>文件，保证<code>file_sever</code>为一个python package</p>
<p>在<code>file_server/send</code>目录下新建<code>send.xlsx</code>文件，测试下载文件，可以在文件中写入一些数据方便检查是否下载成功。</p>
<p>在<code>file_server/download</code>目录下新建文件<code>download.docx</code>文件，测试上传文件，同样可以写入一些内容来测试是否上传成功。</p>
<h2 id="2创建proto文件">2.创建proto文件</h2>
<p>在<code>file_server</code>目录下创建<code>fileserver.proto</code>文件来定义grpc服务，文件内容如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-protobuf" data-lang="protobuf"><span class="n">syntax</span> <span class="o">=</span> <span class="s">&#34;proto3&#34;</span><span class="p">;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="kn">package</span> <span class="nn">file_server</span><span class="p">;</span><span class="err">
</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 文件传输服务
</span><span class="c1"></span><span class="kd">service</span> <span class="n">FileTransfer</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="c1">// 上传文件
</span><span class="c1"></span>  <span class="k">rpc</span> <span class="n">SendFile</span><span class="p">(</span><span class="n">stream</span> <span class="n">RequestSend</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">ResponseStatus</span><span class="p">);</span><span class="err">
</span><span class="err">
</span><span class="err"></span>  <span class="c1">// 下载文件
</span><span class="c1"></span>  <span class="k">rpc</span> <span class="n">DownloadFile</span><span class="p">(</span><span class="n">RequestFile</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">stream</span> <span class="n">ResponseStream</span><span class="p">);</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 文件上传数据流
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">RequestSend</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="kt">bytes</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 上传结果状态
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">ResponseStatus</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="kt">bool</span> <span class="n">ok</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 文件下载请求
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">RequestFile</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="kt">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 文件下载数据流
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">ResponseStream</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="kt">bytes</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span></code></pre></div><p>然后编译<code>fileserver.proto</code>文件为python文件</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">python</span> <span class="n">-m</span> <span class="n">grpc_tools</span><span class="p">.</span><span class="n">protoc</span> <span class="p">-</span><span class="n">-python_out</span><span class="p">=./</span><span class="n">file_server</span> <span class="p">-</span><span class="n">-grpc_python_out</span><span class="p">=./</span><span class="n">file_server</span> <span class="n">-I</span> <span class="p">./</span><span class="n">file_server</span><span class="p">/</span><span class="n">proto</span> <span class="n">fileserver</span><span class="p">.</span><span class="n">proto</span>
</code></pre></div><p>相关参数解释：</p>
<ul>
<li>&ndash;python-out: <code>fileserver_pb.py</code>文件的输出目录</li>
<li>&ndash;grpc_python_out：<code>fileserver_pb_grpc.py</code>文件输出目录</li>
<li>-I: protobuf源文件所在目录</li>
</ul>
<p>修改生成的<code>filesever_pb_grpc.py</code>的<code>import</code>部分代码:</p>
<pre><code class="language-pyth" data-lang="pyth"># Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
&quot;&quot;&quot;Client and server classes corresponding to protobuf-defined services.&quot;&quot;&quot;
import grpc

import file_server.fileserver_pb2 as fileserver__pb2
</code></pre><p>修改原因是package方式组织的python代码引入模块的方式与单文件脚本的引入方式不同，直接引入<code>fileserver__pb2</code>模块的话会提示无法找到该模块。</p>
<h2 id="3创建server端">3.创建server端</h2>
<p>在<code>file_server</code>目录下新建<code>server.py</code>文件，内容如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">time</span>

<span class="kn">import</span> <span class="nn">grpc</span>
<span class="kn">from</span> <span class="nn">concurrent</span> <span class="kn">import</span> <span class="n">futures</span>
<span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">import</span> <span class="nn">file_server.fileserver_pb2</span> <span class="kn">as</span> <span class="nn">fp</span>
<span class="kn">import</span> <span class="nn">file_server.fileserver_pb2_grpc</span> <span class="kn">as</span> <span class="nn">fpg</span>


<span class="n">base_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="vm">__file__</span><span class="p">)</span><span class="o">.</span><span class="n">parent</span>


<span class="k">def</span> <span class="nf">file_read</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;读取待发送的文件的内容
</span><span class="s2">
</span><span class="s2">    由于是测试脚本，直接读取待下载的文件，即 ./file_server/send.xlsx
</span><span class="s2">    模拟大文件需要分块读取，持续发送
</span><span class="s2">    Args:
</span><span class="s2">        name: 文件名
</span><span class="s2">    Returns:
</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">send_file_path</span> <span class="o">=</span> <span class="n">base_path</span> <span class="o">/</span> <span class="s1">&#39;send&#39;</span> <span class="o">/</span> <span class="n">name</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">1024</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">send_file_path</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="nb">file</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
            <span class="n">read</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">read</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="k">yield</span> <span class="n">fp</span><span class="o">.</span><span class="n">ResponseStream</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">read</span><span class="p">)</span>
            <span class="n">start</span> <span class="o">+=</span> <span class="n">size</span>


<span class="k">class</span> <span class="nc">FileTransferServer</span><span class="p">(</span><span class="n">fpg</span><span class="o">.</span><span class="n">FileTransferServicer</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;文件传输服务&#34;&#34;&#34;</span>

    <span class="k">def</span> <span class="nf">SendFile</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request_iterator</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;文件发送服务
</span><span class="s2">
</span><span class="s2">        继承定义好的文件发送服务
</span><span class="s2">        Args:
</span><span class="s2">            request_iterator: 上传的文件流 : Generator[byte]
</span><span class="s2">            context: 上下文
</span><span class="s2">
</span><span class="s2">        Returns:
</span><span class="s2">            文件上传的状态 :ResponseStatus
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;接受到文件上传请求&#39;</span><span class="p">)</span>
        <span class="n">send_file</span> <span class="o">=</span> <span class="n">base_path</span> <span class="o">/</span> <span class="s1">&#39;send&#39;</span> <span class="o">/</span> <span class="s1">&#39;download.docx&#39;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">send_file</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">request_iterator</span><span class="p">:</span>
                    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">fp</span><span class="o">.</span><span class="n">ResponseStatus</span><span class="p">(</span><span class="n">ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">fp</span><span class="o">.</span><span class="n">ResponseStatus</span><span class="p">(</span><span class="n">ok</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">DownloadFile</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;文件下载服务
</span><span class="s2">
</span><span class="s2">        继承定义好的文件下载服务
</span><span class="s2">        Args:
</span><span class="s2">            request: 请求需要下载的文件名 :RequestFile
</span><span class="s2">            context: 上下文管理
</span><span class="s2">
</span><span class="s2">        Returns:
</span><span class="s2">            文件下载的数据流 :ResponseStream
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
        <span class="n">file_name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">name</span>
        <span class="nb">file</span> <span class="o">=</span> <span class="n">file_read</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">file_name</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">response</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">response</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">serve</span><span class="p">():</span>
        <span class="s2">&#34;&#34;&#34;启动服务
</span><span class="s2">
</span><span class="s2">        Returns:
</span><span class="s2">
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">server</span> <span class="o">=</span> <span class="n">grpc</span><span class="o">.</span><span class="n">server</span><span class="p">(</span><span class="n">futures</span><span class="o">.</span><span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
        <span class="n">fpg</span><span class="o">.</span><span class="n">add_FileTransferServicer_to_server</span><span class="p">(</span><span class="n">FileTransferServer</span><span class="p">(),</span> <span class="n">server</span><span class="p">)</span>
        <span class="n">server</span><span class="o">.</span><span class="n">add_insecure_port</span><span class="p">(</span><span class="s2">&#34;[::]:50051&#34;</span><span class="p">)</span>
        <span class="n">server</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s2">&#34;start server&#34;</span><span class="p">)</span>
                <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
            <span class="n">server</span><span class="o">.</span><span class="n">stop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">FileTransferServer</span><span class="o">.</span><span class="n">serve</span><span class="p">()</span>

</code></pre></div><h2 id="4创建client端">4.创建client端</h2>
<p>在<code>file_server</code>目录下新建<code>client.py</code>文件，内容如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">grpc</span>

<span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">from</span> <span class="nn">file_server</span> <span class="kn">import</span> <span class="n">fileserver_pb2</span> <span class="k">as</span> <span class="n">fp</span><span class="p">,</span> <span class="n">fileserver_pb2_grpc</span> <span class="k">as</span> <span class="n">fpg</span>


<span class="n">base_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="vm">__file__</span><span class="p">)</span><span class="o">.</span><span class="n">parent</span>


<span class="k">def</span> <span class="nf">send_file</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;上传文件
</span><span class="s2">
</span><span class="s2">    模拟大文件，分块发送
</span><span class="s2">    Returns:
</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">file_path</span> <span class="o">=</span> <span class="n">base_path</span> <span class="o">/</span> <span class="s1">&#39;download&#39;</span> <span class="o">/</span> <span class="s1">&#39;download.docx&#39;</span>
    <span class="c1"># 模拟大文件，分块读取发送</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">1024</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">f</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
            <span class="n">read</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">read</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="n">request</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">RequestSend</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">read</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">request</span>
            <span class="n">start</span> <span class="o">+=</span> <span class="n">size</span>


<span class="k">class</span> <span class="nc">Client</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">stub</span><span class="p">:</span> <span class="n">fpg</span><span class="o">.</span><span class="n">FileTransferStub</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">50051</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">channel</span> <span class="o">=</span> <span class="n">grpc</span><span class="o">.</span><span class="n">insecure_channel</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;127.0.0.1:{port}&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">stub</span> <span class="o">=</span> <span class="n">fpg</span><span class="o">.</span><span class="n">FileTransferStub</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">channel</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">channel</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;send.xlsx&#39;</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;文件下载
</span><span class="s2">
</span><span class="s2">        会将send.xlsx文件下载到 ./file_sever/download目录
</span><span class="s2">        Args:
</span><span class="s2">            name: 下载文件名，默认为 send.xlsx
</span><span class="s2">
</span><span class="s2">        Returns:
</span><span class="s2">
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">RequestFile</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">stub</span><span class="o">.</span><span class="n">DownloadFile</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
        <span class="n">download</span> <span class="o">=</span> <span class="n">base_path</span> <span class="o">/</span> <span class="s1">&#39;download&#39;</span> <span class="o">/</span> <span class="n">name</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">download</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;上传文件
</span><span class="s2">
</span><span class="s2">        默认将上传 ./file_server/download/download.docx
</span><span class="s2">        Returns:
</span><span class="s2">
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="nb">file</span> <span class="o">=</span> <span class="n">send_file</span><span class="p">()</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">stub</span><span class="o">.</span><span class="n">SendFile</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">resp</span>

    <span class="k">def</span> <span class="fm">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="fm">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="k">with</span> <span class="n">Client</span><span class="p">()</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
        <span class="c1"># 上传文件</span>
        <span class="n">resp_status</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">send</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="n">resp_status</span><span class="p">)</span>

        <span class="c1"># 下载文件</span>
        <span class="n">client</span><span class="o">.</span><span class="n">download</span><span class="p">()</span>

</code></pre></div><h2 id="5运行服务">5.运行服务</h2>
<p>打开两个控制台窗口，cd到<code>desktop</code>目录下，分别运行</p>
<pre><code class="language-pow" data-lang="pow">desktop&gt; python -m file_server.server
</code></pre><div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">desktop</span><span class="p">&gt;</span> <span class="n">python</span> <span class="n">-m</span> <span class="n">file_server</span><span class="p">.</span><span class="n">client</span>
</code></pre></div><p>可以看到<code>send.xlsx</code>文件下载到了<code>file_server/download</code>目录，<code>download.docx</code>文件上传到了<code>file_server/send</code>目录。</p>
]]></content>
		</item>
		
		<item>
			<title>发布/订阅模式</title>
			<link>https://pengchuanc.github.io/posts/pub-sub-model/</link>
			<pubDate>Fri, 04 Dec 2020 18:06:42 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/pub-sub-model/</guid>
			<description>发布订阅模式比较常用，近期使用grpc也涉及到连接管理简单记录一下发布订阅模式的实现，主要使用chan来传输数据 也可以考虑使用回调函数来处理</description>
			<content type="html"><![CDATA[<p>发布订阅模式比较常用，近期使用grpc也涉及到连接管理简单记录一下发布订阅模式的实现，主要使用chan来传输数据</p>
<p>也可以考虑使用回调函数来处理publish的内容</p>
<h2 id="定义publisher">定义Publisher</h2>
<p>首先定义一个Publish的struct，主要包含Subscribers属性来管理订阅者，订阅者必须使用指针来保证数据传递</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// Publisher 发布者
</span><span class="c1">// 管理订阅者
</span><span class="c1">// 发布内容
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Publisher</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
	<span class="nx">Subscribers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Subscriber</span>
	<span class="nx">waitGroup</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewPublisher</span><span class="p">()</span> <span class="o">*</span><span class="nx">Publisher</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Publisher</span><span class="p">{</span>
		<span class="nx">Subscribers</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Subscriber</span><span class="p">),</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>接下来实现Publisher的基础功能</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang">
<span class="c1">// 发布者的功能
</span><span class="c1">// 添加订阅者
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">AddSubscriber</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;添加订阅者%s成功\n&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 删除订阅者
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">RemoveSubscriber</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
		<span class="nb">delete</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;移除订阅者%s成功\n&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 发布内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">Publish</span><span class="p">(</span><span class="nx">msg</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">))</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">s</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span> <span class="p">{</span>
		<span class="nx">d_</span> <span class="o">:=</span> <span class="nx">msg</span>
		<span class="nx">s_</span> <span class="o">:=</span> <span class="nx">s</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">s_</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">d_</span><span class="p">)</span>
			<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="p">}()</span>
	<span class="p">}</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><h2 id="定义subscriber">定义Subscriber</h2>
<p>订阅者主要是接受发布者推送的数据，当然也应该包含一个唯一的标识符，可采用uuid，本文简单采用一个name(string)</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="kd">type</span> <span class="nx">Subscriber</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
	<span class="nx">Name</span> <span class="kt">string</span>
	<span class="nx">Data</span> <span class="kd">chan</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewSubscriber</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Subscriber</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Subscriber</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">Data</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)}</span>
<span class="p">}</span>
</code></pre></div><p>订阅者应当实现的功能</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// 订阅者功能
</span><span class="c1">// 订阅内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">Subscribe</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">AddSubscriber</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 取消订阅
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">UnSubscribe</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">RemoveSubscriber</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 处理发布的内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">msg</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">.</span><span class="nx">Data</span> <span class="o">&lt;-</span> <span class="nx">msg</span>
		<span class="nx">s</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="p">}()</span>
<span class="p">}</span>
</code></pre></div><p>完整代码</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// demo/subscribe/publisher.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">subscribe</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;sync&#34;</span>
<span class="p">)</span>

<span class="c1">// Publisher 发布者
</span><span class="c1">// 管理订阅者
</span><span class="c1">// 发布内容
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Publisher</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
	<span class="nx">Subscribers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Subscriber</span>
	<span class="nx">waitGroup</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewPublisher</span><span class="p">()</span> <span class="o">*</span><span class="nx">Publisher</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Publisher</span><span class="p">{</span>
		<span class="nx">Subscribers</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Subscriber</span><span class="p">),</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 发布者的功能
</span><span class="c1">// 添加订阅者
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">AddSubscriber</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;添加订阅者%s成功\n&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 删除订阅者
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">RemoveSubscriber</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
		<span class="nb">delete</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;移除订阅者%s成功\n&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 发布者事件处理 - 产生数据
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">Update</span><span class="p">(){</span>

<span class="p">}</span>

<span class="c1">// 发布内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="nf">Publish</span><span class="p">(</span><span class="nx">msg</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span><span class="p">))</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">s</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Subscribers</span> <span class="p">{</span>
		<span class="nx">d_</span> <span class="o">:=</span> <span class="nx">msg</span>
		<span class="nx">s_</span> <span class="o">:=</span> <span class="nx">s</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">s_</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">d_</span><span class="p">)</span>
			<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="p">}()</span>
	<span class="p">}</span>
	<span class="nx">p</span><span class="p">.</span><span class="nx">waitGroup</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// demo/subscribe/subscriber.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">subscribe</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;sync&#34;</span>
<span class="p">)</span>

<span class="c1">// Subscriber 订阅者
</span><span class="c1">// 订阅内容，等待发布者发布内容
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Subscriber</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
	<span class="nx">Name</span> <span class="kt">string</span>
	<span class="nx">Data</span> <span class="kd">chan</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewSubscriber</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Subscriber</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Subscriber</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">Data</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)}</span>
<span class="p">}</span>


<span class="c1">// 订阅者功能
</span><span class="c1">// 订阅内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">Subscribe</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">AddSubscriber</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 取消订阅
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">UnSubscribe</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Publisher</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">p</span><span class="p">.</span><span class="nf">RemoveSubscriber</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 处理发布的内容
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Subscriber</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">msg</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">s</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">.</span><span class="nx">Data</span> <span class="o">&lt;-</span> <span class="kt">string</span>
		<span class="nx">s</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
	<span class="p">}()</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang"><span class="c1">// demo/main.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
  <span class="s">&#34;fmt&#34;</span>
  <span class="s">&#34;time&#34;</span>
  <span class="s">&#34;demo/subscribe&#34;</span>
  <span class="s">&#34;strconv&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="p">(</span>
    <span class="nx">pub</span> <span class="o">*</span><span class="nx">subscribe</span><span class="p">.</span><span class="nx">Publiser</span>
    <span class="nx">sub1</span> <span class="o">*</span><span class="nx">subscribe</span><span class="p">.</span><span class="nx">Subscriber</span>
    <span class="nx">sub2</span> <span class="o">*</span><span class="nx">subscribe</span><span class="p">.</span><span class="nx">Subscriber</span>
  <span class="p">)</span>

  <span class="nx">pub</span> <span class="p">=</span> <span class="nx">subscibe</span><span class="p">.</span><span class="nf">NewPublisher</span><span class="p">()</span>

  <span class="nx">sub1</span> <span class="p">=</span> <span class="nx">subscribe</span><span class="p">.</span><span class="nf">NewSubscriber</span><span class="p">(</span><span class="s">&#34;pub1&#34;</span><span class="p">)</span>
  <span class="nx">sub2</span> <span class="p">=</span> <span class="nx">subscribe</span><span class="p">.</span><span class="nf">NewSubscriber</span><span class="p">(</span><span class="s">&#34;pub2&#34;</span><span class="p">)</span>
  <span class="nx">sub1</span><span class="p">.</span><span class="nf">Subscribe</span><span class="p">(</span><span class="nx">pub</span><span class="p">)</span>
  <span class="nx">sub2</span><span class="p">.</span><span class="nf">Subscribe</span><span class="p">(</span><span class="nx">pub</span><span class="p">)</span>

  <span class="k">go</span> <span class="kd">func</span><span class="p">(){</span>
    <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="p">{</span>
      <span class="k">if</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">100</span> <span class="p">{</span>
        <span class="k">break</span>
      <span class="p">}</span>
      <span class="nx">pub</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
      <span class="nx">i</span> <span class="o">++</span>
    <span class="p">}</span>
  <span class="p">}()</span>

  <span class="k">go</span> <span class="kd">func</span><span class="p">(){</span>
    <span class="k">for</span><span class="p">{</span>
      <span class="nx">d1</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">sub1</span><span class="p">.</span><span class="nx">Data</span>
      <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
        <span class="k">continue</span>
      <span class="p">}</span>
      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">d1</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}()</span>

    <span class="k">go</span> <span class="kd">func</span><span class="p">(){</span>
    <span class="k">for</span><span class="p">{</span>
      <span class="nx">d2</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">sub2</span><span class="p">.</span><span class="nx">Data</span>
      <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
        <span class="k">continue</span>
      <span class="p">}</span>
      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">d2</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}()</span>

  <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>利用Nginx和Daphne部署Django3.x和Django channels 3.x</title>
			<link>https://pengchuanc.github.io/posts/django-channels-deploy/</link>
			<pubDate>Wed, 02 Dec 2020 18:13:44 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/django-channels-deploy/</guid>
			<description>Django在3.0正式引入asgi，部署方式与2.x略有不同 仅部署http网站 如果仅部署http网站，可采用uvicorn来进行部署，然后</description>
			<content type="html"><![CDATA[<p>Django在3.0正式引入asgi，部署方式与2.x略有不同</p>
<h2 id="仅部署http网站">仅部署http网站</h2>
<p>如果仅部署http网站，可采用uvicorn来进行部署，然后通过nginx代理地址即可</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> <span class="o">[</span>your_project<span class="o">]</span>
&gt; nohup uvicorn <span class="o">[</span>your_project<span class="o">]</span>.asgi:application --host 0.0.0.0 --port <span class="m">5000</span> &gt; asgi.log <span class="p">&amp;</span>
</code></pre></div><pre><code class="language-conf" data-lang="conf">server {
  location / {
    proxy_pass http://0.0.0.0:5000;
  }
}
</code></pre><h2 id="部署http和websocket">部署http和websocket</h2>
<p>Django中websocket功能主要通过<a href="https://channels.readthedocs.io/en/stable/">django-channels</a>组件实现，由于引入了ws，部署方式略有不同</p>
<p>官方推荐使用daphne部署</p>
<p>以我当前的<code>sma_management</code>项目为例，django3.x版本中，在 <code>sma_management/sma_management/</code>目录下应当有<code>asgi.py</code>文件，引入channels后，应当如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">django</span>
<span class="kn">from</span> <span class="nn">django.core.asgi</span> <span class="kn">import</span> <span class="n">get_asgi_application</span>


<span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s2">&#34;DJANGO_SETTINGS_MODULE&#34;</span><span class="p">,</span> <span class="s2">&#34;sma_management.settings&#34;</span><span class="p">)</span>
<span class="n">django</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span>


<span class="kn">from</span> <span class="nn">channels.auth</span> <span class="kn">import</span> <span class="n">AuthMiddlewareStack</span>
<span class="kn">from</span> <span class="nn">channels.routing</span> <span class="kn">import</span> <span class="n">ProtocolTypeRouter</span><span class="p">,</span> <span class="n">URLRouter</span>
<span class="kn">import</span> <span class="nn">investment.routing</span>


<span class="n">application</span> <span class="o">=</span> <span class="n">ProtocolTypeRouter</span><span class="p">({</span>
  <span class="s2">&#34;http&#34;</span><span class="p">:</span> <span class="n">get_asgi_application</span><span class="p">(),</span>
  <span class="s2">&#34;websocket&#34;</span><span class="p">:</span> <span class="n">AuthMiddlewareStack</span><span class="p">(</span>
        <span class="n">URLRouter</span><span class="p">(</span>
            <span class="n">investment</span><span class="o">.</span><span class="n">routing</span><span class="o">.</span><span class="n">websocket_urlpatterns</span>
        <span class="p">)</span>
    <span class="p">),</span>
<span class="p">})</span>
</code></pre></div><p>其中<code>django.setup()</code>命令必须在channels相关业务前引入，不然daphne启动服务会抛出错误</p>
<p>配置好<code>asgi.py</code>后，仅需在项目目录中启动shell，输入：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; nohup daphne -p <span class="m">8000</span> sma_management.asgi:application &gt; daphne.log <span class="p">&amp;</span>
</code></pre></div><p>http和ws服务均使用8000端口，使用Nginx代理的话，配置如下：</p>
<pre><code class="language-conf" data-lang="conf">
upstream channels-backend {
    server localhost:8000;
}

server {
  location /management {
      proxy_pass http://0.0.0.0:8000;
  }

  location /ws {
      proxy_pass http://channels-backend;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection &quot;upgrade&quot;;

      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $server_name;
  }
}

</code></pre><p>这样便可以使用 http://0.0.0.0/management/ 访问http服务，使用 ws://0.0.0.0/ws/ 访问ws服务</p>
]]></content>
		</item>
		
		<item>
			<title>记录GRPC在各种语言下的编译方式</title>
			<link>https://pengchuanc.github.io/posts/rpc-complie/</link>
			<pubDate>Wed, 02 Dec 2020 17:42:12 +0800</pubDate>
			
			<guid>https://pengchuanc.github.io/posts/rpc-complie/</guid>
			<description>Python Python中的编译方式 假设当前工作目录为protobuf，待编译文件为hello.proto &amp;gt; cd protobuf &amp;gt; python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. hello.proto Go Golang中的编译</description>
			<content type="html"><![CDATA[<h1 id="python">Python</h1>
<h3 id="python中的编译方式">Python中的编译方式</h3>
<p>假设当前工作目录为<code>protobuf</code>，待编译文件为<code>hello.proto</code></p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> protobuf
&gt; python -m grpc_tools.protoc --python_out<span class="o">=</span>. --grpc_python_out<span class="o">=</span>. -I. hello.proto
</code></pre></div><h1 id="go">Go</h1>
<h3 id="golang中的编译方式">Golang中的编译方式</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">&gt; <span class="nb">cd</span> protobuf
&gt; protoc --go_out<span class="o">=</span><span class="nv">plugins</span><span class="o">=</span>grpc:. hello.proto
</code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
